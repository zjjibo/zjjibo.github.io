<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python_装饰器</title>
      <link href="/2022/04/29/python-%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2022/04/29/python-%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><blockquote><p>example_helloworld</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">fn</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello, %s&quot;</span> % fn.__name__)</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;goodby, %s&quot;</span> % fn.__name__)</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"><span class="meta">@hello</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am foo&quot;</span>)</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><blockquote><p>output</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[chenaho@chenhao-air]$ python hello.py</span><br><span class="line">hello, foo</span><br><span class="line">i am foo</span><br><span class="line">goodby, foo</span><br></pre></td></tr></table></figure><h3 id="Decorator的本质"><a href="#Decorator的本质" class="headerlink" title="Decorator的本质"></a>Decorator的本质</h3><blockquote><p>对于Python的这个@注解语法糖- Syntactic Sugar 来说，当你在用某个@decorator来修饰某个函数func时，如下所示:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>被解释成为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = decorate(func)</span><br></pre></td></tr></table></figure></p></blockquote><p><code>注意</code></p><blockquote><p>还有一个赋值语句，把decorator这个函数的返回值赋值回了原来的func。根据《函数式编程》中的first class functions中的定义的，你可以把函数当成变量来使用，所以，<code>decorator必须得返回了一个函数出来给func</code>，这就是所谓的higher order function 高阶函数，不然，后面当func()调用的时候就会出错。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fuck</span>(<span class="params">fn</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;fuck %s!&quot;</span> % fn.__name__[::-<span class="number">1</span>].upper())</span><br><span class="line"></span><br><span class="line"><span class="meta">@fuck</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wfg</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>没有调用wfg()语句，代码可以直接执行，带有<code>wrapper函数的在函数调用时生效</code>。<br>对于第一个例子，hello(foo)返回了wrapper()函数，所以，<code>foo其实变成了wrapper的一个变量</code>，而后面的foo()执行其实变成了wrapper()。</p></blockquote><h2 id="对于多个参数的decorator"><a href="#对于多个参数的decorator" class="headerlink" title="对于多个参数的decorator"></a>对于多个参数的decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator_one</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorator_two</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>相当于</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = decorator(arg1,arg2)(func)</span><br></pre></td></tr></table></figure><blockquote><p>这意味着decorator(arg1, arg2)`这个函数需要返回一个“真正的decorator”。</p></blockquote><h2 id="带有参数及多个decrorator"><a href="#带有参数及多个decrorator" class="headerlink" title="带有参数及多个decrorator"></a>带有参数及多个decrorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">makeHtmlTag</span>(<span class="params">tag, *args, **kwds</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">real_decorator</span>(<span class="params">fn</span>):</span><br><span class="line"></span><br><span class="line">css_class = <span class="string">&quot; class=&#x27;&#123;0&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(kwds[<span class="string">&quot;css_class&quot;</span>]) <span class="keyword">if</span> <span class="string">&quot;css_class&quot;</span> <span class="keyword">in</span> kwds <span class="keyword">else</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapped</span>(<span class="params">*args, **kwds</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&lt;&quot;</span>+tag+css_class+<span class="string">&quot;&gt;&quot;</span> + fn(*args, **kwds) + <span class="string">&quot;&lt;/&quot;</span>+tag+<span class="string">&quot;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wrapped</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> real_decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@makeHtmlTag(<span class="params">tag=<span class="string">&quot;b&quot;</span>, css_class=<span class="string">&quot;bold_css&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@makeHtmlTag(<span class="params">tag=<span class="string">&quot;i&quot;</span>, css_class=<span class="string">&quot;italic_css&quot;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hello())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;b class=&#x27;bold_css&#x27;&gt;&lt;i class=&#x27;italic_css&#x27;&gt;hello world&lt;/i&gt;&lt;/b&gt;`</span></span><br></pre></td></tr></table></figure><blockquote><p>在上面这个例子中，我们可以看到：makeHtmlTag有两个参数。所以，为了让 hello = makeHtmlTag(arg1, arg2)(hello) 成功，<code>makeHtmlTag 必需返回一个decorator</code> 。这样一来，我们就可以进入到 decorator 的逻辑中去了—— decorator得返回一个wrapper，wrapper里回调hello。</p></blockquote><h2 id="class式的Decorator"><a href="#class式的Decorator" class="headerlink" title="class式的Decorator"></a>class式的Decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myDecorator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fn</span>):</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;inside myDecorator.__init__()&quot;</span></span><br><span class="line">self.fn = fn</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self</span>):</span><br><span class="line">self.fn()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;inside myDecorator.__call__()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@myDecorator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aFunction</span>():</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;inside aFunction()&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Finished decorating aFunction()&quot;</span></span><br><span class="line"></span><br><span class="line">aFunction()</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># inside myDecorator.__init__()</span></span><br><span class="line"><span class="comment"># Finished decorating aFunction()</span></span><br><span class="line"><span class="comment"># inside aFunction()</span></span><br><span class="line"><span class="comment"># inside myDecorator.__call__()</span></span><br></pre></td></tr></table></figure><blockquote><p>上面这个示例展示了，用类的方式声明一个decorator。我们可以看到这个类中有两个成员：  </p><ul><li>一个是<strong>init</strong>()，这个方法是在我们给某个函数decorator时被调用，所以，需要有一个fn的参数，也就是被decorator的函数。</li><li>一个是<strong>call</strong>()，这个方法是在我们调用被decorator函数时被调用的。<br><code>注意</code></li><li>如果decorator有参数的话，<strong>init</strong>() 成员就不能传入fn了，而fn是在<strong>call</strong>的时候传入的。</li><li>wrapped(<em>args, </em>*kwargs) 这种方式来传递被decorator函数的参数。（其中：args是一个参数列表，kwargs是参数dict）</li></ul></blockquote><h2 id="Decorator的副作用"><a href="#Decorator的副作用" class="headerlink" title="Decorator的副作用"></a>Decorator的副作用</h2><blockquote><p>==<strong>会掩盖原有函数</strong>==， 对于最前面那个hello.py的例子来说，如果你查询一下foo.<strong>name</strong>的话，你会发现其输出的是“wrapper”，而不是我们期望的“foo”，这会给我们的程序埋一些坑。所以，Python的functool包中提供了一个叫wrap的decorator来消除这样的副作用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">fn</span>):</span><br><span class="line"></span><br><span class="line"><span class="meta">@wraps(<span class="params">fn</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello, %s&quot;</span>)% fn.__name__</span><br><span class="line">fn()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;goodby, %s&quot;</span>)% fn.__name__</span><br><span class="line"><span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;foo help doc&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;i am foo&quot;</span>)</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">foo()</span><br><span class="line"><span class="built_in">print</span>(foo.__name__) <span class="comment">#输出 foo</span></span><br><span class="line"><span class="built_in">print</span>(foo.__doc__) <span class="comment">#输出 foo help doc</span></span><br></pre></td></tr></table></figure><blockquote><p>但在<code>getargspec</code>时副作用不能完全消除。</p></blockquote><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.cnblogs.com/zh605929205/p/7704902.html">装饰器参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_对象</title>
      <link href="/2022/04/29/python-%E5%AF%B9%E8%B1%A1/"/>
      <url>/2022/04/29/python-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="python-面向对象"><a href="#python-面向对象" class="headerlink" title="python 面向对象"></a>python 面向对象</h1><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ul><li>类：描述具有==相同属性和方法==的集合。</li><li>类变量：定义在函数体之外，在实例化对象中是==公用==的。</li><li>数据成员：==类变量==或者==实例变量==。</li><li>方法重写：从父类继承的方法不能满足子类的需求。对其进行改写。</li><li>局部变量：定义在方法中的变量，<strong>只用于当前实例的类</strong>。</li><li>实例变量：在类的声明内部但是在类的其他成员方法之外声明。</li><li>继承：1.派生类 2.继承基类</li><li>实例化：创建一个类的实例，类的具体对象。</li><li>方法：类中<strong>定义的函数</strong>。</li><li>对象：通过类定义的<strong>数据结构实例</strong>。包括类变量和实例变量。</li></ul><hr><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">    emCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.salary = salary</span><br><span class="line">        Employee.empCount += <span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayCount</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Total Employee <span class="subst">&#123;Employee.empCount&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">displayEmployee</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Name:<span class="subst">&#123;self.name&#125;</span> Salary:<span class="subst">&#123;self.salary&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>empCount 变量是一个类变量，可以在这个类的所有实例之间共享。</li><li>__init__()是一种特殊的方法，是类的初始化方法。</li><li>self代表==类的实例==。self在定义类的方法时<strong>必须存在</strong>，但是在==调用时不必传入相应的参数==。<h4 id="self"><a href="#self" class="headerlink" title="self"></a>self</h4>类的方法和普通函数只有一个特别的区别——<strong>必须有一个额外的第一个参数名称</strong>，即self。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prt</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self)</span><br><span class="line">        <span class="built_in">print</span>(self.__class__)</span><br><span class="line"> </span><br><span class="line">t = Test()</span><br><span class="line">t.prt()</span><br></pre></td></tr></table></figure>self代表的是类的实例，是<strong>当前对象的地址</strong>。而==self.<strong>class</strong>==则指向类。self非python中的关键字，可以进行替换。<h4 id="创建实例对象"><a href="#创建实例对象" class="headerlink" title="创建实例对象"></a>创建实例对象</h4>python中类的实例化类似函数调用方式，以下使用类的名称Employee来实例化，==通过<strong>init</strong>方法来接收参数==。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class="line">emp1 = Employee(<span class="string">&quot;Zara&quot;</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">#&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class="line">emp2 = Employee(<span class="string">&quot;Manni&quot;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="访问属性"><a href="#访问属性" class="headerlink" title="访问属性"></a>访问属性</h3><p>可以使用如下类的名称访问类变量。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emp1.displayEmployee()</span><br><span class="line">emp2.displayEmployee()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total Employee &#123;Employee.empCount&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><br>完整实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">   <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayCount</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">f&quot;Total Employee: <span class="subst">&#123;Employee.empCount&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayEmployee</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&quot;Name : <span class="subst">&#123;self.name&#125;</span> Salary : <span class="subst">&#123;self.salary&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#&quot;创建 Employee 类的第一个对象&quot;</span></span><br><span class="line">emp1 = Employee(<span class="string">&quot;Zara&quot;</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">#&quot;创建 Employee 类的第二个对象&quot;</span></span><br><span class="line">emp2 = Employee(<span class="string">&quot;Manni&quot;</span>, <span class="number">5000</span>)</span><br><span class="line">emp1.displayEmployee()</span><br><span class="line">emp2.displayEmployee()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Total Employee: <span class="subst">&#123;Employee.empCount&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><br>结果如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Name :  Zara ,Salary:  <span class="number">2000</span></span><br><span class="line">Name :  Manni ,Salary:  <span class="number">5000</span></span><br><span class="line">Total Employee <span class="number">2</span></span><br></pre></td></tr></table></figure><br>添加、删除、修改类的属性：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emp1.age = <span class="number">7</span>  <span class="comment"># 添加一个 &#x27;age&#x27; 属性</span></span><br><span class="line">emp1.age = <span class="number">8</span>  <span class="comment"># 修改 &#x27;age&#x27; 属性</span></span><br><span class="line"><span class="keyword">del</span> emp1.age  <span class="comment"># 删除 &#x27;age&#x27; 属性</span></span><br></pre></td></tr></table></figure><br>函数访问属性</p><ul><li>getattr(obj, name[,default]):访问对象的属性。</li><li>hasattr(obj, name):检查是否存在一个属性。</li><li>setattr(obj,name,value):设置一个属性。若属性不存在，会创建一个新属性。</li><li>delattr(obj, name):删除属性<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">hasattr</span>(emp1, <span class="string">&#x27;age&#x27;</span>)    <span class="comment"># 如果存在 &#x27;age&#x27; 属性返回 True。</span></span><br><span class="line"><span class="built_in">getattr</span>(emp1, <span class="string">&#x27;age&#x27;</span>)    <span class="comment"># 返回 &#x27;age&#x27; 属性的值</span></span><br><span class="line"><span class="built_in">setattr</span>(emp1, <span class="string">&#x27;age&#x27;</span>, <span class="number">8</span>) <span class="comment"># 添加属性 &#x27;age&#x27; 值为 8</span></span><br><span class="line"><span class="built_in">delattr</span>(emp1, <span class="string">&#x27;age&#x27;</span>)    <span class="comment"># 删除属性 &#x27;age&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="python内置类属性"><a href="#python内置类属性" class="headerlink" title="python内置类属性"></a>python内置类属性</h2></li><li><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</li><li><strong>doc</strong> :类的文档字符串</li><li><strong>name</strong>: 类名</li><li><strong>module</strong>: 类定义所在的模块</li><li><strong>bases</strong> : 类的所有父类构成元素<br>实例如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">   <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayCount</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">f&quot;Total Employee <span class="subst">&#123;Employee.empCount&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayEmployee</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&quot;Name : <span class="subst">&#123;self.name&#125;</span> Salary : <span class="subst">&#123;self.salary&#125;</span>&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Employee.__doc__:&#123;Employee.__doc__&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Employee.__name__:&#123;Employee.__name__&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Employee.__module__:&#123;Employee.__module__&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Employee.__bases__:&#123;Employee.__bases__&#125;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Employee.__dict__:&#123;Employee.__dict__&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>结果如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Employee.__doc__: 所有员工的基类</span><br><span class="line">Employee.__name__: Employee</span><br><span class="line">Employee.__module__: __main__</span><br><span class="line">Employee.__bases__: ()</span><br><span class="line">Employee.__dict__: &#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;displayCount&#x27;</span>: &lt;function displayCount at <span class="number">0x10a939c80</span>&gt;, <span class="string">&#x27;empCount&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;displayEmployee&#x27;</span>: &lt;function displayEmployee at <span class="number">0x10a93caa0</span>&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="string">&#x27;\xe6\x89\x80\xe6\x9c\x89\xe5\x91\x98\xe5\xb7\xa5\xe7\x9a\x84\xe5\x9f\xba\xe7\xb1\xbb&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class="number">0x10a939578</span>&gt;&#125;</span><br></pre></td></tr></table></figure><h3 id="python对象销毁"><a href="#python对象销毁" class="headerlink" title="python对象销毁"></a>python对象销毁</h3>在 Python 内部<strong>记录着所有使用中的对象各有多少引用</strong>。==一个内部跟踪变量，称为一个引用计数器==<br>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是<strong>回收不是”立即”的</strong>， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">40</span>      <span class="comment"># 创建对象  &lt;40&gt;</span></span><br><span class="line">b = a       <span class="comment"># 增加引用， &lt;40&gt; 的计数</span></span><br><span class="line">c = [b]     <span class="comment"># 增加引用.  &lt;40&gt; 的计数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> a       <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class="line">b = <span class="number">100</span>     <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br><span class="line">c[<span class="number">0</span>] = -<span class="number">1</span>   <span class="comment"># 减少引用 &lt;40&gt; 的计数</span></span><br></pre></td></tr></table></figure><strong>实例</strong><br>析构函数 <strong>del</strong> ，<strong>del</strong>在对象销毁的时候被调用，当对象不再被使用时，<strong>del</strong>方法运行：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"> self, x=<span class="number">0</span>, y=<span class="number">0</span></span>):</span><br><span class="line">      self.x = x</span><br><span class="line">      self.y = y</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">      class_name = self.__class__.__name__</span><br><span class="line">      <span class="built_in">print</span>(class_name, <span class="string">&quot;销毁&quot;</span>)</span><br><span class="line"> </span><br><span class="line">pt1 = Point()</span><br><span class="line">pt2 = pt1</span><br><span class="line">pt3 = pt1</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(pt1), <span class="built_in">id</span>(pt2), <span class="built_in">id</span>(pt3)) <span class="comment"># 打印对象的id</span></span><br><span class="line"><span class="keyword">del</span> pt1</span><br><span class="line"><span class="keyword">del</span> pt2</span><br><span class="line"><span class="keyword">del</span> pt3</span><br></pre></td></tr></table></figure>结果如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3083401324</span> <span class="number">3083401324</span> <span class="number">3083401324</span></span><br><span class="line">Point 销毁</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3>面向对象的编程带来的主要好处之一是代码的<strong>重用</strong>，实现这种重用的方法之一是通过==继承机制==。<br>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>，被继承的类称为<strong>基类、父类</strong>或<strong>超类</strong>。<br><strong>语法</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">派生类名</span>(<span class="title class_ inherited__">基类名</span>)</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>如果在继承元组中列了一个以上的类，那么它就被称为==多重继承==。<br><strong>语法：</strong><br>派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubClassName</span>(ParentClass1[,ParentClass2, ...])</span><br></pre></td></tr></table></figure><strong>实例</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   parentAttr = <span class="number">100</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;调用父类构造函数&quot;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">parentMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用父类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">setAttr</span>(<span class="params">self, attr</span>):</span><br><span class="line">      Parent.parentAttr = attr</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">getAttr</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;父类属性 :&quot;</span>, Parent.parentAttr</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;调用子类构造方法&quot;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">childMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用子类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 实例化子类</span></span><br><span class="line">c.childMethod()      <span class="comment"># 调用子类的方法</span></span><br><span class="line">c.parentMethod()     <span class="comment"># 调用父类方法</span></span><br><span class="line">c.setAttr(<span class="number">200</span>)       <span class="comment"># 再次调用父类的方法 - 设置属性值</span></span><br><span class="line">c.getAttr()          <span class="comment"># 再次调用父类的方法 - 获取属性值</span></span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">调用子类构造方法</span><br><span class="line">调用子类方法</span><br><span class="line">调用父类方法</span><br><span class="line">父类属性 : <span class="number">200</span></span><br></pre></td></tr></table></figure><strong>多类继承</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:        <span class="comment"># 定义类 A</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:         <span class="comment"># 定义类 B</span></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>(A, B):   <span class="comment"># 继承类 A 和 B</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3>==当父类方法的功能不能满足需求，可以在子类中重写父类==<br><strong>实例</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用父类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用子类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure>结果如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">调用子类方法</span><br></pre></td></tr></table></figure><h2 id="基础重载方法"><a href="#基础重载方法" class="headerlink" title="基础重载方法"></a>基础重载方法</h2><a href="https://www.runoob.com/python/python-object.html">菜鸟教程</a><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><strong>实例</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,other</span>):</span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> v1 + v2</span><br></pre></td></tr></table></figure>结果如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector(<span class="number">7</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><strong>__private_attrs</strong>:两个下划线开头，声明该属性为私有。类外部不能使用或直接访问。类内部的方法中使用<strong>self.__private_attrs</strong>。<h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3>在类的内部，使用==def==关键字可以定义一个方法，与一般函数不同的是类方法必须包含参数self，且为第一个参数。<h2 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h2><strong>__private_method</strong>:定义该方法为类的私有方法，不能在类的外部调用。在类的内部调用使用<strong>self.__private_methods</strong><br>实例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JustCounter</span>:</span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>    <span class="comment"># 公开变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> self.__secretCount</span><br><span class="line"> </span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()</span><br><span class="line">counter.count()</span><br><span class="line"><span class="built_in">print</span> counter.publicCount</span><br><span class="line"><span class="built_in">print</span> counter.__secretCount  <span class="comment"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>可以使用==object._className__attrName==访问属性，实例如下<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Runoob</span>:</span><br><span class="line">    __site = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line"></span><br><span class="line">runoob = Runoob()</span><br><span class="line"><span class="built_in">print</span> runoob._Runoob__site</span><br></pre></td></tr></table></figure>执行结果如下：<blockquote><p>www.runoob.com</p></blockquote></li></ul><h2 id="单下划线、双下划线、头尾双下划线说明"><a href="#单下划线、双下划线、头尾双下划线说明" class="headerlink" title="==单下划线、双下划线、头尾双下划线说明=="></a>==单下划线、双下划线、头尾双下划线说明==</h2><ul><li><strong>__foo__</strong>:定义特殊方法，一般是系统定义名字，类似 <strong>__init__()</strong></li><li>_foo:以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 ==from module import *==</li><li>__foo:双下划线表示私有类型变量，只能允许这个类本身进行访问。</li></ul><hr><h2 id="面向对象进阶"><a href="#面向对象进阶" class="headerlink" title="面向对象进阶"></a>面向对象进阶</h2><h3 id="property装饰器"><a href="#property装饰器" class="headerlink" title="property装饰器"></a>property装饰器</h3><p>在python中==不建议将属性设置为私有==，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。可以通过属性的getter(访问器)和setter(修改器)方法进行对应的操作。<strong>可以考虑使用@property包装器来包装getter和setter方法</strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = &#x27;白元芳&#x27;  # AttributeError: can&#x27;t set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h3 id="slotd魔法"><a href="#slotd魔法" class="headerlink" title="slotd魔法"></a><strong>slotd</strong>魔法</h3><p>python是一门==动态语言==。动态语言允许我们在<strong>程序运行</strong>时==给对象绑定行的属性和方法==，同时也可以==对已绑定的属性和方法进行解绑==。当我们需要限定自定义类型的对象只能绑定某些属性，则需要使用<strong><strong>slots</strong></strong>,==对子类并不起任何左右。==<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">&#x27;_name&#x27;</span>, <span class="string">&#x27;_age&#x27;</span>, <span class="string">&#x27;_gender&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩飞行棋.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在玩斗地主.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    person = Person(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">22</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person._gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    <span class="comment"># AttributeError: &#x27;Person&#x27; object has no attribute &#x27;_is_gay&#x27;</span></span><br><span class="line">    <span class="comment"># person._is_gay = True</span></span><br></pre></td></tr></table></figure></p><h3 id="静态方法和类方法"><a href="#静态方法和类方法" class="headerlink" title="静态方法和类方法"></a>静态方法和类方法</h3><p>实际中，==类中的方法并不需要都是对象的方法==<br><em>例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的</em>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        self._a = a</span><br><span class="line">        self._b = b</span><br><span class="line">        self._c = c</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">a, b, c</span>):</span><br><span class="line">        <span class="keyword">return</span> a + b &gt; c <span class="keyword">and</span> b + c &gt; a <span class="keyword">and</span> a + c &gt; b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perimeter</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._a + self._b + self._c</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">area</span>(<span class="params">self</span>):</span><br><span class="line">        half = self.perimeter() / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> sqrt(half * (half - self._a) *</span><br><span class="line">                    (half - self._b) * (half - self._c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    a, b, c = <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">    <span class="comment"># 静态方法和类方法都是通过给类发消息来调用的</span></span><br><span class="line">    <span class="keyword">if</span> Triangle.is_valid(a, b, c):</span><br><span class="line">        t = Triangle(a, b, c)</span><br><span class="line">        <span class="built_in">print</span>(t.perimeter())</span><br><span class="line">        <span class="comment"># 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数</span></span><br><span class="line">        <span class="comment"># print(Triangle.perimeter(t))</span></span><br><span class="line">        <span class="built_in">print</span>(t.area())</span><br><span class="line">        <span class="comment"># print(Triangle.area(t))</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;无法构成三角形.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><br>和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为==cls==，<strong>它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象）</strong>，通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, localtime, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;数字时钟&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span></span>):</span><br><span class="line">        self._hour = hour</span><br><span class="line">        self._minute = minute</span><br><span class="line">        self._second = second</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">now</span>(<span class="params">cls</span>):</span><br><span class="line">        ctime = localtime(time())</span><br><span class="line">        <span class="keyword">return</span> cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;走字&quot;&quot;&quot;</span></span><br><span class="line">        self._second += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self._second == <span class="number">60</span>:</span><br><span class="line">            self._second = <span class="number">0</span></span><br><span class="line">            self._minute += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self._minute == <span class="number">60</span>:</span><br><span class="line">                self._minute = <span class="number">0</span></span><br><span class="line">                self._hour += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> self._hour == <span class="number">24</span>:</span><br><span class="line">                    self._hour = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;显示时间&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%02d:%02d:%02d&#x27;</span> % \</span><br><span class="line">               (self._hour, self._minute, self._second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 通过类方法创建对象并获取系统时间</span></span><br><span class="line">    clock = Clock.now()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(clock.show())</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        clock.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><h3 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h3><ul><li>is-a关系也叫继承或者泛化，<em>比如学生和人的关系、手机和电子产品的关系都属于继承关系。</em></li><li>has-a关系称之为关联，<em>比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是==整体和部分的关联==，那么我们称之为==聚合关系==；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。</em></li><li>use-a关系称为依赖关系，<em>比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。</em><br><img src="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/res/uml-example.png" alt="类之间关系"><h3 id="继承与多态"><a href="#继承与多态" class="headerlink" title="继承与多态"></a>继承与多态</h3>让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。==子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力==。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;人&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">play</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s正在愉快的玩耍.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">watch_av</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s正在观看爱情动作片.&#x27;</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s只能观看《熊出没》.&#x27;</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;学生&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, grade</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grade</span>(<span class="params">self, grade</span>):</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">study</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s的%s正在学习%s.&#x27;</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;老师&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, title</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">title</span>(<span class="params">self, title</span>):</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">teach</span>(<span class="params">self, course</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s%s正在讲%s.&#x27;</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    stu = Student(<span class="string">&#x27;王大锤&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;初三&#x27;</span>)</span><br><span class="line">    stu.study(<span class="string">&#x27;数学&#x27;</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">&#x27;骆昊&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;砖家&#x27;</span>)</span><br><span class="line">    t.teach(<span class="string">&#x27;Python程序设计&#x27;</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>子类继承父类方法之后，<strong>对父类已有的方法给出新的实现版本</strong>，称为==重写==。同时，<strong>让父类的同一行为在子类中拥有不同的实现版本，不同子类对象会表现出不同的行为</strong>，这就是==多态==<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pet</span>(<span class="built_in">object</span>, metaclass=ABCMeta):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;宠物&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nickname</span>):</span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;发出声音&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;狗&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 汪汪汪...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Pet</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;猫&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_voice</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s: 喵...喵...&#x27;</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    pets = [Dog(<span class="string">&#x27;旺财&#x27;</span>), Cat(<span class="string">&#x27;凯蒂&#x27;</span>), Dog(<span class="string">&#x27;大黄&#x27;</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>在上面的代码中，我们将==Pet类处理成了一个抽象类==，所谓<strong>抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它</strong>。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以<strong>通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果</strong>，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）<br><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/09.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.md">reference</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql进阶</title>
      <link href="/2022/04/29/sql%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/04/29/sql%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h1><h2 id="MySQL事务简介"><a href="#MySQL事务简介" class="headerlink" title="MySQL事务简介"></a>MySQL事务简介</h2><p>👇举个例子。添加一个销售订单的步骤如下所示：</p><ul><li>首先，从 <code>orders</code> 表中查询最新的销售订单号，并使用下一个销售订单号作为新的销售订单号。</li><li>接下来，在 <code>orders</code> 表中插入一个新的销售订单。</li><li>然后，获得新插入的销售订单号</li><li>之后，将新的销售订单项目与销售订单号一起插入到 <code>orderdetails</code> 表中</li><li>最后，从 <code>orders</code> 和 <code>orderdetails</code> 表中选择数据，以确认这些变化。</li></ul><blockquote><p>MySQL 事务允许你执行一组 MySQL 操作，以确保数据库从不包含部分操作的结果。在一组操作中，如果其中一个操作失败，就会发生回滚，将数据库恢复到其原始状态。如果没有发生错误，整个语句集就会提交到数据库中。</p></blockquote><h2 id="MySQL事务语句"><a href="#MySQL事务语句" class="headerlink" title="MySQL事务语句"></a>MySQL事务语句</h2><p>MySQL提供了以下重要语句来控制事务：</p><ul><li>为了启动一个事务，你使用 <code>START TRANSACTION</code> 语句。<code>BEGIN</code> 或 <code>BEGIN WORK</code> 是 <code>START TRANSACTION</code> 的别名。</li><li>要提交当前事务并使其变化永久化，你要使用 <code>COMMIT</code> 语句。</li><li>要回滚当前事务并取消其变化，你可以使用 <code>ROLLBACK</code> 语句。</li><li>要禁用或启用当前事务的自动提交模式，你可以使用 <code>SET autocommit</code> 语句。</li></ul><blockquote><p>默认情况下，MySQL 自动将更改永久性地提交给数据库。要强迫 MySQL 不自动提交更改，你可以使用以下语句：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">-- OR --</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> OFF</span><br></pre></td></tr></table></figure><blockquote><p>你使用下面的语句来明确地启用自动提交模式：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- OR --</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><h2 id="MySQL事务实例"><a href="#MySQL事务实例" class="headerlink" title="MySQL事务实例"></a>MySQL事务实例</h2><p>使用样本数据库中的订单和 <code>orderDetails</code> 表进行演示。</p><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/29/1e62ed8a-f038-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="订单演示"></p><h3 id="COMMIT-实例"><a href="#COMMIT-实例" class="headerlink" title="COMMIT 实例"></a>COMMIT 实例</h3><p>首先要把 SQL 语句分成逻辑部分，并确定数据何时应提交或回滚。<br>下面说明了创建一个新的销售订单的步骤：</p><ul><li>首先，通过使用 <code>START TRANSACTION</code> 语句启动一个事务。</li><li>接下来，从 <code>orders</code> 表中选择最新的销售订单号，并使用下一个销售订单号作为新的销售订单号。</li><li>然后，在 <code>orders</code> 表中插入一个新的销售订单。</li><li>之后，在 <code>orderdetails</code> 表中插入销售订单项目。</li><li>最后，使用 <code>COMMIT</code> 语句提交该事务。<br>可以选择从 <code>orders</code> 和 <code>orderdetails</code> 表中选择数据来检查新的销售订单。<br>示例如下<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. start a new transaction</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. Get the latest order number</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="variable">@orderNumber</span>:<span class="operator">=</span><span class="built_in">MAX</span>(orderNUmber)<span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. insert a new order for customer 145</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders(orderNumber,</span><br><span class="line">                   orderDate,</span><br><span class="line">                   requiredDate,</span><br><span class="line">                   shippedDate,</span><br><span class="line">                   status,</span><br><span class="line">                   customerNumber)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="variable">@orderNumber</span>,</span><br><span class="line">       <span class="string">&#x27;2005-05-31&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;2005-06-10&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;2005-06-11&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;In Process&#x27;</span>,</span><br><span class="line">        <span class="number">145</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">-- 4. Insert order line items</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orderdetails(orderNumber,</span><br><span class="line">                         productCode,</span><br><span class="line">                         quantityOrdered,</span><br><span class="line">                         priceEach,</span><br><span class="line">                         orderLineNumber)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="variable">@orderNumber</span>,<span class="string">&#x27;S18_1749&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;136&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">      (<span class="variable">@orderNumber</span>,<span class="string">&#x27;S18_2248&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;55.09&#x27;</span>, <span class="number">2</span>); </span><br><span class="line">      </span><br><span class="line"><span class="comment">-- 5. commit changes    </span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></li></ul><p>为了获得新创建的销售订单，可以使用以下查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a.orderNumber,</span><br><span class="line">    orderDate,</span><br><span class="line">    requiredDate,</span><br><span class="line">    shippedDate,</span><br><span class="line">    status,</span><br><span class="line">    comments,</span><br><span class="line">    customerNumber,</span><br><span class="line">    orderLineNumber,</span><br><span class="line">    productCode,</span><br><span class="line">    quantityOrdered,</span><br><span class="line">    priceEach</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orders a</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    orderdetails b <span class="keyword">USING</span> (orderNumber)</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.ordernumber <span class="operator">=</span> <span class="number">10426</span>;</span><br></pre></td></tr></table></figure></p><h3 id="ROLLBACK-实例"><a href="#ROLLBACK-实例" class="headerlink" title="ROLLBACK 实例"></a>ROLLBACK 实例</h3><p>登录到 MySQL 数据库服务器，从 <code>orders</code> 表中删除数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">START</span> TRANSACTION;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">DELETE</span> <span class="keyword">FROM</span> orders;</span><br><span class="line">Query OK, <span class="number">327</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><br>MySQL 确认 <code>orders</code> 表中的所有行被删除了。</p><p>第二，在一个单独的会话中登录到 MySQL 数据库服务器，查询 <code>orders</code> 表中的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">327</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br>在这第二个会话中，仍然可以看到 <code>orders</code> 表中的数据。</p><p>我们已经在第一个会话中进行了修改。然而，这些变化并不是永久性的。在第一个会话中，我们可以提交或回滚这些变化。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ROLLBACK</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><br>验证 <code>orders</code> 表的内容：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">327</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br>从输出中可以清楚地看到，更改已回滚。</p><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 插入 Xie Xun 的信息 --</span></span><br><span class="line"><span class="comment">-- Write your SQL Query here --</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teachers (name,age,country)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;Xie Xun&#x27;</span>,<span class="number">49</span>,<span class="string">&#x27;CN&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></p><h1 id="锁的认识"><a href="#锁的认识" class="headerlink" title="锁的认识"></a>锁的认识</h1><p><strong>场景</strong><br>一个很久没有改动的访问量较低系统，由于访问增大忽然出现了一个问题，经过日志查看和代码排查发现原因如下</p><ul><li>表 A 主键：id，状态：status</li><li>表 B 主键：id，版本号：version ，累积总额：total<br>表A<br>|id|status|name|<br>|:—-:|:—-:|:—-:|<br>|1|1|小明|<br>|2|1|小红|<br>|3|1|张三|<br>表B<br>|id|version|total|project_name|<br>|:—-:|:—-:|:—-:|:—-:|<br>|1|1|1000|项目名称|</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 小明 --</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- …… --</span></span><br><span class="line"><span class="keyword">update</span> A <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> id<span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> status <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> B <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> XXX1 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小红 --</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- …… --</span></span><br><span class="line"><span class="keyword">update</span> A <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> id<span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> status <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> B <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> XXX2 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 张三 --</span></span><br><span class="line"><span class="keyword">start</span> transaction;</span><br><span class="line">……</span><br><span class="line"><span class="keyword">update</span> A <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> id<span class="operator">=</span> <span class="number">3</span> <span class="keyword">and</span> status <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">update</span> B <span class="keyword">set</span> total <span class="operator">=</span> total <span class="operator">+</span> XXX3 <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>表 A 的更新操作是用户订单状态完成的更新，表 B 的更新操作是业务上的统计。<br>很明显当并发产生时（多个事务去操作表 B 同一行数据）表 B 的更新会被[[#乐观锁]] version控制住然后代码里判定更新失败并且抛出异常导致用户表A的更新被回滚。<br><code>问题不在于用了乐观锁，而是在于不相干的两个业务放到了一个事务里</code>，统计和订单状态更新应该剥离开去做。<br>上面的问题导致了部分订单支付完成消息消费的延迟，重复很多次才被消费到，间隔时间较长，用户觉得已经扣款了订单为什么还没有成功。</p><p>Oracle 数据库的事务隔离级别基本都是<strong>读已提交（READ-COMMITTED</strong>），所有的锁也针对这个级别来总结</p><blockquote><p>MySQL 默认隔离级别是 <code>Repeatable read</code>（可重复读）</p></blockquote><p><code>查看事务隔离级别</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">like</span> <span class="string">&#x27;%isolation%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h2 id="锁的解释"><a href="#锁的解释" class="headerlink" title="锁的解释"></a>锁的解释</h2><p>锁：计算机协调多个进程或线程并发访问某一资源的机制。</p><h2 id="锁的重要性"><a href="#锁的重要性" class="headerlink" title="锁的重要性"></a>锁的重要性</h2><p>在数据库中，除了传统的计算资源（CPU、RAM、I\\O等）的争抢，数据也是一种供多用户共享的资源。<br>因此，如何<code>保证数据并发访问的一致性，有效性</code>，是所有数据库必须要解决的问题。锁冲突也是影响数据库并发访问性能的一个重要因素，因此锁对数据库尤其重要。</p><h2 id="锁的缺点"><a href="#锁的缺点" class="headerlink" title="锁的缺点"></a>锁的缺点</h2><p><code>加锁是消耗资源的</code>，锁的各种操作，包括：获得锁、检测锁是否已经解除、释放锁等，都会增加系统的开销。</p><h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><h3 id="自增锁"><a href="#自增锁" class="headerlink" title="自增锁"></a>自增锁</h3><p><strong>查询当前数据库的自增锁模式：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%innodb_autoinc_lock_mode%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><ul><li><strong>0</strong>：<code>traditonal</code> 每次 <code>insert</code> 语句执行都会产生表锁</li><li><strong>1</strong>：<code>consecutive simple insert</code> 会获得批量的锁，保证一批插入自增序列的连续性，插入之前提前释放锁，在这个模式下你会发现当你 <code>insert</code> 多条数据回滚的时候虽然 DB 没有插入数据，但是自增 ID 已经增长了，也是数据库默认的级别</li><li><strong>2</strong>：<code>interleaved</code> 不会锁表，实时插入，并发最高，但是基于主从的复制是不安全的，感兴趣可以去查询 RBR 和 SBR 的优缺点</li></ul><p>自增锁是一种特殊的表级别锁（table-level lock），专门针对事务插入 <code>AUTO_INCREMENT</code> 类型的列。最简单的情况，如果一个事务正在往表中插入记录，所有其他事务的插入必须等待，以便第一个事务插入的行，是连续的主键值。</p><p><strong>案例</strong><br>如果没有自增锁的情况下如下表，id 为自增 <code>AUTO_INCREMENT = 4</code><br>|id|name|<br>|:—-:|:—-:|<br>|1|张无忌|<br>|2|赵敏|<br>|3|周芷若|<br>这时开启一个事务 A：insert 一条记录张三丰，自增序列分配到的 id 为 4，事务不提交又开启一个事务 B：insert 一条记录张翠山，自增序列分配到的 id 为 5，事务不提交事务 A 又插入一条记录，insert 一条记录为殷梨亭，这个是后被分配到的 id 为 6。<br>由于在读提交事务隔离级别下不会查询到其他未提交的事务， 事务 A 此时查询 id&gt;3 的记录会返回 4：张三丰，6：殷梨亭。就会有一个事务里提交的数据自增 id 不是连续的问题产生<br>|id|name|<br>|:—-:|:—-:|<br>|1|张无忌|<br>|2|赵敏|<br>|3|周芷若|<br>|4|张三丰|<br>|5|张翠山|<br>|6|殷梨亭|</p><p>采用自增锁可以解决这个问题</p><ul><li><strong>innodb_autoinc_lock_mode = 0</strong><br>在这一模式下，所有的 insert 语句都要在语句开始的时候得到一个表级的 auto_inc 锁，在语句结束的时候才释放<br>这种模式下 <code>auto_inc</code> 锁一直要保持到语句的结束，所以这个就影响到了并发的插入，但是主从同步时候是安全的</li><li><strong>innodb_autoinc_lock_mode = 1</strong><br>这一模式下去 <code>simple insert</code> 做了优化，由于 <code>simple insert</code> 一次性插入值的个数可以立马得到确定，所以 <code>MySQL</code> 可以一次生成几个连续的值，用于这个 <code>insert</code> 语句，也保证主从同步基于语句的复制安全<br>这一模式也是 <code>MySQL</code> 的默认模式，这个模式的好处是 <code>auto_inc</code> 锁不要一直保持到语句的结束，只要语句得到了相应的值后就可以提前释放锁</li><li><strong>innodb_autoinc_lock_mode = 2</strong><br>无自增锁，会导致上面案例的问题，同一批 <code>insert</code> 提交自增不连续</li></ul><h3 id="共享锁和排它锁（Shared-and-Exclusive-Locks）"><a href="#共享锁和排它锁（Shared-and-Exclusive-Locks）" class="headerlink" title="共享锁和排它锁（Shared and Exclusive Locks）"></a>共享锁和排它锁（Shared and Exclusive Locks）</h3><h4 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h4><p>提到共享锁和排它锁就不得不提<code>并发控制</code>（Concurrency Control），<code>并发控制可以解决临界资源操作时不一致的情况产生，保证数据一致性常见的手段就是锁和数据多版本</code>（Multi Version）</p><h4 id="直接加锁"><a href="#直接加锁" class="headerlink" title="直接加锁"></a>直接加锁</h4><p>这种方式会导致被加锁的资源都被锁住，读取任务也无法执行直到锁释放，所有执行的任务相当于串行化方式，简单粗暴，不能并发</p><h4 id="共享锁（Shared-Locks）简称为-S-锁"><a href="#共享锁（Shared-Locks）简称为-S-锁" class="headerlink" title="共享锁（Shared Locks）简称为 S 锁"></a>共享锁（Shared Locks）简称为 S 锁</h4><p>读取数据时候可以加 S 锁。<br>共享 (S) 锁允许并发事务读取 (SELECT) 一个资源。资源上存在共享 (S) 锁时，任何其它事务都不能修改数据。一旦已经读取数据，便立即释放资源上的共享 (S) 锁，除非将事务隔离级别设置为可重复读或更高级别，或者在事务生存周期内用锁定提示保留共享 (S) 锁。</p><h4 id="排它锁-（Exclusive-Locks）简称为-X-锁"><a href="#排它锁-（Exclusive-Locks）简称为-X-锁" class="headerlink" title="排它锁 （Exclusive Locks）简称为 X 锁"></a>排它锁 （Exclusive Locks）简称为 X 锁</h4><p>修改数据时候加 X 锁。<br>排它 (X) 锁可以防止并发事务对资源进行访问。其它事务不能读取或修改排它 (X) 锁锁定的数据。<br><strong>共享锁之间可以并行，排它锁和共享锁之间互斥</strong>，也就是说只要共享锁开启没有释放掉的时候，更新锁是不能抢占的，此时其他读取同资源的操作可以进行读取不受限制；同理<strong>排它锁开启时候只要没有释放其他不管是排它锁还是共享锁都不可以抢占资源直到锁释放</strong>。</p><p>举例表A<br>|id|name|<br>|:—-:|:—-:|<br>|1|张无忌|<br>|2|张三丰|</p><ul><li><strong>以下例子中的 <code>start transaction1;</code> 只用于区别事务，在实际使用中的语句应当为 <code>start transaction;</code> 或 <code>begin;</code></strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction1;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="comment">-- …… -- </span></span><br><span class="line"><span class="keyword">start</span> transaction2;</span><br><span class="line"><span class="keyword">update</span> A <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;赵敏&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- …… --</span></span><br></pre></td></tr></table></figure><p>如果事务 transaction1 不进行提交 S 锁不被释放，那么 transaction2 就拿着 X 锁一直等待 S 锁释放</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction3;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br></pre></td></tr></table></figure><p>如果事务 transaction3 做同样查询可以直接获取 S 锁进行查询  </p><p>这个时候如果事务 transaction1 要进行 delete 操作<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction1;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="comment">-- …… --</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- …… --</span></span><br></pre></td></tr></table></figure><br>此时 transaction1 发现 X 锁被 transaction2 占据了拿不到 X 锁一直在等待，transaction2 拿着 X 锁等着 transaction1 的 S 锁释放也在等待，这样互相等待就产生了死锁 deadLock，发生死锁后，InnoDB 会为第一个客户产生错误信息并释放锁</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h4><ol><li>如上所述并发修改同一记录</li><li>事务之间对资源访问（表）顺序的交替进行，与第一条大同小异，上升到锁表的级别</li><li>数据量庞大时候索引建立机制不行，经常扫全表操作，也会造成资源阻塞死锁</li><li>愿意在代码里开大事务然后对数据库一顿操作互相等待，容易引发死锁，所以代码里要节俭对事务的开销，以及事务开销时候尽可能有效合理利用资源</li></ol><h4 id="数据多版本"><a href="#数据多版本" class="headerlink" title="数据多版本"></a>数据多版本</h4><p>X 锁占领后其他 S 锁没法占用导致只要写没完成读就不能进行并发查询，InnoDB 引入了数据多版本概念去解决这一问题<br>核心原理简单讲就是<code>clone 了一个版本数据进行修改，比如原有的数据版本号是 Version0，这个时候进行写操作 clone 了一份版本号 V1，这个时候对 V1 版本数据进行修改写入操作</code>；与此同时其他查询读任务并发进来一样可以读取 V0 版本数据不受任何影响，这样就解决了在数据更新回写之前不能读取的问题，进一步提高了数据库引擎处理并发的能力</p><h5 id="InnoDB-如何操作多版本控制？"><a href="#InnoDB-如何操作多版本控制？" class="headerlink" title="InnoDB 如何操作多版本控制？"></a>InnoDB 如何操作多版本控制？</h5><ol><li>redo：事务提交后需要把数据刷盘，原有的机械磁盘情况下效率很低（固盘另说），随机写性能低，这样就先放到 redo 日志中，定期把一批数据刷盘，巧妙的利用 redo 日志把随机写变成了顺序写</li><li>undo：事务没有提交之前可能会 rollback，undo 就是把旧的数据镜像放到 undo 日志里，回滚时恢复数据</li><li>存储 undo 日志地方是回滚段，事务提交回滚段日志可以删除，回滚时查找回滚段记录复原，也可以理解为旧的数据存储在回滚段中</li></ol><p>InnoDB 本身就是 MVCC 多版本并发控制引擎，通过读取旧版本数据来降低并发事务的锁冲突，提高任务的并发度，与 MyISam 比不单单只是支持事务那么简单</p><h4 id="快照读（snapshot-read）"><a href="#快照读（snapshot-read）" class="headerlink" title="快照读（snapshot read）"></a>快照读（snapshot read）</h4><p>回滚段的数据可以理解为旧数据历史的快照，这种不加锁的一致性的读取就是快照读，所以会支撑高并发</p><h3 id="InnoDB-锁的种类之意向锁、记录锁和间隙锁"><a href="#InnoDB-锁的种类之意向锁、记录锁和间隙锁" class="headerlink" title="InnoDB 锁的种类之意向锁、记录锁和间隙锁"></a>InnoDB 锁的种类之意向锁、记录锁和间隙锁</h3><h4 id="意向锁（Intention-Locks-table-level-lock）"><a href="#意向锁（Intention-Locks-table-level-lock）" class="headerlink" title="意向锁（Intention Locks; table-level lock）"></a>意向锁（Intention Locks; table-level lock）</h4><p>意向锁是一种特殊的表级锁，意向锁是为了让 InnoDB 多粒度的锁能共存而设计的。取得行的共享锁和排他锁之前需要先取得表的意向共享锁（IS）和意向排他锁（IX），<code>意向共享锁和意向排他锁都是系统自动添加和自动释放的</code>，整个过程无需人工干预。<br>意向锁就是指<code>未来的某一个时刻事务可能要加共享锁或者排它锁</code>，提前声明一个意向，分为两种：</p><h5 id="意向共享锁（Intention-Shared-Lock）-IS"><a href="#意向共享锁（Intention-Shared-Lock）-IS" class="headerlink" title="意向共享锁（Intention Shared Lock） IS"></a>意向共享锁（Intention Shared Lock） IS</h5><p>事务有意向对表中的某些行加共享锁（S锁）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 S 锁，必须先获得表的 IS 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... LOCK <span class="keyword">IN</span> SHARE MODE;</span><br></pre></td></tr></table></figure></p><h5 id="意向排它锁（Intention-Exclusive-Lock）IX"><a href="#意向排它锁（Intention-Exclusive-Lock）IX" class="headerlink" title="意向排它锁（Intention Exclusive Lock）IX"></a>意向排它锁（Intention Exclusive Lock）IX</h5><p>事务有意向对表中的某些行加排他锁（X锁）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务要获取某些行的 X 锁，必须先获得表的 IX 锁。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">column</span> <span class="keyword">FROM</span> <span class="keyword">table</span> ... <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 要设置 IS 锁 --</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="comment">-- 要设置 IX 锁 --</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p>看上面那个例子，如果示例 1 和 2 都开启了事务，事务 1 锁住了表 A 的其中 id=1 的一行，事务 2 要获取整个表的更新锁需要进行判断<br>step1：判断表 A 是否有表级锁<br>step2：判断表 A 每一行是否有行级锁<br>当数据量庞大的时候 step2 这种判断十分低效，于是就有意向锁协议</p><p><strong>意向锁协议：</strong><br>事务要获取表 A 某些行的 S 锁必须要获取表 A 的 IS 锁<br>事务要获取表 A 某些行的 X 锁必须要获取表 A 的 IX 锁<br>这时候 step2 就改变成了对意向锁的判断<br>step2：发现表 A 有 IS 锁，说明表 A 肯定有行级的 S 锁，因此，事务 B 申请写锁阻塞等待，判断效率极大提高</p><h4 id="记录锁（Record-Locks）"><a href="#记录锁（Record-Locks）" class="headerlink" title="记录锁（Record Locks）"></a>记录锁（Record Locks）</h4><p><code>SELECT c1 FROM t WHERE c1 = 10 FOR UPDATE;</code> 这一行则是使用了记录锁，不允许其他事务进行增，删，改<br>但是 <code>SELECT c1 FROM t WHERE c1 = 10;</code> 是没有锁的，走的是快照读，上文已经阐明过了<br>记录锁本身不是锁定记录数据本身而是锁定索引记录，如果要锁的列没有索引，则会进行全表记录加锁</p><h4 id="间隙锁（Gap-Locks）"><a href="#间隙锁（Gap-Locks）" class="headerlink" title="间隙锁（Gap Locks）"></a>间隙锁（Gap Locks）</h4><p>比如 <code>SELECT c1 FROM t WHERE c1 BETWEEN 10 and 20 FOR UPDATE;</code><br>插入 c1 为 15 的记录会被锁定不可执行<br>这种默认存在于可重复读的事务隔离级别中的锁，锁定被圈定的范围不允许 insert，防止不可重复读，事务隔离级别都是读已提交，默认会产生不可重复读的问题<br><a href="https://www.lintcode.com/learn/84/293">reference_意向锁、记录锁和间隙锁</a></p><h3 id="InnoDB-锁的种类之临键锁和插入意向锁"><a href="#InnoDB-锁的种类之临键锁和插入意向锁" class="headerlink" title="InnoDB 锁的种类之临键锁和插入意向锁"></a>InnoDB 锁的种类之临键锁和插入意向锁</h3><h4 id="临键锁（Next-Key-Locks）"><a href="#临键锁（Next-Key-Locks）" class="headerlink" title="临键锁（Next-Key Locks）"></a>临键锁（Next-Key Locks）</h4><p>这个锁本质是记录锁加上 gap 锁，数据库可重复读事务隔离级别默认存在</p><h4 id="插入意向锁（Insert-Intention-Locks）"><a href="#插入意向锁（Insert-Intention-Locks）" class="headerlink" title="插入意向锁（Insert Intention Locks）"></a>插入意向锁（Insert Intention Locks）</h4><p>插入意向锁是间隙锁的一种，专门针对 insert 操作，官方意思是说多个事务在同一个索引同一个范围区间插入记录时候，如果插入位置不冲突，不会彼此阻塞 <code>隔离级别还是 RR</code><br><a href="https://www.lintcode.com/learn/84/294">reference_临键锁和插入意向锁</a></p><h3 id="如何加表锁"><a href="#如何加表锁" class="headerlink" title="如何加表锁"></a>如何加表锁</h3><blockquote><p>MySQL常用引擎有 MyISAM 和 InnoDB，而 InnoDB 是 MySQL 默认的引擎。MyISAM 不支持行锁，而 InnoDB 支持行锁和表锁。</p></blockquote><h4 id="隐式上锁（默认，自动加锁、自动释放）"><a href="#隐式上锁（默认，自动加锁、自动释放）" class="headerlink" title="隐式上锁（默认，自动加锁、自动释放）"></a>隐式上锁（默认，自动加锁、自动释放）</h4><blockquote><p>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用 <code>LOCK TABLE;</code> 命令给 MyISAM 表显式加锁。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上读锁 --</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="comment">-- 上写锁 --</span></span><br><span class="line"><span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><h4 id="显式上锁（手动）"><a href="#显式上锁（手动）" class="headerlink" title="显式上锁（手动）"></a>显式上锁（手动）</h4><p>上共享锁（读锁）的写法：<code>lock in share mode</code>，例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  column_name <span class="keyword">from</span> table_name <span class="keyword">where</span> lock <span class="keyword">in</span> share mode；</span><br></pre></td></tr></table></figure></p><p>上排它锁（写锁）的写法：<code>for update</code>，例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> table_name <span class="keyword">where</span> conditions <span class="keyword">for</span> <span class="keyword">update</span>；</span><br></pre></td></tr></table></figure></p><h4 id="解锁（手动）"><a href="#解锁（手动）" class="headerlink" title="解锁（手动）"></a>解锁（手动）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 解锁所有锁表 --</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p><strong>Example</strong><br>👇我们可以通过下面的实例来感受一下 MySQL 中表锁之读锁的用法。</p><p>假设我们要更新 teachers 表中，Linghu Chong 的邮箱为 <code>linghu.chong@ninechapter.com</code>，但是 <code>teachers</code> 表被上了读锁，请编写 SQL 语句，来实现更新 Linghu Chong 的邮箱。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对 teachers 表上读锁 --</span></span><br><span class="line">LOCK TABLES teachers READ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁 --</span></span><br><span class="line">UNLOCK TABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新邮箱 --</span></span><br><span class="line"><span class="keyword">UPDATE</span> teachers </span><br><span class="line"><span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;linghu.chong@ninechapter.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Linghu Chong&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> LOCK TABLES teachers READ;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> teachers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;linghu.chong@ninechapter.com&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Linghu Chong&#x27;</span>;</span><br><span class="line">ERROR <span class="number">1099</span> (HY000): <span class="keyword">Table</span> <span class="string">&#x27;teachers&#x27;</span> was locked <span class="keyword">with</span> a READ lock <span class="keyword">and</span> can<span class="string">&#x27;t be updated</span></span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> UNLOCK TABLES;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">UPDATE</span> teachers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SET</span> email <span class="operator">=</span> <span class="string">&#x27;linghu.chong@ninechapter.com&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Linghu Chong&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><br>说明：<br>在上面的 SQL 语句中，由于对 <code>teachers</code> 表加了读锁，所以直接使用 <code>UPDATE</code> 语句更新会报错，因为读锁上不能进行写操作，需要先解锁，再进行 <code>UPDATE</code> 操作。</p><p><strong>Example</strong><br>👇我们可以通过下面的实例来感受一下 MySQL 中表锁之写锁的用法。<br>假设我们要查询 <code>teachers</code> 表中所有的信息，但是，<code>courses</code> 表被加了写锁，请编写 SQL 语句，来实现查询 <code>teachers</code> 表中所有的信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对 courses 表上写锁 --</span></span><br><span class="line">LOCK TABLES courses WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解锁 --</span></span><br><span class="line">UNLOCK TABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 teachers 表中所有信息 --</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> teachers;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> LOCK TABLES courses WRITE;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teachers;</span><br><span class="line"><span class="comment">-- ERROR 1100 (HY000): Table &#x27;teachers&#x27; was not locked with LOCK TABLES --</span></span><br><span class="line">mysql<span class="operator">&gt;</span> UNLOCK TABLES;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> teachers;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name             <span class="operator">|</span> email                     <span class="operator">|</span> age <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span> UK      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Northern Beggar  <span class="operator">|</span> northern.beggar<span class="variable">@qq</span>.com    <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> JP      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Linghu Chong     <span class="operator">|</span> <span class="keyword">NULL</span>                      <span class="operator">|</span>  <span class="number">18</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br>说明：<br>在上面的 SQL 语句中，由于对 <code>courses</code> 表加了写锁，所以只能对持有写锁的表进行<code>读或写操作</code>，如果想对<code>其他的表进行操作，需要先解锁</code>(包括select)。</p><h3 id="如何加行锁"><a href="#如何加行锁" class="headerlink" title="如何加行锁"></a>如何加行锁</h3><blockquote><p>表锁虽然开销小，加锁快，但高并发下性能低。行锁偏向于 InnoDB 存储引擎，虽然开销大，加锁慢，锁定粒度小，会出现死锁，但高并发下性能更高。</p></blockquote><p>事务和行锁都是在<code>确保数据准确的基础上提升并发的处理能力。</code>因此，InnoDB 存储引擎相比 MyISAM 而言，<code>更适合高并发场景，同时支持事务处理</code>。InnoDB 与 MyISAM 相比<code>最大不同之处也在于这两点：支持事务、采用行级锁</code>。</p><div class="table-container"><table><thead><tr><th style="text-align:center">行锁优缺</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">劣势</td><td style="text-align:center">开销大、加锁慢、会出现死锁</td></tr><tr><td style="text-align:center">优势</td><td style="text-align:center">粒度小、发生锁冲突几率小、处理并发能力强</td></tr></tbody></table></div><p>行锁是 MySQL 中粒度最细的一种锁机制，只对当前所操作的行进行加锁，行锁发生冲突的概率很低，其粒度最小，但加锁的代价最大。行锁有分为共享锁（S 锁）和排他锁（X 锁）。<br>|行锁|描述|<br>|:—-:|:—-:|<br>|S锁|读锁，共享锁|<br>|X锁|写锁，排它锁|<br><code>InnoDB 的行锁是通过给索引项添加锁来实现的</code>，这一点 MySQL 与 Oracle 不同，<code>Oracle 是通过在数据库中对相应的数据行加锁来实现</code>。InnoDB 行锁只有在通过<code>索引条件检索数据</code>时才能使用，否则会直接使用表级锁。需要注意的是行级锁一定要使用索引。</p><h4 id="隐式上锁（默认，自动加锁、自动释放）-1"><a href="#隐式上锁（默认，自动加锁、自动释放）-1" class="headerlink" title="隐式上锁（默认，自动加锁、自动释放）"></a>隐式上锁（默认，自动加锁、自动释放）</h4><p>InnoDB 行锁的加锁的方式是自动加锁</p><ul><li>对于 UPDATE、DELETE、INSERT 操作，InnoDB 会自动给涉及数据集添加排他锁</li><li>对于 SELECT 操作，InnoDB 不会添加任何锁<br>|操作|语句|自动加锁|<br>|:—-:|:—-:|:—-:|<br>|DQL|SELECT|无|<br>|DML|INSERT/DELETE/UPDATE|X锁|<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不会上锁 --</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上写锁 --</span></span><br><span class="line"><span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><h4 id="显示上锁（手动）"><a href="#显示上锁（手动）" class="headerlink" title="显示上锁（手动）"></a>显示上锁（手动）</h4>InnoDB 手工加锁方式<br><code>LOCK IN SHARE MODE</code> 与 <code>FOR UPDATE</code> 只能在事务内起作用，以保证当前会话事务锁定的行不会被其他会话修改。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 读锁 --</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LOCK <span class="keyword">IN</span> SHARE MODE;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 写锁 --</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="解锁（手动）-1"><a href="#解锁（手动）-1" class="headerlink" title="解锁（手动）"></a>解锁（手动）</h4><ol><li>提交事务（commit）</li><li>回滚事务（rollback）</li><li>阻塞进程（kill）</li></ol><h2 id="如何排查锁"><a href="#如何排查锁" class="headerlink" title="如何排查锁"></a>如何排查锁</h2><h3 id="如何排查表锁"><a href="#如何排查表锁" class="headerlink" title="如何排查表锁"></a>如何排查表锁</h3><p><strong>Gammar</strong><br><strong>查看表锁情况</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> TABLES;</span><br></pre></td></tr></table></figure><br><strong>表锁分析</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;table%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;table%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name              <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Table_locks_immediate      <span class="operator">|</span> <span class="number">59</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Table_locks_waited         <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Table_open_cache_hits      <span class="operator">|</span> <span class="number">75</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Table_open_cache_misses    <span class="operator">|</span> <span class="number">26</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Table_open_cache_overflows <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br><code>Table_locks_waited</code>：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次值加 1），此值高说明存在着较严重的表级锁争用情况<br><code>Table_locks_immediate</code>：产生表级锁定次数，不是可以立即获取锁的查询次数，每立即获取锁加 1</p><h3 id="如何排查行锁"><a href="#如何排查行锁" class="headerlink" title="如何排查行锁"></a>如何排查行锁</h3><p><strong>Gammar</strong><br><strong>行锁分析</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;innodb_row_lock%&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Variable_name                 <span class="operator">|</span> <span class="keyword">Value</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_current_waits <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time          <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_avg      <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_time_max      <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Innodb_row_lock_waits         <span class="operator">|</span> <span class="number">0</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><ul><li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量</li><li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度</li><li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间</li><li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花时间</li><li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数</li></ul><h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><ol><li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li><li>合理设计索引，尽量缩小锁的范围</li><li>尽可能较少检索条件，避免[[#间隙锁（Gap Locks）]]</li><li>尽量控制事务大小，减少锁定资源量和时间长度</li><li>尽可能低级别事务隔离</li></ol><h2 id="MySQL乐观锁与悲观锁"><a href="#MySQL乐观锁与悲观锁" class="headerlink" title="MySQL乐观锁与悲观锁"></a>MySQL乐观锁与悲观锁</h2><p>当很多人（一两个人估计不行）同时对同一条数据做修改的时候，那么数据的最终结果是怎样的呢？<br>这也就是我们说的并发情况，这样会导致以下两种结果：</p><ul><li>更新错误，你修改之后的数据可能被别人覆盖了，导致你很懵逼，甚至怀疑自己开发的功能是否有问题；</li><li>脏读，数据更新错误，导致读数据也是错的，查询出一些默认奇妙的数据，看到的不是你自己修改的结果。<br>锁分为<code>乐观锁和悲观锁</code>，它的目的是用来<code>解决并发控制的问题</code>。<br>MyISAM 引擎不支持事务，所以不考虑它有乐观锁和悲观锁概念。MyISAM 只有表锁，锁又分为读锁和写锁。在这里我们只讨论InnoDB 引擎。乐观锁和悲观锁<code>并不是解决并发控制的唯一手段</code>（也可以使用消息中间件 kafka，MQ 之类的作为缓冲等等），而且乐观锁和悲观锁并<code>不仅限制在 MySQL 中使用</code>，它是一种概念，很多其他的应用，如 redis，memcached 等，只要存在并发情况的，都可以应用这种概念，只是方式上有些差别而已。</li></ul><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>乐观锁，简单地说，就是从应用系统层面上做并发控制，去加锁。<br>实现乐观锁常见的方式：版本号 version。实现方式，在数据表中增加版本号字段，每次对一条数据做更新之前，先查出该条数据的版本号，每次更新数据都会对版本号进行更新，在更新时，把之前查出的版本号跟库中数据的版本号进行比对，如果相同，则说明该条数据没有被修改过，执行更新。如果比对的结果是不一致的，则说明该条数据已经被其他人修改过了，则不更新，客户端进行相应的操作提醒。</p><p><strong>Gammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询出商品信息 --</span></span><br><span class="line"><span class="keyword">select</span> status,version <span class="keyword">from</span> t_goods <span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125;;</span><br><span class="line"><span class="comment">-- 2.根据商品信息生成订单 --</span></span><br><span class="line"><span class="comment">-- 3.修改商品status为2 --</span></span><br><span class="line"><span class="keyword">update</span> t_goods</span><br><span class="line"><span class="keyword">set</span> status<span class="operator">=</span><span class="number">2</span>,version<span class="operator">=</span>version<span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id<span class="operator">=</span>#&#123;id&#125; <span class="keyword">and</span> version<span class="operator">=</span>#&#123;version&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/12/3cbac616-e2bb-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="不存在干扰"><br>注意第二个事务执行 update 时，第一个事务已经提交了，所以第二个事务能够读取到第一个事务修改的 version。<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/12/5ddea79a-e2bb-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="存在干扰"><br>InnoDB事务的隔离级别是 Repeatable Read，因此是不会出现脏读、不可重复读。<br>在这种极端情况下，第二个事务的 update 由于不能读取第一个事务未提交的数据（第一个事务已经对这一条数据加了排他锁，第二个事务需要等待获取锁），第二个事务获取了排他锁后，会发现 version 已经发生了改变从而提交失败。</p><h3 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h3><p>悲观锁，简单地说，就是从数据库层面上做并发控制，去加锁。<br>悲观锁的实现方式有两种：共享锁（读锁）和排它锁（写锁）<br><strong>共享锁（IS锁）</strong>，实现方式是在 SQL 语句后加 <code>LOCK IN SHARE MODE</code>，比如 <code>SELECT ... LOCK IN SHARE MODE</code>，即在符合条件的rows 上都加了共享锁，这样的话，其他 session 可以读取这些记录，也可以继续添加 IS 锁，但是无法修改这些记录直到你这个加锁的 session 执行完成（否则直接锁等待超时）。<br><strong>排它锁（IX锁）</strong>，实现方式是在 SQL 语句后加 <code>FOR UPDATE</code>，比如 <code>SELECT ... FOR UPDATE</code>，即在符合条件的 rows 上都加了排它锁，其他 session 也就无法在这些记录上添加任何的 S 锁或 X 锁。如果不存在一致性非锁定读的话，那么其他 session 是无法读取和修改这些记录的，但是 InnoDB 有非锁定读（快照读并不需要加锁），for update 之后并不会阻塞其他 session 的快照读取操作，除了 <code>select ...lock in share mode</code> 和 <code>select ... for update</code> 这种显示加锁的查询操作。<br><strong>通过对比，发现 for update 的加锁方式无非是比 lock in share mode 的方式多阻塞了 <code>select...lock in share mode</code> 的查询方式，并不会阻塞快照读。</strong></p><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="comment">-- 0. 开始事务（三者选一就可以） --</span></span><br><span class="line"><span class="keyword">begin</span>;<span class="operator">/</span><span class="keyword">begin</span> work;<span class="operator">/</span><span class="keyword">start</span> transaction;</span><br><span class="line"><span class="comment">-- 1. 查询出商品信息 --</span></span><br><span class="line"><span class="keyword">select</span> status <span class="keyword">from</span> t_goods <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>; </span><br><span class="line"><span class="comment">-- 2. 根据商品信息生成订单 --</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_orders (id,goods_id) <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">1</span>); </span><br><span class="line"><span class="comment">-- 3. 修改商品 status 为 2 -- </span></span><br><span class="line"><span class="keyword">update</span> t_goods <span class="keyword">set</span> status<span class="operator">=</span><span class="number">2</span>; </span><br><span class="line"><span class="comment">-- 4. 提交事务 --</span></span><br><span class="line"><span class="keyword">commit</span>;<span class="operator">/</span><span class="keyword">commit</span> work;</span><br></pre></td></tr></table></figure></p><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/9/ea0dbff2-e055-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="example"><br>上面的查询语句中，我们使用了 <code>select…for update</code> 的方式， 这样就通过开启排他锁的方式实现了悲观锁。此时在 t_goods 表中，id 为 1 的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><ol><li>MyISAM 在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁,在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁。</li><li>MySQL InnoDB 默认行级锁。行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住。</li><li>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</li></ol><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><h2 id="认识触发器"><a href="#认识触发器" class="headerlink" title="认识触发器"></a>认识触发器</h2><p>在 MySQL 中，触发器是一个存储程序，它对相关表中发生的插入、更新或删除等事件自动调用。<br>SQL 标准定义了两种类型的触发器：行级触发器和语句级触发器。</p><ul><li>行级触发器是为每条插入、更新或删除的记录激活的。 例如，如果一个表有 100 条记录被插入、更新或删除，那么这个触发器就会为受影响的 100 条记录自动调用 100 次。</li><li>语句级触发器对每个事务执行一次，不管有多少行被插入、更新或删除。<br><code>MySQL 只支持行级触发器。它不支持语句级触发器</code>。</li></ul><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/27/2ae4b97c-eebb-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="触发器"></p><p><strong>触发器优点</strong></p><ul><li>触发器提供了另一种方法来检查数据的完整性。</li><li>触发器可以处理来自数据库层的错误。</li><li>触发器提供了一种运行计划任务的替代方法。通过使用触发器，你不需要等待预定事件的运行，因为触发器会在表内数据发生变化之前或之后自动调用。</li><li>触发器对于审计表中的数据变化非常有用。</li></ul><p><strong>触发器缺点</strong></p><ul><li>触发器只能提供扩展验证，而不是所有的验证。对于简单的验证，你可以使用 NOT NULL、UNIQUE、CHECK 和 FOREIGN KEY约束。</li><li>触发器可能很难排除故障，因为它们在数据库中自动执行，而客户端应用程序可能不知道。</li><li>触发器可能会增加 MySQL 服务器的开销。</li></ul><h2 id="MySQL创建触发器"><a href="#MySQL创建触发器" class="headerlink" title="MySQL创建触发器"></a>MySQL创建触发器</h2><h3 id="MySQL-CREATE-TRIGGER-语法"><a href="#MySQL-CREATE-TRIGGER-语法" class="headerlink" title="MySQL CREATE TRIGGER 语法"></a>MySQL CREATE TRIGGER 语法</h3><p><strong>Grammar</strong><br><code>CREATE TRIGGER</code> 语句创建一个新的触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">&#123;BEFORE <span class="operator">|</span> AFTER&#125; &#123;<span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">UPDATE</span><span class="operator">|</span> <span class="keyword">DELETE</span> &#125;</span><br><span class="line"><span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后面指定要创建的触发器的名称。注意，触发器的名称在数据库中必须是唯一的。</li><li>接下来，指定触发器的动作时间，可以是 <code>BEFORE</code> 或 <code>AFTER</code>，表示在每条记录被修改之前或之后调用该触发器。</li><li>然后，指定激活触发器的操作，可以是 <code>INSERT</code>、<code>UPDATE</code> 或 <code>DELETE</code>。</li><li>之后，在 <code>ON</code> 关键字后面指定触发器所属的表的名称。</li><li>最后，指定触发器激活时要执行的语句。如果你想执行多条语句，你可以使用 <code>BEGIN END</code> 复合语句</li></ul><p>触发器主体可以访问被 DML 语句影响的列的值。<br>为了区分 DML 启动之前和之后的列的值，你可以使用 <code>NEW</code> 和 <code>OLD</code> 修饰符。<br>例如，如果你更新列描述，在触发器主体中，你可以访问更新前的描述值 <code>OLD.description</code> 和新值 <code>NEW.description</code>。<br>下表说明了 <code>OLD</code> 和 <code>NEW</code> 修改器的可用性。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">|</span> <span class="keyword">Trigger</span> Event <span class="operator">|</span> <span class="keyword">OLD</span> <span class="operator">|</span> <span class="keyword">NEW</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> :<span class="comment">----: | :----: | :----: |</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">INSERT</span> <span class="operator">|</span> <span class="keyword">No</span> <span class="operator">|</span> Yes <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">UPDATE</span> <span class="operator">|</span> Yes <span class="operator">|</span> Yes <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">DELETE</span> <span class="operator">|</span> Yes <span class="operator">|</span> <span class="keyword">No</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>创建一个触发器来记录 <code>employees</code> 表的变化。首先，创建一个名为 <code>employees_audit</code> 的新表，以保持对 <code>employees</code> 表的修改。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees_audit (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    employeeNumber <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    lastname <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    changedat DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    action <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>接下来，创建一个 <code>BEFORE UPDATE</code> 触发器，在对 <code>employees</code> 表进行修改之前调用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_employee_update </span><br><span class="line">    BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> employees</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> employees_audit</span><br><span class="line"> <span class="keyword">SET</span> action <span class="operator">=</span> <span class="string">&#x27;update&#x27;</span>,</span><br><span class="line">     employeeNumber <span class="operator">=</span> OLD.employeeNumber,</span><br><span class="line">     lastname <span class="operator">=</span> OLD.lastname,</span><br><span class="line">     changedat <span class="operator">=</span> NOW();</span><br></pre></td></tr></table></figure><br>在触发器的正文中，我们使用 <code>OLD</code> 关键字来访问受触发器影响的行的 <code>employeeNumber</code> 和 <code>lastname</code> 列的值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br><span class="line">#查看所有触发器</span><br></pre></td></tr></table></figure></p><h2 id="MySQL删除触发器"><a href="#MySQL删除触发器" class="headerlink" title="MySQL删除触发器"></a>MySQL删除触发器</h2><h3 id="MySQL-DROP-TRIGGER-语法"><a href="#MySQL-DROP-TRIGGER-语法" class="headerlink" title="MySQL DROP TRIGGER 语法"></a>MySQL DROP TRIGGER 语法</h3><p><strong>Grammar</strong><br><code>DROP TRIGGER</code> 语句从数据库中删除了一个触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [IF <span class="keyword">EXISTS</span>] [schema_name.]trigger_name;</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>DROP TRIGGER</code> 关键字后面指定要删除的触发器的名称。</li><li>第二，指定触发器所属模式的名称。如果跳过模式名称，该语句将删除当前数据库中的触发器。</li><li>第三，使用 <code>IF EXISTS</code> 选项，在触发器存在的情况下有条件地删除触发器。<code>IF EXISTS</code> 子句是可选的。<br>如果你不使用 <code>IF EXISTS</code> 子句而删除一个不存在的触发器，MySQL 会发出一个错误。然而，如果你使用 <code>IF EXISTS</code> 子句，MySQL 会发出一个注释。<br><code>DROP TRIGGER</code> 要求与触发器相关的表有 <code>TRIGGER</code> 权限。</li></ul><blockquote><p>注意，如果你删除一个表，MySQL 将自动放弃与该表相关的所有触发器。</p></blockquote><p><strong>Example</strong><br>首先，创建一个名为 <code>billings</code> 的表进行演示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> billings (</span><br><span class="line">    billingNo <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    customerNo <span class="type">INT</span>,</span><br><span class="line">    billingDate <span class="type">DATE</span>,</span><br><span class="line">    amount <span class="type">DEC</span>(<span class="number">10</span> , <span class="number">2</span> ),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (billingNo)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>第二，创建一个新的触发器，名为 <code>BEFORE UPDATE</code>，与 <code>billings</code> 表相关联：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_billing_update</span><br><span class="line">    BEFORE <span class="keyword">UPDATE</span> </span><br><span class="line">    <span class="keyword">ON</span> billings <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF new.amount <span class="operator">&gt;</span> old.amount <span class="operator">*</span> <span class="number">10</span> <span class="keyword">THEN</span></span><br><span class="line">        SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> </span><br><span class="line">            <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;New amount cannot be 10 times greater than the current amount.&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> $$    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>触发器在任何更新前都会激活。如果新的金额是当前金额的 10 倍，触发器会引发一个错误。<br><code>SQLSTATU 45000</code>异常处理</p><p>第三，显示触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure></p><p>第四，删除 <code>before_billing_update</code> 触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> before_billing_update;</span><br></pre></td></tr></table></figure></p><p>最后，再次显示触发器，以验证移除情况：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure></p><h2 id="触发器基本操作"><a href="#触发器基本操作" class="headerlink" title="触发器基本操作"></a>触发器基本操作</h2><h3 id="MySQL-BEFORE-INSERT-Trigger"><a href="#MySQL-BEFORE-INSERT-Trigger" class="headerlink" title="MySQL BEFORE INSERT Trigger"></a>MySQL BEFORE INSERT Trigger</h3><h4 id="MySQL-BEFORE-INSERT-TRIGGER-语法"><a href="#MySQL-BEFORE-INSERT-TRIGGER-语法" class="headerlink" title="MySQL BEFORE INSERT TRIGGER 语法"></a>MySQL BEFORE INSERT TRIGGER 语法</h4><p><strong>Grammar</strong><br>MySQL <code>BEFORE INSERT</code> 触发器是在表发生插入事件之前自动触发的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    BEFORE <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure></p><ul><li>首先，在 <code>CREATE TRIGGER</code> 子句中指定你要创建的触发器的名称。</li><li>第二，使用 <code>BEFORE INSERT</code> 子句来指定调用触发器的时间。</li><li>第三，在 <code>ON</code> 关键字后指定触发器所关联的表的名称。</li><li>最后，指定触发器主体，其中包含一条或多条在触发器被调用时执行的 SQL 语句。<br>如果在触发器主体中有多条语句，必须使用 <code>BEGIN END</code> 块并改变默认的分隔符：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    BEFORE <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><blockquote><p>注意，在 <code>BEFORE INSERT</code> 触发器中，你可以访问和改变 <code>NEW</code> 值。但是，你不能访问 <code>OLD</code> 值，因为 <code>OLD</code> 值显然不存在。</p></blockquote></li></ul><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/2a4a8c2e-ef44-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="INSERT"></p><p><strong>Example</strong><br>我们将创建一个 <code>BEFORE INSERT</code> 触发器，从另一个表中维护一个汇总表。<br>首先，创建一个名为 <code>WorkCenters</code> 的新表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> WorkCenters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> WorkCenters (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    capacity <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第二，创建另一个名为 <code>WorkCenterStats</code> 的表，存储工作中心的能力汇总：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> WorkCenterStats;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> WorkCenterStats(</span><br><span class="line">    totalCapacity <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>以下触发器在一个新的工作中心插入到 <code>WorkCenter</code> 表中之前，更新 <code>WorkCenterStats</code> 表中的总容量：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_workcenters_insert</span><br><span class="line">BEFORE <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> WorkCenters <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> rowcount <span class="type">INT</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) </span><br><span class="line">    <span class="keyword">INTO</span> rowcount</span><br><span class="line">    <span class="keyword">FROM</span> WorkCenterStats;</span><br><span class="line">    </span><br><span class="line">    IF rowcount <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">UPDATE</span> WorkCenterStats</span><br><span class="line">        <span class="keyword">SET</span> totalCapacity <span class="operator">=</span> totalCapacity <span class="operator">+</span> new.capacity;</span><br><span class="line">    <span class="keyword">ELSE</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> WorkCenterStats(totalCapacity)</span><br><span class="line">        <span class="keyword">VALUES</span>(new.capacity);</span><br><span class="line">    <span class="keyword">END</span> IF; </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>在这个触发器中：<br>首先，触发器的名称是 <code>CREATE TRIGGER</code> 子句中指定的 <code>before_workcenters_insert</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_workcenters_insert</span><br></pre></td></tr></table></figure><br>第二，触发的事件是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BEFORE <span class="keyword">INSERT</span></span><br></pre></td></tr></table></figure><br>第三，该触发器所关联的表是 <code>WorkCenters</code> 表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> WorkCenters <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br></pre></td></tr></table></figure><br>如果表 <code>WorkCenterStats</code> 中存在记录，触发器将容量添加到 <code>totalCapacity</code> 列中。否则，它就向 <code>WorkCenterStats</code> 表插入一条新的记录。<br><strong>测试 MySQL BEFORE INSERT 触发器</strong><br>首先，在 <code>WorkCenter</code> 表中插入一条新行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> WorkCenters(name, capacity)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;Mold Machine&#x27;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><br>第二，从 <code>WorkCenterStats</code> 表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WorkCenterStats;  </span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/a8325d42-ef44-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"><br>触发器已经被调用，并在 <code>WorkCenterStats</code> 表中插入了一条新行。<br>第三，插入一个新的工作中心：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> WorkCenters(name, capacity)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;Packing&#x27;</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure><br>最后，从 <code>WorkCenterStats</code> 查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> WorkCenterStats;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/eb68f0b2-ef44-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"><br>触发器已经按照预期将总容量从 100 更新到 200。</p><p><strong>Example</strong><br>描述<br>我们需要给 <code>courses</code> 表添加一个新的触发器，并命名为 <code>before_courses_insert</code> ，当新增课程数据时，如果教师 <code>id</code> 在教师表中不存在，则将该条课程数据的教师 <code>id</code> 置为 0，且创建时间置为 <code>NULL</code> ，请编写 SQL 语句实现该触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---------------111----------------</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_courses_insert</span><br><span class="line">before <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> courses <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">declare</span> id_count <span class="type">int</span>;</span><br><span class="line">     <span class="keyword">select</span> <span class="built_in">count</span>(id)</span><br><span class="line">     <span class="keyword">into</span> id_count</span><br><span class="line">     <span class="keyword">from</span> teachers</span><br><span class="line">     <span class="keyword">where</span> id<span class="operator">=</span>new.teacher_id;</span><br><span class="line">     if id_count<span class="operator">&lt;=</span><span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">set</span> new.teacher_id<span class="operator">=</span><span class="number">0</span>,new.created_at<span class="operator">=</span><span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">---------------222-----------------</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_courses_insert</span><br><span class="line">before <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">on</span> courses <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     if new.teacher_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> teachers) <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">set</span> new.teacher_id<span class="operator">=</span><span class="number">0</span>,new.created_at<span class="operator">=</span><span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">-----------------------------------</span></span><br></pre></td></tr></table></figure></p><h3 id="MySQL-AFTER-INSERT-Trigger"><a href="#MySQL-AFTER-INSERT-Trigger" class="headerlink" title="MySQL AFTER INSERT Trigger"></a>MySQL AFTER INSERT Trigger</h3><p><strong>Grammar</strong><br>MySQL <code>AFTER INSERT</code> 触发器是在表上发生插入事件后自动调用的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    AFTER <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">        trigger_body</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后面指定要创建的触发器的名称。</li><li>第二，使用 <code>AFTER INSERT</code> 子句来指定调用触发器的时间。</li><li>第三，在 <code>ON</code> 关键字后指定要创建触发器的表的名称。</li><li>最后，指定触发器主体，它由一条或多条在触发器被调用时执行的语句组成。</li></ul><p>如果触发器主体有多条语句，你需要使用 <code>BEGIN END</code> 块并改变默认的分隔符：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    AFTER <span class="keyword">INSERT</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><p>在 <code>AFTER INSERT</code> 触发器中，可以访问 <code>NEW</code> 值，但是不能改变它们。另外，你也不能访问 <code>OLD</code> 值，因为在 <code>INSERT</code> 触发器上没有 <code>OLD</code> 值。</p><p><strong>Example</strong><br><strong>设置一个样本表</strong><br>首先，创建一个名为 <code>members</code> 的新表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> members;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> members (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    birthDate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第二，创建另一个名为 <code>reminders</code> 的表，存储给会员的提醒信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> reminders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> reminders (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    memberId <span class="type">INT</span>,</span><br><span class="line">    message <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id , memberId)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h4 id="创建-AFTER-INSERT-触发器实例"><a href="#创建-AFTER-INSERT-触发器实例" class="headerlink" title="创建 AFTER INSERT 触发器实例"></a>创建 AFTER INSERT 触发器实例</h4><p>下面的语句创建了一个 <code>AFTER INSERT</code> 触发器，如果会员的出生日期为 <code>NULL</code>，则将提醒信息插入到 <code>reminders</code> 表中。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> after_members_insert</span><br><span class="line">AFTER <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">ON</span> members <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF NEW.birthDate <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> reminders(memberId, message)</span><br><span class="line">        <span class="keyword">VALUES</span>(new.id,CONCAT(<span class="string">&#x27;Hi &#x27;</span>, NEW.name, <span class="string">&#x27;, please update your date of birth.&#x27;</span>));</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>在这个触发器中：<br>首先，触发器的名称是在 <code>CREATE TRIGGER</code> 子句中指定的 <code>after_members_insert</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> after_members_insert</span><br></pre></td></tr></table></figure><br>第二，触发的事件是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AFTER <span class="keyword">INSERT</span></span><br></pre></td></tr></table></figure><br>第三，触发器所关联的表是 <code>members</code> 表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> members <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br></pre></td></tr></table></figure><br>最后，在触发器主体中，如果成员的出生日期为 <code>NULL</code>，则在 <code>reminders</code> 表中插入一条新行。</p><h3 id="MySQL-BEFORE-UPDATE-Trigger"><a href="#MySQL-BEFORE-UPDATE-Trigger" class="headerlink" title="MySQL BEFORE UPDATE Trigger"></a>MySQL BEFORE UPDATE Trigger</h3><p><strong>Grammar</strong><br>在与触发器相关的表发生更新事件之前，MySQL <code>BEFORE UPDATE</code> 触发器会自动被调用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后指定你要创建的触发器的名称。</li><li>第二，使用 <code>BEFORE UPDATE</code> 子句来指定调用触发器的时间。</li><li>第三，在 <code>ON</code> 关键字后指定触发器所属的表的名称。</li><li>最后，指定触发器主体，其中包含一个或多个语句。<br>如果你在触发器主体中有一个以上的语句，你需要使用 <code>BEGIN END</code> 块。此外，你需要改变默认的分隔符，如下所示：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    BEFORE <span class="keyword">UPDATE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><strong>Example</strong><br><strong>设置一个样本表</strong><br>首先，创建一个名为 <code>sales</code> 的新表，以存储销售量：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> sales;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> sales (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    product <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    fiscalYear <span class="type">SMALLINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fiscalMonth TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CHECK</span>(fiscalMonth <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">AND</span> fiscalMonth <span class="operator">&lt;=</span> <span class="number">12</span>),</span><br><span class="line">    <span class="keyword">CHECK</span>(fiscalYear <span class="keyword">BETWEEN</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2050</span>),</span><br><span class="line">    <span class="keyword">CHECK</span> (quantity <span class="operator">&gt;=</span><span class="number">0</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span>(product, fiscalYear, fiscalMonth),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>第二，在 <code>sales</code> 表中插入一些行：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> sales(product, quantity, fiscalYear, fiscalMonth)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;2003 Harley-Davidson Eagle Drag Bike&#x27;</span>,<span class="number">120</span>, <span class="number">2020</span>,<span class="number">1</span>),</span><br><span class="line">    (<span class="string">&#x27;1969 Corvair Monza&#x27;</span>, <span class="number">150</span>,<span class="number">2020</span>,<span class="number">1</span>),</span><br><span class="line">    (<span class="string">&#x27;1970 Plymouth Hemi Cuda&#x27;</span>, <span class="number">200</span>,<span class="number">2020</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>第三，从 <code>sales</code> 表中查询数据以验证插入：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sales;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_sales_update</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> sales <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> errorMessage <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line">    <span class="keyword">SET</span> errorMessage <span class="operator">=</span> CONCAT(<span class="string">&#x27;The new quantity &#x27;</span>,</span><br><span class="line">                        NEW.quantity,</span><br><span class="line">                        <span class="string">&#x27; cannot be 3 times greater than the current quantity &#x27;</span>,</span><br><span class="line">                        OLD.quantity);</span><br><span class="line">                        </span><br><span class="line">    IF new.quantity <span class="operator">&gt;</span> old.quantity <span class="operator">*</span> <span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line">        SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> </span><br><span class="line">            <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> errorMessage;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> $$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>在 <code>sales</code> 表中的每一条记录发生更新事件之前，触发器会自动被触发。<br>如果你将数量列中的值更新为一个比当前值大 3 倍的新值，触发器会引发一个错误并停止更新。<br>首先，触发器的名称是在 <code>CREATE TRIGGER</code> 子句中指定的 <code>before_sales_update</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_sales_update</span><br></pre></td></tr></table></figure><p>第二，触发的事件是：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br></pre></td></tr></table></figure><br>第三，触发器所关联的表是 <code>sales</code> 表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ON</span> sales <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br></pre></td></tr></table></figure><br>第四，声明一个变量并将其值设置为错误信息。<br>注意，在 <code>BEFORE TRIGGER</code> 中，你可以通过 <code>OLD</code> 和 <code>NEW</code> 修改器访问列的新旧值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> errorMessage <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">SET</span> errorMessage <span class="operator">=</span> CONCAT(<span class="string">&#x27;The new quantity &#x27;</span>,</span><br><span class="line">                        NEW.quantity,</span><br><span class="line">                        <span class="string">&#x27; cannot be 3 times greater than the current quantity &#x27;</span>,</span><br><span class="line">                        OLD.quantity);</span><br></pre></td></tr></table></figure><br>注意，我们使用 <code>CONCAT()</code> 函数来形成错误信息。</p><p>最后，使用 <code>IF-THEN</code> 语句检查新值是否比旧值大 3 倍，然后使用 <code>SIGNAL</code> 语句引发一个错误：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF new.quantity <span class="operator">&gt;</span> old.quantity <span class="operator">*</span> <span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line">        SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> </span><br><span class="line">            <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> errorMessage;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong></p><blockquote><p>我们需要给 <code>courses</code> 表添加一个新的触发器，并命名为 <code>before_courses_update</code> ，当更新课程数据时，如果教师 <code>id</code> 在教师表中不存在，则不更新该条数据的教师 <code>id</code>，请编写 SQL 语句实现该触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_courses_update</span><br><span class="line">before <span class="keyword">update</span></span><br><span class="line"><span class="keyword">on</span> courses <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     if new.teacher_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> teachers) <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">set</span> new.teacher_id<span class="operator">=</span>old.teacher_id;</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="MySQL-AFTER-UPDATE-Trigger"><a href="#MySQL-AFTER-UPDATE-Trigger" class="headerlink" title="MySQL AFTER UPDATE Trigger"></a>MySQL AFTER UPDATE Trigger</h3><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">AFTER <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后指定你要创建的触发器的名称。</li><li>第二，使用 <code>AFTER UPDATE</code> 子句来指定调用触发器的时间。</li><li>第三，在 <code>ON</code> 关键字后指定触发器所属的表的名称。</li><li>最后，指定由一个或多个语句组成的触发器主体。<br>如果你在触发器主体中有一个以上的语句，你需要使用 <code>BEGIN END</code> 块。此外，你需要改变默认的分隔符，如下所示：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    AFTER <span class="keyword">UPDATE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Example</strong><br>首先，创建一个名为 <code>sales</code> 的表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> Sales;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Sales (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    product <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    quantity <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    fiscalYear <span class="type">SMALLINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    fiscalMonth TINYINT <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CHECK</span>(fiscalMonth <span class="operator">&gt;=</span> <span class="number">1</span> <span class="keyword">AND</span> fiscalMonth <span class="operator">&lt;=</span> <span class="number">12</span>),</span><br><span class="line">    <span class="keyword">CHECK</span>(fiscalYear <span class="keyword">BETWEEN</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">2050</span>),</span><br><span class="line">    <span class="keyword">CHECK</span> (quantity <span class="operator">&gt;=</span><span class="number">0</span>),</span><br><span class="line">    <span class="keyword">UNIQUE</span>(product, fiscalYear, fiscalMonth),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>第二，在 <code>sales</code> 表中插入一些行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Sales(product, quantity, fiscalYear, fiscalMonth)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;2001 Ferrari Enzo&#x27;</span>,<span class="number">140</span>, <span class="number">2021</span>,<span class="number">1</span>),</span><br><span class="line">    (<span class="string">&#x27;1998 Chrysler Plymouth Prowler&#x27;</span>, <span class="number">110</span>,<span class="number">2021</span>,<span class="number">1</span>),</span><br><span class="line">    (<span class="string">&#x27;1913 Ford Model T Speedster&#x27;</span>, <span class="number">120</span>,<span class="number">2021</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p>第三，从 <code>sales</code> 表中查询数据以验证插入：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> SalesChanges;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SalesChanges (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    salesId <span class="type">INT</span>,</span><br><span class="line">    beforeQuantity <span class="type">INT</span>,</span><br><span class="line">    afterQuantity <span class="type">INT</span>,</span><br><span class="line">    changedAt <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>创建 AFTER UPDATE 触发器实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> after_sales_update</span><br><span class="line">AFTER <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> sales <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF OLD.quantity <span class="operator">&lt;&gt;</span> new.quantity <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> SalesChanges(salesId,beforeQuantity, afterQuantity)</span><br><span class="line">        <span class="keyword">VALUES</span>(old.id, old.quantity, new.quantity);</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-BEFORE-DELETE-Trigger"><a href="#MySQL-BEFORE-DELETE-Trigger" class="headerlink" title="MySQL BEFORE DELETE Trigger"></a>MySQL BEFORE DELETE Trigger</h3><p><strong>Grammar</strong><br>MySQL <code>BEFORE DELETE</code> 触发器在一个表发生删除事件之前自动触发。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    BEFORE <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后指定你要创建的触发器的名称。</li><li>第二，使用 <code>BEFORE DELETE</code> 子句来指定触发器在删除事件之前被调用。</li><li>第三，在 <code>ON</code> 关键字后指定触发器所属的表的名称。</li><li>最后，指定触发器主体，它由一个或多个在触发器被触发时执行的语句组成。<br>如果你在触发器主体中有一个以上的语句，你需要使用 <code>BEGIN END</code> 块。此外，你需要改变默认的分隔符，如下所示：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    BEFORE <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>在 <code>BEFORE DELETE</code> 触发器中，你可以访问 <code>OLD</code> 记录，但是不能更新它。另外，在 <code>BEFORE DELETE</code> 触发器中没有 <code>NEW</code> 行。<br><strong>Example</strong><br>首先，创建一个名为 <code>Salaries</code> 的新表，存储员工的工资信息：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> Salaries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Salaries (</span><br><span class="line">    employeeNumber <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    validFrom <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    amount <span class="type">DEC</span>(<span class="number">12</span> , <span class="number">2</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>第二，在 <code>Salaries</code> 表中插入一些行：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> salaries(employeeNumber,validFrom,amount)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1002</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">50000</span>),</span><br><span class="line">    (<span class="number">1056</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">60000</span>),</span><br><span class="line">    (<span class="number">1076</span>,<span class="string">&#x27;2000-01-01&#x27;</span>,<span class="number">70000</span>);</span><br></pre></td></tr></table></figure>第三，创建一个存储被删除工资的表：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> SalaryArchives;    </span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SalaryArchives (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    employeeNumber <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    validFrom <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    amount <span class="type">DEC</span>(<span class="number">12</span> , <span class="number">2</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    deletedAt <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> NOW()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><strong>创建 BEFORE DELETE 触发器实例</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_salaries_delete</span><br><span class="line">BEFORE <span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">ON</span> salaries <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> SalaryArchives(employeeNumber,validFrom,amount)</span><br><span class="line">    <span class="keyword">VALUES</span>(OLD.employeeNumber,OLD.validFrom,OLD.amount);</span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li></ul><p>首先，触发器的名称是在 <code>CREATE TRIGGER</code> 子句中指定的 <code>before_salaries_delete</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_salaries_delete</span><br></pre></td></tr></table></figure><br>第二，触发的事件是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BEFORE DELETE</span><br></pre></td></tr></table></figure><br>第三，触发器所关联的表是 <code>Salaries</code> 表：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ON Salaries FOR EACH ROW</span><br></pre></td></tr></table></figure><br>最后，在触发器主体内将删除的行插入到 <code>SalaryArchives</code> 表中。</p><p><strong>Example</strong><br>为名为 <code>members</code> 的表创建了一个 <code>DELETE</code> 触发器，要求实现当有一条数据被删除时，则将提醒信息 <code>memberId</code> = <code>[id]</code>，<code>message</code> = <code>&#39;Delete members &#123;[old]&#125;&#39;</code> 插入到 <code>reminders</code> 表中<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_members_delete</span><br><span class="line"></span><br><span class="line">before <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> members <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">declare</span> new_message <span class="type">varchar</span>(<span class="number">255</span>);</span><br><span class="line">     <span class="keyword">declare</span> c <span class="type">int</span>;</span><br><span class="line">     <span class="comment">--不存在的参数需要先声明</span></span><br><span class="line">     <span class="keyword">select</span> <span class="built_in">count</span>(email) <span class="keyword">into</span> c <span class="keyword">from</span> members <span class="keyword">where</span> id<span class="operator">=</span>old.id;</span><br><span class="line">     if c <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">set</span> new_message<span class="operator">=</span>concat(<span class="string">&#x27;Delete members &#123;[id=&#x27;</span>,old.id,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[name=&#x27;</span>,old.name,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[email=&#x27;</span>,old.email,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[birthDate=&#x27;</span>,old.birthDate,<span class="string">&#x27;]&#125;&#x27;</span>);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">set</span> new_message<span class="operator">=</span>concat(<span class="string">&#x27;Delete members &#123;[id=&#x27;</span>,old.id,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[name=&#x27;</span>,old.name,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[email=null] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[birthDate=&#x27;</span>,old.birthDate,<span class="string">&#x27;]&#125;&#x27;</span>);</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line">     <span class="comment">--if then</span></span><br><span class="line">     <span class="comment">--…… </span></span><br><span class="line">     <span class="comment">--else </span></span><br><span class="line">     <span class="comment">--…… </span></span><br><span class="line">     <span class="comment">--end if;</span></span><br><span class="line">     <span class="keyword">insert</span> <span class="keyword">into</span> reminders(memberId,message)</span><br><span class="line">     <span class="keyword">values</span>(old.id,new_message);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"><span class="comment">--------------------2222-----------------------</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_members_delete</span><br><span class="line">before <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> members <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">declare</span> new_message <span class="type">varchar</span>(<span class="number">255</span>);</span><br><span class="line">     if (<span class="keyword">select</span> email <span class="keyword">from</span> members <span class="keyword">where</span> id<span class="operator">=</span>old.id) <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">set</span> new_message<span class="operator">=</span>concat(<span class="string">&#x27;Delete members &#123;[id=&#x27;</span>,old.id,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[name=&#x27;</span>,old.name,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[email=&#x27;</span>,old.email,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[birthDate=&#x27;</span>,old.birthDate,<span class="string">&#x27;]&#125;&#x27;</span>);</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">          <span class="keyword">set</span> new_message<span class="operator">=</span>concat(<span class="string">&#x27;Delete members &#123;[id=&#x27;</span>,old.id,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[name=&#x27;</span>,old.name,<span class="string">&#x27;] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[email=null] &#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;[birthDate=&#x27;</span>,old.birthDate,<span class="string">&#x27;]&#125;&#x27;</span>);</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line">     <span class="keyword">insert</span> <span class="keyword">into</span> reminders(memberId,message)</span><br><span class="line">     <span class="keyword">values</span>(old.id,new_message);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-AFTER-DELETE-Trigger"><a href="#MySQL-AFTER-DELETE-Trigger" class="headerlink" title="MySQL AFTER DELETE Trigger"></a>MySQL AFTER DELETE Trigger</h3><p><strong>Grammar</strong><br>MySQL <code>AFTER DELETE</code> 触发器是在表发生删除事件后自动调用的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    AFTER <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">trigger_body;</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>CREATE TRIGGER</code> 关键字后指定你要创建的触发器的名称。</li><li>第二，使用 <code>AFTER DELETE</code> 子句来指定触发器在删除事件之前被调用。</li><li>第三，在 <code>ON</code> 关键字后指定触发器所属的表的名称。</li><li>最后，指定触发器主体，它由一个或多个在触发器被触发时执行的语句组成。<br>如果你在触发器主体中有一个以上的语句，你需要使用 <code>BEGIN END</code> 块。此外，你需要改变默认的分隔符，如下所示：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">    AFTER <span class="keyword">DELETE</span></span><br><span class="line">    <span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$    </span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>在 <code>AFTER DELETE</code> 触发器中，你可以访问 <code>OLD</code> 记录，但是不能更新它。<br>注意，在 <code>AFTER DELETE</code> 触发器中没有新的记录。</li></ul><p><strong>Example</strong><br>首先，创建一个名为 <code>Salaries</code> 的新表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> Salaries;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Salaries (</span><br><span class="line">    employeeNumber <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第二，在 <code>Salaries</code> 表中插入一些行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Salaries(employeeNumber,salary)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1002</span>,<span class="number">5000</span>),</span><br><span class="line">    (<span class="number">1056</span>,<span class="number">7000</span>),</span><br><span class="line">    (<span class="number">1076</span>,<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><br>第三，创建另一个名为 <code>SalaryBudgets</code> 的表，存储 <code>Salaries</code> 表中的工资总额：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> SalaryBudgets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SalaryBudgets(</span><br><span class="line">    total <span class="type">DECIMAL</span>(<span class="number">15</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第四，使用 <code>SUM()</code> 函数从 <code>Salaries</code> 表中获得工资总额，并将其插入到 <code>SalaryBudgets</code> 表中：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SalaryBudgets(total)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) </span><br><span class="line"><span class="keyword">FROM</span> Salaries;</span><br></pre></td></tr></table></figure><br>最后，从 <code>SalaryBudgets</code> 表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SalaryBudgets; </span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>我们需要给 <code>teachers</code> 表添加一个新的触发器，当删除一条教师数据时，如果教师 <code>id</code> 在 <code>courses</code> 表中的 <code>teacher_id</code> 有存在，则将该 <code>teacher_id</code> 置为 <code>0</code> ，请编写 SQL 语句实现该触发器。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> after_teacher_delete</span><br><span class="line">     after <span class="keyword">delete</span></span><br><span class="line">     <span class="keyword">on</span> teachers <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     if old.id <span class="keyword">in</span> (<span class="keyword">select</span> teacher_id <span class="keyword">from</span> courses) <span class="keyword">then</span></span><br><span class="line">          <span class="keyword">update</span> courses</span><br><span class="line">          <span class="keyword">set</span> teacher_id<span class="operator">=</span><span class="number">0</span></span><br><span class="line">          <span class="keyword">where</span> teacher_id<span class="operator">=</span>old.id;</span><br><span class="line">     <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><h2 id="创建多个触发器"><a href="#创建多个触发器" class="headerlink" title="创建多个触发器"></a>创建多个触发器</h2><h3 id="MySQL-Multiple-Triggers-语法"><a href="#MySQL-Multiple-Triggers-语法" class="headerlink" title="MySQL Multiple Triggers 语法"></a>MySQL Multiple Triggers 语法</h3><p>在 MySQL 5.7.2 版本之前，你只能为一个表中的事件创建一个触发器，例如，你只能为 <code>BEFORE UPDATE</code> 或 <code>AFTER UPDATE</code> 事件创建一个触发器。MySQL 5.7.2+ 取消了这一限制，允许你为一个给定的表创建多个具有相同事件和行动时间的触发器。当一个事件发生时，这些触发器将依次激活。<br>下面是定义一个触发器的语法，该触发器将在现有触发器之前或之后激活，以响应相同的事件和操作时间：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_name</span><br><span class="line">&#123;BEFORE<span class="operator">|</span>AFTER&#125;&#123;<span class="keyword">INSERT</span><span class="operator">|</span><span class="keyword">UPDATE</span><span class="operator">|</span><span class="keyword">DELETE</span>&#125; </span><br><span class="line"><span class="keyword">ON</span> table_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line">&#123;FOLLOWS<span class="operator">|</span><span class="keyword">PRECEDES</span>&#125; existing_trigger_name</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="comment">-- statements</span></span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>在这个语法中，<code>FOLLOWS</code> 或 <code>PRECEDES</code> 指定了新的触发器应该在现有触发器之前或之后被调用。</p><ul><li><code>FOLLOWS</code> 允许新的触发器在一个现有的触发器之后激活。</li><li><code>PRECEDES</code> 允许新的触发器在现有触发器之前激活。<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/7e5a036e-ef65-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="图示"></li></ul><p><strong>Example</strong><br>使用 <code>products</code> 表进行演示。<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/89028e1c-ef65-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="products"><br>假设想改变一个产品的价格（<code>MSRP</code> 列），并在一个单独的名为 <code>PriceLogs</code> 的表中记录旧价格。<br>首先，使用下面的 <code>CREATE TABLE</code> 语句创建一个新的 <code>price_logs</code> 表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PriceLogs (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    productCode <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    updated_at <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">                        <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> </span><br><span class="line">            <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (productCode)</span><br><span class="line">        <span class="keyword">REFERENCES</span> products (productCode)</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE </span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第二，创建一个新的触发器，当 <code>products</code> 表的 <code>BEFORE UPDATE</code> 事件发生时激活：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_products_update </span><br><span class="line">   BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> products </span><br><span class="line">   <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">     IF OLD.msrp <span class="operator">&lt;&gt;</span> NEW.msrp <span class="keyword">THEN</span></span><br><span class="line">         <span class="keyword">INSERT</span> <span class="keyword">INTO</span> PriceLOgs(product_code,price)</span><br><span class="line">         <span class="keyword">VALUES</span>(old.productCode,old.msrp);</span><br><span class="line">     <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>第三，检查产品 <code>S12_1099</code> 的价格：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    productCode, </span><br><span class="line">    msrp </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    products</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    productCode <span class="operator">=</span> <span class="string">&#x27;S12_1099&#x27;</span>;</span><br></pre></td></tr></table></figure><br>并使用以下 <code>UPDATE</code> 语句改变产品的价格：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> products</span><br><span class="line"><span class="keyword">SET</span> msrp <span class="operator">=</span> <span class="number">200</span></span><br><span class="line"><span class="keyword">WHERE</span> productCode <span class="operator">=</span> <span class="string">&#x27;S12_1099&#x27;</span>;</span><br></pre></td></tr></table></figure><br>第四，从 <code>PriceLogs</code> 表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> PriceLogs;</span><br></pre></td></tr></table></figure></p><p>为了多触发器演示的目的，我们将创建一个新的单独的表来存储进行更改的用户的数据。<br>第五，创建 <code>UserChangeLogs</code> 表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> UserChangeLogs (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    productCode <span class="type">VARCHAR</span>(<span class="number">15</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    updatedAt <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> </span><br><span class="line">        <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> </span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    updatedBy <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (productCode)</span><br><span class="line">        <span class="keyword">REFERENCES</span> products (productCode)</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE </span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第六，为 <code>products</code> 表创建一个 <code>BEFORE UPDATE</code> 触发器。这个触发器在 <code>before_products_update</code> 触发器之后激活。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_products_update_log_user</span><br><span class="line">   BEFORE <span class="keyword">UPDATE</span> <span class="keyword">ON</span> products </span><br><span class="line">   <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> </span><br><span class="line">   FOLLOWS before_products_update</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF OLD.msrp <span class="operator">&lt;&gt;</span> NEW.msrp <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> </span><br><span class="line">            UserChangeLogs(productCode,updatedBy)</span><br><span class="line">        <span class="keyword">VALUES</span></span><br><span class="line">            (OLD.productCode,<span class="keyword">USER</span>());</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>第七，使用以下 <code>UPDATE</code> 语句更新产品的价格：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> </span><br><span class="line">    products</span><br><span class="line"><span class="keyword">SET</span> </span><br><span class="line">    msrp <span class="operator">=</span> <span class="number">220</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    productCode <span class="operator">=</span> <span class="string">&#x27;S12_1099&#x27;</span>;</span><br></pre></td></tr></table></figure><br>第八，从 <code>PriceLogs</code> 和 <code>UserChangeLogs</code> 两个表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> PriceLogs;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/1674d34a-ef66-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> UserChangeLogs;</span><br></pre></td></tr></table></figure><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/1e7de748-ef66-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"></p><p><strong>触发顺序信息</strong><br>如果使用 <code>SHOW TRIGGERS</code> 语句来显示触发器，你将看不到触发器对同一事件和动作时间的激活顺序。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">FROM</span> classicmodels</span><br><span class="line"><span class="keyword">WHERE</span> `<span class="keyword">table</span>` <span class="operator">=</span> <span class="string">&#x27;products&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/3456a0dc-ef66-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="show triggers"></p><p>为了找到这些信息，你需要在 <code>information_schema</code> 数据库的触发器表中查询 <code>action_order</code> 列，具体操作如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    trigger_name, </span><br><span class="line">    action_order</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.triggers</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    trigger_schema <span class="operator">=</span> <span class="string">&#x27;classicmodels&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    event_object_table , </span><br><span class="line">    action_timing , </span><br><span class="line">    event_manipulation;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/531ff6bc-ef66-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="trigger_detail"></p><p><strong>Example</strong><br>LintCode 部门新进了一批科研人员，为了保护他们的人身安全，需要在 <code>teachers</code> 表中，将他们的信息删除。请编写触发器，实现每次删除 <code>teachers</code> 表中的信息时，会在 <code>teachers_bkp</code> 中记录其信息。部分德高望重的科研人员渴望加入中国（<code>CN</code>）国籍，请编写触发器，实现该功能。<br>我们需要给 <code>teachers</code> 表添加两个新的触发器，当删除一条教师数据时：</p><ul><li>触发器 <code>bkp_teachers_delete</code>：将删除的数据备份到结构相同的备份表 <code>teachers_bkp</code> 中；</li><li>触发器 <code>before_teachers_delete</code>：将 <code>teachers_bkp</code> 表中最年长的教师国籍改为 ‘CN’；</li><li>触发器 <code>bkp_teachers_delete</code> 需在触发器 <code>before_teachers_delete</code> 之前执行。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> bkp_teachers_delete</span><br><span class="line">after <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> teachers <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">insert</span> <span class="keyword">into</span> teachers_bkp(name,email,age,country)</span><br><span class="line">     <span class="keyword">values</span>(old.name,old.email,old.age,old.country);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> before_teachers_delete</span><br><span class="line">after <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span> teachers <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line">follows bkp_teachers_delete</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">     <span class="keyword">declare</span> id1 <span class="type">int</span> ;</span><br><span class="line">     <span class="comment">--声明类型</span></span><br><span class="line">     <span class="keyword">select</span> id <span class="keyword">into</span> id1</span><br><span class="line">     <span class="keyword">from</span> teachers_bkp</span><br><span class="line">     <span class="keyword">where</span> age<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> teachers_bkp <span class="keyword">where</span> country<span class="operator">!=</span><span class="string">&#x27;CN&#x27;</span>)</span><br><span class="line">     limit <span class="number">1</span>;</span><br><span class="line">     <span class="comment">--不能select和update同一张表，所以要分开select和update语句</span></span><br><span class="line">     <span class="keyword">update</span> teachers_bkp</span><br><span class="line">     <span class="keyword">set</span> country<span class="operator">=</span><span class="string">&#x27;CN&#x27;</span></span><br><span class="line">     <span class="keyword">where</span> id<span class="operator">=</span>id1;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="如何从MySQL的触发器中调用存储过程"><a href="#如何从MySQL的触发器中调用存储过程" class="headerlink" title="如何从MySQL的触发器中调用存储过程"></a>如何从MySQL的触发器中调用存储过程</h2><p>MySQL 允许通过使用 <code>CALL</code> 语句从一个触发器调用一个存储过程。通过这样做，你可以在几个触发器中重复使用同一个存储过程。<br>然而，触发器不能调用有 <code>OUT</code> 或 <code>INOUT</code> 参数的存储过程，或使用动态 SQL 的存储过程。</p><p><strong>Example</strong><br>首先，创建一个新的表，称为 <code>accounts</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> accounts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> accounts (</span><br><span class="line">    accountId <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    amount <span class="type">DECIMAL</span>(<span class="number">10</span> , <span class="number">2</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> ,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (accountId),</span><br><span class="line">    <span class="keyword">CHECK</span>(amount <span class="operator">&gt;=</span> <span class="number">0</span>) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>第二，在 <code>accounts</code> 表中插入两行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> accounts(name, amount)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;John Doe&#x27;</span>, <span class="number">1000</span>),</span><br><span class="line">    (<span class="string">&#x27;Jane Bush&#x27;</span>, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><br>第三，从 <code>accounts</code> 表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/67f8daee-ef67-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="accounts"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> Withdraw(</span><br><span class="line">    fromAccountId <span class="type">INT</span>, </span><br><span class="line">    withdrawAmount <span class="type">DEC</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    IF withdrawAmount <span class="operator">&lt;=</span> <span class="number">0</span> <span class="keyword">THEN</span></span><br><span class="line">        SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> </span><br><span class="line">            <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> <span class="string">&#x27;The withdrawal amount must be greater than zero&#x27;</span>;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">UPDATE</span> accounts </span><br><span class="line">    <span class="keyword">SET</span> amount <span class="operator">=</span> amount <span class="operator">-</span> withdrawAmount</span><br><span class="line">    <span class="keyword">WHERE</span> accountId <span class="operator">=</span> fromAccountId;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><blockquote><p>在此存储过程中，如果取款金额小于或等于零，就会引发错误。 否则，它将会更新账户的金额。</p></blockquote><p><strong>创建一个检查提款的存储过程</strong><br>下面的语句创建了一个存储过程，用于检查从一个账户中提款的情况：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> CheckWithdrawal(</span><br><span class="line">    fromAccountId <span class="type">INT</span>,</span><br><span class="line">    withdrawAmount <span class="type">DEC</span>(<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> balance <span class="type">DEC</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> withdrawableAmount <span class="type">DEC</span>(<span class="number">10</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">DECLARE</span> message <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- get current balance of the account</span></span><br><span class="line">    <span class="keyword">SELECT</span> amount </span><br><span class="line">    <span class="keyword">INTO</span> balance</span><br><span class="line">    <span class="keyword">FROM</span> accounts</span><br><span class="line">    <span class="keyword">WHERE</span> accountId <span class="operator">=</span> fromAccountId;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- Set minimum balance</span></span><br><span class="line">    <span class="keyword">SET</span> withdrawableAmount <span class="operator">=</span> balance <span class="operator">-</span> <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line">    IF withdrawAmount <span class="operator">&gt;</span> withdrawableAmount <span class="keyword">THEN</span></span><br><span class="line">        <span class="keyword">SET</span> message <span class="operator">=</span> CONCAT(<span class="string">&#x27;Insufficient amount, the maximum withdrawable is &#x27;</span>, withdrawableAmount);</span><br><span class="line">        SIGNAL <span class="keyword">SQLSTATE</span> <span class="string">&#x27;45000&#x27;</span> </span><br><span class="line">            <span class="keyword">SET</span> MESSAGE_TEXT <span class="operator">=</span> message;</span><br><span class="line">    <span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br>在这个存储过程中：</p><ul><li>首先，获取账户的当前余额。</li><li>第二，设置可提取金额。账户的最低余额必须是 25。</li><li>第三，如果提款金额大于可提款金额，则引发错误。</li></ul><p><strong>创建一个调用存储过程的触发器</strong><br>下面的语句创建一个 <code>BEFORE UPDATE</code> 触发器，该触发器调用存储过程 <code>CheckWithdrawal</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> before_accounts_update</span><br><span class="line">BEFORE <span class="keyword">UPDATE</span></span><br><span class="line"><span class="keyword">ON</span> accounts <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">CALL</span> CheckWithdrawal (</span><br><span class="line">        OLD.accountId, </span><br><span class="line">        OLD.amount <span class="operator">-</span> NEW.amount</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br><strong>测试交易</strong><br>首先，从账户 id 1 中提取 400：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> withdraw(<span class="number">1</span>, <span class="number">400</span>);</span><br></pre></td></tr></table></figure><br>第二，从 <code>accounts</code> 表中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> accountId <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/bef15632-ef67-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"><br>第三，从账户 id 1 中提取 600：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> withdraw(<span class="number">1</span>, <span class="number">600</span>);</span><br></pre></td></tr></table></figure><br>存储过程 <code>Withdraw</code> 执行一个 <code>UPDATE</code> 语句，该语句自动调用触发器 <code>before_accounts_update</code>。<br><code>before_account_update</code> 触发器然后调用存储过程 <code>CheckWithdrawal</code> 来检查提款。它发出了一个错误，因为提款金额导致最低余额为零，小于 25。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: <span class="number">1644.</span> Insufficient amount, the maximum withdrawable <span class="keyword">is</span> <span class="number">575.00</span></span><br></pre></td></tr></table></figure><br>四、从账户 id 1 提取 575：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CALL</span> withdraw(<span class="number">1</span>, <span class="number">575</span>);</span><br></pre></td></tr></table></figure><br>最后，通过查询 <code>accounts</code> 表中的数据来验证提款：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> accounts</span><br><span class="line"><span class="keyword">WHERE</span> accountId <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/28/ee646d6e-ef67-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="outcome"></p><h2 id="MySQL显示触发器"><a href="#MySQL显示触发器" class="headerlink" title="MySQL显示触发器"></a>MySQL显示触发器</h2><p><strong>Grammar</strong><br><code>SHOW TRIGGERS</code> 语句显示所有的触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br><span class="line">[&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; database_name]</span><br><span class="line">[<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> <span class="operator">|</span> <span class="keyword">WHERE</span> search_condition];</span><br></pre></td></tr></table></figure><br>在这个语法中，如果不使用最后两个子句，<code>SHOW TRIGGERS</code> 会返回所有数据库中的所有触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure><br>要显示一个特定数据库中的所有触发器，需要在 <code>FROM</code> 或 <code>IN</code> 关键字后面指定数据库名称，像这样：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">FROM</span> database_name;</span><br><span class="line"><span class="comment">-- OR --</span></span><br><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br><span class="line"><span class="keyword">IN</span> database_name;</span><br></pre></td></tr></table></figure><br>为了根据模式查找触发器，我们使用 <code>LIKE</code> 子句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>;</span><br><span class="line"><span class="comment">-- OR --</span></span><br><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">FROM</span> database_name</span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span>;</span><br></pre></td></tr></table></figure><br><code>LIKE</code> 子句的含义与 <code>SELECT</code> 语句中的相同。<br>为了找到符合条件的触发器，你可以使用 <code>WHERE</code> 子句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">WHERE</span> search_condition;</span><br><span class="line"><span class="comment">-- OR --</span></span><br><span class="line"><span class="keyword">SHOW</span> TRIGGERS </span><br><span class="line"><span class="keyword">FROM</span> database_name</span><br><span class="line"><span class="keyword">WHERE</span> search_condition;</span><br></pre></td></tr></table></figure><br><code>SHOW TRIGGERS</code> 语句返回一个结果集，包括以下几列：</p><ul><li>trigger: 触发器的名称</li><li>event: 调用触发器的事件，例如 INSERT、UPDATE 或 DELETE</li><li>table: 触发器所属的表</li><li>statement: 触发器的主体</li><li>timing: 触发器的激活时间，可以是 BEFORE 或 AFTER</li><li>created: 触发器的创建时间</li><li>sql_mode: 触发器执行时的 SQL_MODE</li><li>definer: 创建触发器的用户账户</li><li>character_set_client</li><li>collation_connection</li><li>database collation<blockquote><p>注意，要执行 <code>SHOW TRIGGERS</code> 语句，你需要有 <code>SUPER</code> 权限。</p></blockquote></li></ul><p><strong>Example</strong><br>下面的例子使用 <code>SHOW TRIGGERS</code> 语句来获取当前 MySQL 服务器中所有数据库的所有触发器。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS;</span><br></pre></td></tr></table></figure><br>下面的例子显示了 <code>classicmodels</code> 数据库中的所有触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br><span class="line"><span class="keyword">FROM</span> classicmodels;</span><br></pre></td></tr></table></figure><br>下面的语句显示了与 <code>employees</code> 表相关的所有触发器：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TRIGGERS</span><br><span class="line"><span class="keyword">FROM</span> classicmodels</span><br><span class="line"><span class="keyword">WHERE</span> `<span class="keyword">table</span>` <span class="operator">=</span> <span class="string">&#x27;employees&#x27;</span>;</span><br></pre></td></tr></table></figure><br><strong>总结</strong><br>使用 <code>SHOW TRIGGERS</code> 语句来获得所有的触发器<br>使用 <code>SHOW TRIGGERS FROM &#39;database&#39;</code> 语句来获取数据库中的所有触发器。<br>使用 <code>SHOW TRIGGERS FROM &#39;database&#39; WHERE table = &#39;name&#39;</code> 来获得与一个表相关的所有触发器。</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="视图简介"><a href="#视图简介" class="headerlink" title="视图简介"></a>视图简介</h2><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> courses.name <span class="keyword">AS</span> name, created_at, teachers.name <span class="keyword">AS</span> teacher</span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line">   <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teachers <span class="keyword">ON</span> courses.teacher_id <span class="operator">=</span> teachers.id;</span><br></pre></td></tr></table></figure><br>运行后的输出：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> courses.name <span class="keyword">AS</span> name, created_at, teachers.name <span class="keyword">AS</span> teacher</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teachers <span class="keyword">ON</span> courses.teacher_id <span class="operator">=</span> teachers.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> name                    <span class="operator">|</span> created_at <span class="operator">|</span> teacher          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Advanced Algorithms     <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Django                  <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Web                     <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Big Data                <span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-11</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Artificial Intelligence <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Data Analysis           <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-12</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Object Oriented Design  <span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming     <span class="operator">|</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-18</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><br>下一次，如果还想获得相同的信息，包括课程名称、课程创建日期和讲师姓名，则需要再次发出相同的查询。<br>一种方法是将查询保存在一个文件中，可以是 .txt 或 .sql 文件，以便稍后可以从 MySQL Workbench 或任何其他 MySQL 客户端工具打开和执行它。<br>一个更好的方法是将查询保存在数据库服务器中，并为其指定一个名称。这种命名的查询被称为数据库视图，或者简单地说：视图。<br>根据定义，视图是一个存储在数据库目录中的命名查询。<br>要创建一个新的视图，需要使用 CREATE VIEW 语句。该语句在上述查询的基础上创建了一个视图 <code>v_courses_teachers</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_courses_teachers</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> courses.name <span class="keyword">AS</span> name, created_at, teachers.name <span class="keyword">AS</span> teacher</span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line">   <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teachers <span class="keyword">ON</span> courses.teacher_id <span class="operator">=</span> teachers.id;</span><br></pre></td></tr></table></figure><br>运行后输出：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_courses_teachers</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AS</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> courses.name <span class="keyword">AS</span> name, created_at, teachers.name <span class="keyword">AS</span> teacher</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> courses</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> teachers <span class="keyword">ON</span> courses.teacher_id <span class="operator">=</span> teachers.id;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><br>一旦你执行了 CREATE VIEW 语句，MySQL 就会创建视图并将其存储在数据库中。<br>现在，你可以在 SQL 语句中把该视图作为表来引用。例如，你可以使用 SELECT 语句查询 <code>v_courses_teachers</code> 视图的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_courses_teachers;</span><br></pre></td></tr></table></figure><br>运行后的输出：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_courses_teachers;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> name                    <span class="operator">|</span> created_at <span class="operator">|</span> teacher          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> Advanced Algorithms     <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Django                  <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Web                     <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Big Data                <span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-11</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Artificial Intelligence <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Data Analysis           <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-12</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Object Oriented Design  <span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming     <span class="operator">|</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-18</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+------------+------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><br>视图并不实际存储数据。当你对视图发出 SELECT 语句时，MySQL 会执行视图定义中指定的基础查询，并返回结果集。由于这个原因，有时，视图被称为虚拟表。<br><code>MySQL 允许从一个或多个表中检索数据的 SELECT 语句创建一个视图</code>。这张图片说明了一个基于多个表的列的视图。<br><strong>Example</strong><br>创建一个名为 <code>v_week</code> 的视图，通过执行以下查询返回一周的 7 天：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_week(<span class="keyword">day</span>) <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Mon&#x27;</span> </span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Tue&#x27;</span></span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Web&#x27;</span></span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Thu&#x27;</span></span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Fri&#x27;</span></span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Sat&#x27;</span></span><br><span class="line">    <span class="keyword">UNION</span> </span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;Sun&#x27;</span>;</span><br></pre></td></tr></table></figure><br><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> v_week;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">day</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="operator">|</span> Mon <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Tue <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Web <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Thu <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Fri <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sat <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sun <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-视图的优势"><a href="#MySQL-视图的优势" class="headerlink" title="MySQL 视图的优势"></a>MySQL 视图的优势</h3><ul><li>简化复杂的查询<br>视图有助于简化复杂的查询。如果你有任何<code>经常使用的复杂查询</code>，你可以<code>基于它创建一个视图</code>，这样你就可以通过使用一个简单的 SELECT 语句来引用该视图，而不是重新输入查询内容。</li><li>使逻辑业务一致<br>假设你不得不在每个查询中重复写相同的公式。或者你有一个具有复杂业务逻辑的查询。为了使这种<code>逻辑在不同的查询中保持一致，你可以使用一个视图来存储计算结果，并隐藏其复杂性</code>。</li><li><strong>增加额外的安全层</strong><br>一个表可能会暴露出很多数据，包括敏感数据，如个人和银行信息。<br>通过<code>使用视图和权限，你可以限制用户可以访问哪些数据，只向他们暴露必要的数据</code>。<br>例如，表 employees 可能包含 SSN 和地址信息，这些信息应该只由人力资源部门访问。<br>如果要将一般信息，如名字、姓氏和性别暴露给总务部门，你可以基于这些列创建一个视图，并授予总务部门的用户访问该视图，而不是整个表 employees。</li><li>实现向后兼容<br>在遗留系统中，视图可以实现向后兼容。<br>假设，你想把一个大表规范化为许多小表。而且你不想影响当前引用该表的应用程序。<br>在这种情况下，你可以在新表的基础上创建一个名称与表相同的视图，这样所有的应用程序都可以像引用表一样引用该视图。<blockquote><p>注意，视图和表不能有相同的名字，所以你需要先删除表，然后再创建一个与被删除的表名字相同的视图。</p></blockquote></li></ul><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><h3 id="MySQL-CREATE-VIEW-语句"><a href="#MySQL-CREATE-VIEW-语句" class="headerlink" title="MySQL CREATE VIEW 语句"></a>MySQL CREATE VIEW 语句</h3><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE] <span class="keyword">VIEW</span> [db_name.]view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  <span class="keyword">select</span><span class="operator">-</span>statement;</span><br></pre></td></tr></table></figure><br>首先，在 CREATE VIEW 关键字后指定要创建的视图的名称。</p><blockquote><p>视图的名称在数据库中是<strong>唯一的</strong>。因为同一数据库中的视图和表共享同一个命名空间，所以<code>视图的名称不能与现有表的名称相同</code>。</p></blockquote><p>第二，如果你想替换一个已经存在的视图，请使用 OR REPLACE 选项。如果该视图不存在，OR REPLACE 没有任何作用。<br>第三，为视图指定一个列的列表。默认情况下，视图的列来自 SELECT 语句的选择列表。但是，你可以通过在视图名称后面的括号中列出列，明确指定视图的列列表。<br>最后，指定一个定义该视图的 SELECT 语句。SELECT 语句可以从表或视图中查询数据。MySQL 允许你在 SELECT 语句中使用 ORDER BY 子句，但如果你拥有自己的 ORDER BY 子句的查询从视图中选择，则忽略它。</p><p><strong>Example</strong><br><strong>1. 创建一个简单的视图</strong><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/7c668958-e51d-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="orderDetails"><br>该语句使用 <code>CREATE VIEW</code> 语句来创建表示每个订单的总销售额的视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> salePerOrder <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        orderNumber, </span><br><span class="line">        <span class="built_in">SUM</span>(quantityOrdered <span class="operator">*</span> priceEach) total</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        orderDetails</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">by</span> orderNumber</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><br>如果您使用 <code>SHOW TABLE</code> 命令查看所有表 <code>classicmodels</code> 数据库，您将看到视图 <code>salesPerOrder</code> 显示在列表中：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/a0c2c474-e51d-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="show tables"><br>这是因为视图和表共享与前面提到的相同的命名空间。<br>要知道哪个对象是视图或表，您可以使用 <code>SHOW FULL TABLES;</code> 命令如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/b9f5949e-e51d-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="show full tables"><br>这 <code>table_type</code> 结果集中的列指定对象的类型：视图或表（基表）。</p><p><strong>2. 基于一个视图创建视图</strong><br>MySQL 允许您基于另一个视图来创建视图。<br>例如，您可以创建一个名为 <code>bigSalesOrder</code> 的视图基于 <code>salesPerOrder</code>，查看以显示总计大于 <code>60000</code> 的每个销售订单如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> bigSalesOrder <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        orderNumber, </span><br><span class="line">        ROUND(total,<span class="number">2</span>) <span class="keyword">as</span> total</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        salePerOrder</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        total <span class="operator">&gt;</span> <span class="number">60000</span>;</span><br></pre></td></tr></table></figure><br>现在，您可以查询 <code>bigSalesOrder</code> 视图如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    orderNumber, </span><br><span class="line">    total</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    bigSalesOrder;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/139fd5ae-e51e-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="show table"></p><p><strong>3. 使用连接创建视图</strong><br>还可以使用 <code>CREATE VIEW</code> 语句来创建基于多个表的视图的语句。 它使用 <code>INNER JOIN</code> 连接表的子句。<br><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> customerOrders <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    orderNumber,</span><br><span class="line">    customerName,</span><br><span class="line">    <span class="built_in">SUM</span>(quantityOrdered <span class="operator">*</span> priceEach) total</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orderDetails</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> orders o <span class="keyword">USING</span> (orderNumber)</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> customers <span class="keyword">USING</span> (customerNumber)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> orderNumber;</span><br></pre></td></tr></table></figure><br>该语句从 <code>customerOrders</code> 视图中选择数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customerOrders </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><br><strong>Result</strong><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/32dc78f0-e51e-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="部分输出"></p><p><strong>4. 使用子查询创建视图</strong><br>下面的例子使用 <code>CREATE VIEW</code> 语句来创建一个视图，其 SELECT 语句使用子查询。该视图包含买入价格高于所有产品平均价格的产品：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> aboveAvgProducts <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        productCode, </span><br><span class="line">        productName, </span><br><span class="line">        buyPrice</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        products</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        buyPrice <span class="operator">&gt;</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> </span><br><span class="line">                <span class="built_in">AVG</span>(buyPrice)</span><br><span class="line">            <span class="keyword">FROM</span></span><br><span class="line">                products)</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> buyPrice <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p><p>从上述 <code>aboveAvgProducts</code> 中查询到的数据，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> aboveAvgProducts;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/57556e9e-e51e-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="部分结果"></p><p><strong>5. 使用显式视图列创建视图</strong><br>这个语句使用 <code>CREATE VIEW</code> 语句在 <code>customers</code> 和 <code>orders</code> 表的基础上创建一个新的视图，并带有明确的视图列：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customerOrderStats (</span><br><span class="line">   customerName, </span><br><span class="line">   orderCount</span><br><span class="line">) </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        customerName, </span><br><span class="line">        <span class="built_in">COUNT</span>(orderNumber)</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        customers</span><br><span class="line">            <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">        orders <span class="keyword">USING</span> (customerNumber)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> customerName;</span><br></pre></td></tr></table></figure><br>该查询返回 <code>customerOrderStats</code> 视图中的数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customerName,</span><br><span class="line">    orderCount</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    customerOrderStats</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">    orderCount, </span><br><span class="line">    customerName;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/7a317ff2-e51e-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="显式视图"></p><p><strong>Example</strong><br>描述<br>张三最近对 <code>MySQL</code> 数据库感兴趣，决定要好好学习数据库，但…学习的道路总是充满艰辛的。张三今天遇到了一个难题，他左思右想、苦思冥想、茶不思饭不想也没能想出解决办法。情况是这样的，现有 <code>teachers</code> 表中记录着离职的教师信息，<code>id</code> 的值即是教师离职的顺序，在 <code>courses</code> 表中记录着每个教师教授的课程信息，关联 id 为 <code>teacher_id</code>。<strong>现在知道教师是以国籍来分团队的，且每个团队的成立至少有 <code>3</code> 个教师，若是一个教师团队集体离职，则在 <code>teachers</code> 表中信息记录为连续且国籍相同，现在需要统计每一个教师团队集体离职会有多少学生需要等待新的教师，结果按团队国籍排序</strong>。他需要创建一个视图 <code>v_courses_teachers</code> 来解决这个问题，同学们快来帮帮张三小伙子吧 ~<br><a href="https://www.lintcode.com/learn/130/664">resource</a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_courses_teachers <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> tt.country,<span class="built_in">sum</span>(tt.student_count) student_count</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> t1.id,t1.country,c.student_count</span><br><span class="line">        <span class="keyword">from</span> teachers t1 <span class="keyword">left</span> <span class="keyword">join</span> teachers t2</span><br><span class="line">        <span class="keyword">on</span> t1.id<span class="operator">=</span>t2.id<span class="number">-1</span> <span class="keyword">or</span> t1.id<span class="operator">=</span>t2.id<span class="operator">+</span><span class="number">1</span></span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">join</span> courses c <span class="keyword">on</span> t1.id<span class="operator">=</span>c.teacher_id</span><br><span class="line">        <span class="keyword">where</span> t1.country<span class="operator">=</span>t2.country</span><br><span class="line">    ) tt</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> tt.country</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h2 id="视图处理"><a href="#视图处理" class="headerlink" title="视图处理"></a>视图处理</h2><h3 id="视图处理算法"><a href="#视图处理算法" class="headerlink" title="视图处理算法"></a>视图处理算法</h3><p><code>CREATE VIEW</code> 和 <code>ALTER VIEW</code> 语句有一个可选的子句：<code>ALGORITHM</code>。<br>它决定了 MySQL 如何处理一个视图，可以取三个值之一：<code>MERGE</code>、<code>TEMPTABLE</code> 和 <code>UNDEFINE</code>。</p><p><strong>Gammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE][ALGORITHM <span class="operator">=</span> &#123;<span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE <span class="operator">|</span> UNDEFINED&#125;] <span class="keyword">VIEW</span> </span><br><span class="line">   view_name[(column_list)]</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">   <span class="keyword">select</span><span class="operator">-</span>statement;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ALGORITHM <span class="operator">=</span> &#123;<span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE <span class="operator">|</span> UNDEFINED&#125;] <span class="keyword">VIEW</span> </span><br><span class="line">   view_name[(column_list)] </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">   <span class="keyword">select</span><span class="operator">-</span>statement;</span><br></pre></td></tr></table></figure><h4 id="MERGE"><a href="#MERGE" class="headerlink" title="MERGE"></a>MERGE</h4><p>当你从 MERGE 视图查询时，MySQL 处理以下步骤。</p><ul><li>首先，将输入查询与视图定义中的 SELECT 语句合并为一个单一的查询。</li><li>然后，执行合并后的查询以返回结果集。<blockquote><p>注意，将输入查询和视图定义的 SELECT 语句合并成一个单一的查询被称为<strong>视图解析</strong>。</p></blockquote></li></ul><p><strong>Example</strong><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/c0649378-e51f-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="cumstomers"></p><p>下面的 SQL 语句以 <code>customers</code> 表为基础，用 <code>MERGE</code> 算法创建了一个名为 <code>contactPersons</code> 的视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ALGORITHM<span class="operator">=</span><span class="keyword">MERGE</span> <span class="keyword">VIEW</span> contactPersons(</span><br><span class="line">    customerName, </span><br><span class="line">    firstName, </span><br><span class="line">    lastName, </span><br><span class="line">    phone</span><br><span class="line">) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customerName, </span><br><span class="line">    contactFirstName, </span><br><span class="line">    contactLastName, </span><br><span class="line">    phone</span><br><span class="line"><span class="keyword">FROM</span> customers;</span><br></pre></td></tr></table></figure><br>如果你使用以下 SQL 语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> contactPersons</span><br><span class="line"><span class="keyword">WHERE</span> customerName <span class="keyword">LIKE</span> <span class="string">&#x27;%Co%&#x27;</span>;</span><br></pre></td></tr></table></figure><br>MySQL 执行了这些步骤：</p><ol><li>将视图名称 <code>contactPersons</code> 转换为表名称 <code>customers</code>。</li><li>将 <code>(*)</code> 转换为列表列名 <code>customerName, firstName, lastName, phone</code>，对应于 <code>customerName, contactFirstName, contactLastName, phone</code>。</li><li>添加 WHERE 子句。<br>由此产生的语句：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    customerName, </span><br><span class="line">    contactFirstName, </span><br><span class="line">    contactLastName, </span><br><span class="line">    phone</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    customers</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    customerName <span class="keyword">LIKE</span> <span class="string">&#x27;%Co%&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="TEMTABLE"><a href="#TEMTABLE" class="headerlink" title="TEMTABLE"></a>TEMTABLE</h4><p>当你向 TEMPTABLE 视图发出查询时，MySQL 会执行这些步骤。</p><ul><li>首先，创建一个临时表来存储视图定义中的 SELECT 的结果。</li><li>然后，针对该临时表执行输入查询。<br>因为 MySQL 必须创建临时表来存储结果集，并将数据从基表移到临时表，所以 TEMPTABLE 算法的效率比 MERGE 算法低。<blockquote><p>注意，<code>TEMPTABLE 视图不能被更新</code>。</p></blockquote></li></ul><h4 id="UNDEFINED"><a href="#UNDEFINED" class="headerlink" title="UNDEFINED"></a>UNDEFINED</h4><p>当你创建视图而不指定 ALGORITHM 子句或明确指定 <code>ALGORITHM=UNDEFINED</code> 时，UNDEFINED 是默认算法。<br>此外，当你用 <code>ALGORITHM=MERGE</code> 创建视图，而 MySQL 只能用临时表处理该视图时，MySQL 会自动将算法设置为 UNDEFINED 并产生一个警告。<br>UNDEFINED 允许 MySQL 选择 MERGE 或 TEMPTABLE。而如果可能的话，MySQL 更倾向于 MERGE 而不是 TEMPTABLE，因为 MERGE 通常比 TEMPTABLE 更有效。</p><h2 id="MySQL的ALTER-VIEW语句"><a href="#MySQL的ALTER-VIEW语句" class="headerlink" title="MySQL的ALTER VIEW语句"></a>MySQL的ALTER VIEW语句</h2><p><strong>Gammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span></span><br><span class="line">    [ALGORITHM <span class="operator">=</span> &#123;UNDEFINED <span class="operator">|</span> <span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE&#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> select_statement;</span><br></pre></td></tr></table></figure><br><strong>Example</strong><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/3d63ee72-e521-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="example"></p><p>首先，创建一个基于 <code>orders</code> 和 <code>orderdetails</code> 表的视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> salesOrders <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        orderNumber, </span><br><span class="line">        productCode,</span><br><span class="line">        quantityOrdered, </span><br><span class="line">        priceEach, </span><br><span class="line">        status</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        orders</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">        orderDetails <span class="keyword">USING</span> (orderNumber);</span><br></pre></td></tr></table></figure></p><p>第二，从视图 <code>salesOrders</code> 中查询数据：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> salesorders;</span><br></pre></td></tr></table></figure></p><p>第三，使用 ALTER VIEW 语句将视图的处理算法从 UNDEFINED 改为 MERGE，并在视图中添加 <code>customerNumber</code> 列：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> </span><br><span class="line">    ALGORITHM<span class="operator">=</span><span class="keyword">MERGE</span></span><br><span class="line"><span class="keyword">VIEW</span> salesOrders <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        orderNumber, </span><br><span class="line">        customerNumber,</span><br><span class="line">        productCode,</span><br><span class="line">        quantityOrdered, </span><br><span class="line">        priceEach, </span><br><span class="line">        status</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        orders</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">        orderDetails <span class="keyword">USING</span> (orderNumber); </span><br></pre></td></tr></table></figure></p><p>最后结果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> salesorders;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/78be659c-e521-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"></p><h2 id="可更新视图"><a href="#可更新视图" class="headerlink" title="可更新视图"></a>可更新视图</h2><h3 id="可更新视图介绍"><a href="#可更新视图介绍" class="headerlink" title="可更新视图介绍"></a>可更新视图介绍</h3><p>在 MySQL中，视图不仅是可查询的，也是可更新的。这意味着你可以使用 INSERT 或 UPDATE 语句，通过可更新的视图插入或更新基础表的行。此外，你可以使用 DELETE 语句通过视图删除基础表的行。<br>然而，要创建一个可更新的视图，定义该视图的 SELECT 语句不能包含以下任何元素。</p><ul><li>聚合函数，如 MIN，MAX，SUM，AVG 和 COUNT   <code>不能和Where使用</code></li><li>DISTINCT</li><li>GROUP BY 子句</li><li>HAVING 子句</li><li>UNION 或 UNION ALL 子句</li><li>外连接</li><li>在 SELECT 子句或 WHERE 子句中的子查询，指的是在 FROM 子句中出现的表</li><li>在 FROM 子句中对不可更新的视图的引用</li><li>只引用字面意义的值</li><li>对基表的任何列的多次引用<br>如果你用 TEMPTABLE 算法创建一个视图，你不能更新这个视图。</li></ul><p><strong>Example</strong><br>首先，我们根据样本数据库中的 <code>office</code> 表创建一个名为 <code>officeInfo</code> 的视图。该视图引用了 <code>office</code> 表中的三个列：<code>officeCode</code>，<code>phone</code> 和 <code>city</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> officeInfo</span><br><span class="line"> <span class="keyword">AS</span> </span><br><span class="line">   <span class="keyword">SELECT</span> officeCode, phone, city</span><br><span class="line">   <span class="keyword">FROM</span> offices;</span><br></pre></td></tr></table></figure><br>接下来，我们可以使用以下 SQL 语句从 <code>officeInfo</code> 视图中查询数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    officeInfo;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/e9ca9f28-e529-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="officeInfo"></p><p>然后，我们可以通过 <code>officeInfo</code> 视图，使用下面的 UPDATE 语句，改变带有 <code>officeCode=4</code> 的办公室的电话号码。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> officeInfo </span><br><span class="line"><span class="keyword">SET</span> </span><br><span class="line">    phone <span class="operator">=</span> <span class="string">&#x27;+33 14 723 5555&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    officeCode <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><br>最后，为了验证这个变化，我们可以通过执行以下查询，从 <code>officeInfo</code> 视图中查询数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    officeInfo</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    officeCode <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/238cd44c-e52a-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"></p><h3 id="可更新视图操作"><a href="#可更新视图操作" class="headerlink" title="可更新视图操作"></a>可更新视图操作</h3><p>可以通过查询 <code>information_schema</code> 数据库中 <code>views</code> 表的 <code>is_updatable</code> 列来检查数据库中的视图是否是可更新的。<br>下面的查询从 <code>classicmodels</code> 数据库中获取所有视图，并显示哪些视图是可更新的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    table_name, </span><br><span class="line">    is_updatable</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.views</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    table_schema <span class="operator">=</span> <span class="string">&#x27;classicmodels&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/8ebf7f74-e52c-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="可更新查询"></p><h4 id="通过视图删除行"><a href="#通过视图删除行" class="headerlink" title="通过视图删除行"></a>通过视图删除行</h4><p>首先，我们创建一个名为 <code>items</code> 的表，在 <code>items</code> 表中插入一些行，并创建一个视图，其中包含价格大于 <code>700</code> 的项目。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- create a new table named items --</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> items (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">11</span> , <span class="number">2</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- insert data into the items table --</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> items(name,price) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;Laptop&#x27;</span>,<span class="number">700.56</span>),(<span class="string">&#x27;Desktop&#x27;</span>,<span class="number">699.99</span>),(<span class="string">&#x27;iPad&#x27;</span>,<span class="number">700.50</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- create a view based on items table --</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> LuxuryItems <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        <span class="operator">*</span></span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        items</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        price <span class="operator">&gt;</span> <span class="number">700</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">-- query data from the LuxuryItems view --</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    LuxuryItems;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/b5b05392-e52c-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="items"></p><p>其次，我们使用 DELETE 语句来删除一条 id 值为 3 的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> LuxuryItems </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    id <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><br>MySQL 返回一个消息说，有 1 行受到影响。</p><p>第三，让我们再次通过视图检查数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    LuxuryItems;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/2e146c74-e52d-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="LuxuryItems"></p><p>第四，我们还可以从基础表项中查询数据，以验证 DELETE 语句是否真的删除了该行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    items;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/39bc3fde-e52d-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="items"><br>正如你所看到的，id 为 3 的行被从基础表中删除了。</p><h3 id="WITH-CHECK-OPTION子句"><a href="#WITH-CHECK-OPTION子句" class="headerlink" title="WITH CHECK OPTION子句"></a>WITH CHECK OPTION子句</h3><p>创建一个视图来显示一个表的部分数据。然而，一个简单的视图是可更新的，因此有可能更新那些通过视图不可见的数据。这种更新会使视图不一致。为了确保视图的一致性，在创建或修改视图时，要使用 <code>WITH CHECK OPTION</code> 子句。<br><code>WITH CHECK OPTION</code> 是 CREATE VIEW 语句的一个可选子句。<code>WITH CHECK OPTION</code> 防止视图更新或插入通过它不可见的行。换句话说，每当你通过视图更新或插入基表的行时，MySQL 确保插入或更新操作符合视图的定义。</p><p><strong>Gammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span>] view_name </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">  select_statement</span><br><span class="line">  <span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><br>注意你把分号（;）放在 <code>WITH CHECK OPTION</code> 子句的末尾，而不是放在定义视图的 SELECT 语句的末尾。</p><p><strong>Example</strong><br>首先，基于雇员表创建一个名为 <code>vps</code> 的视图，以显示工作头衔为副总裁的雇员，例如销售副总裁、营销副总裁 (VP e.g., VP Sales, VP Marketing）。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> vps <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        employeeNumber,</span><br><span class="line">        lastname,</span><br><span class="line">        firstname,</span><br><span class="line">        jobtitle,</span><br><span class="line">        extension,</span><br><span class="line">        email,</span><br><span class="line">        officeCode,</span><br><span class="line">        reportsTo</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        jobTitle <span class="keyword">LIKE</span> <span class="string">&#x27;%VP%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><p>接下来，使用以下 SELECT 语句从 <code>vps</code> 视图中查询数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> vps;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/0ece18c2-e53e-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="vps"></p><p>因为 <code>vps</code> 是一个简单的视图，它是可更新的。<br>然后，通过 <code>vps</code> 视图向 <code>employees</code> 表插入一条记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vps(</span><br><span class="line">    employeeNumber,</span><br><span class="line">    firstName,</span><br><span class="line">    lastName,</span><br><span class="line">    jobTitle,</span><br><span class="line">    extension,</span><br><span class="line">    email,</span><br><span class="line">    officeCode,</span><br><span class="line">    reportsTo</span><br><span class="line">) </span><br><span class="line"><span class="keyword">VALUES</span>(</span><br><span class="line">    <span class="number">1703</span>,</span><br><span class="line">    <span class="string">&#x27;Lily&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Bush&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;IT Manager&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x9111&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lilybush@classicmodelcars.com&#x27;</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">1002</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>请注意，通过 <code>vps</code> 视图，新创建的员工是不可见的，因为她的工作头衔是 IT 经理，而这不是副总裁（ 因为她的职位是 <code>IT Manager</code>，这不是 <code>VP</code> ）。你可以用下面的 SELECT 语句来验证。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">   <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">   employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">   employeeNumber <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/3b9f36a6-e53e-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="employees"><br>这可能不是我们想要的，因为我们只想通过 <code>vps</code> 视图公开副总裁的员工，而不是其他员工。<br>为了确保视图的一致性，使用户只能显示或更新通过视图可见的数据，你可以在创建或修改视图时使用 <code>WITH CHECK OPTION</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> vps <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        employeeNumber,</span><br><span class="line">        lastName,</span><br><span class="line">        firstName,</span><br><span class="line">        jobTitle,</span><br><span class="line">        extension,</span><br><span class="line">        email,</span><br><span class="line">        officeCode,</span><br><span class="line">        reportsTo</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        jobTitle <span class="keyword">LIKE</span> <span class="string">&#x27;%VP%&#x27;</span> </span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><p>注意 <code>CREATE OR REPLACE</code> 语句末尾的 <code>WITH CHECK OPTION</code>。<br>之后，通过 <code>vps</code> 视图向 <code>employees</code> 表插入一条记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1704</span>,<span class="string">&#x27;John&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="string">&#x27;IT Staff&#x27;</span>,<span class="string">&#x27;x9112&#x27;</span>,<span class="string">&#x27;johnsmith@classicmodelcars.com&#x27;</span>,<span class="number">1</span>,<span class="number">1703</span>);</span><br></pre></td></tr></table></figure><br>这一次，MySQL 拒绝了这个插入，并发出了以下错误信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: <span class="number">1369.</span> <span class="keyword">CHECK</span> OPTION failed <span class="string">&#x27;classicmodels.vps&#x27;</span></span><br></pre></td></tr></table></figure><br>最后，通过 <code>vps</code> 视图在 <code>employees</code> 表中插入一个职位名称为 <code>SVP Marketing</code> 的雇员，看看是否允许。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> vps(employeeNumber,firstname,lastname,jobtitle,extension,email,officeCode,reportsTo)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1704</span>,<span class="string">&#x27;John&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>,<span class="string">&#x27;SVP Marketing&#x27;</span>,<span class="string">&#x27;x9112&#x27;</span>,<span class="string">&#x27;johnsmith@classicmodelcars.com&#x27;</span>,<span class="number">1</span>,<span class="number">1076</span>);</span><br></pre></td></tr></table></figure><br>MySQL 发出消息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">rows</span>(s) affected.</span><br></pre></td></tr></table></figure><br>你可以通过查询 <code>vps</code> 视图的数据来验证插入：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> vps;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/9ac85acc-e53e-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="vps_later"></p><h2 id="显示视图"><a href="#显示视图" class="headerlink" title="显示视图"></a>显示视图</h2><h3 id="show-full-tables"><a href="#show-full-tables" class="headerlink" title="show full tables"></a>show full tables</h3><p>要显示当前数据库中的所有视图，你可以使用 <code>SHOW FULL TABLES</code> 语句，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES </span><br><span class="line"><span class="keyword">WHERE</span> table_type <span class="operator">=</span> <span class="string">&#x27;VIEW&#x27;</span>;</span><br></pre></td></tr></table></figure><br>因为 <code>SHOW FULL TABLES</code> 语句同时返回表和视图，你需要添加一个 WHERE 子句来只获得视图。</p><p>如果你想显示另一个数据库的所有视图，你可以使用这个语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES</span><br><span class="line">[&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span> &#125; database_name]</span><br><span class="line"><span class="keyword">WHERE</span> table_type <span class="operator">=</span> <span class="string">&#x27;VIEW&#x27;</span>;</span><br></pre></td></tr></table></figure><br>在这个语句中，我们在 FROM 或 IN 子句后面指定了要显示视图的数据库名称。</p><p>下面的例子显示了来自 <code>sys</code> 数据库的所有视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">IN</span> sys </span><br><span class="line"><span class="keyword">WHERE</span> table_type<span class="operator">=</span><span class="string">&#x27;VIEW&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/6e4932f2-e546-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="sys_show_view"></p><p>如果你想根据一个模式获得一个视图，你可以使用 LIKE 子句，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES</span><br><span class="line">[&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span> &#125; database_name]</span><br><span class="line"><span class="keyword">LIKE</span> <span class="keyword">pattern</span>;</span><br></pre></td></tr></table></figure></p><p>这个例子使用 LIKE 子句从 <code>sys</code> 数据库中找到所有视图，其名称以 <code>waits</code> 开头：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES </span><br><span class="line"><span class="keyword">FROM</span> sys</span><br><span class="line"><span class="keyword">LIKE</span> <span class="string">&#x27;waits%&#x27;</span>;</span><br></pre></td></tr></table></figure></p><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/c89dfd6e-e546-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="sys_show_view_waits"></p><blockquote><p>注意，如果你对一个视图没有权限，它将不会显示在 <code>SHOW TABLES</code> 语句的输出中。</p></blockquote><h3 id="使用-INFORMATION-SCHEMA-数据库"><a href="#使用-INFORMATION-SCHEMA-数据库" class="headerlink" title="使用 INFORMATION_SCHEMA 数据库"></a>使用 INFORMATION_SCHEMA 数据库</h3><p><code>INFORMATION_SCHEMA</code> 数据库提供对 MySQL 数据库元数据的访问，如数据库的名称、表、列的数据类型或权限。<br><code>INFORMATION_SCHEMA</code> 有时被称为数据库字典或系统目录。<br>为了显示一个数据库的视图，你使用 <code>INFORMATION_SCHEMA</code> 中的表。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> information_schema.tables;</span><br></pre></td></tr></table></figure></p><p>这里是部分输出：<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/b406b968-e546-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="outcome"><br>在这个输出中，我们只对 <code>table_schema</code>，<code>table_name</code>，<code>table_type</code> 三个列感兴趣。</p><ul><li><code>table_schema</code> 列存储了视图（或表）的模式或数据库。</li><li><code>table_name</code> 列存储了视图（或表）的名称。</li><li><code>table_type</code> 列存储了表的类型。<code>BASE TABLE</code> 代表表，<code>VIEW</code> 代表视图，或者 <code>SYSTEM VIEW</code> 代表 <code>INFORMATION_SCHEMA</code> 表。</li></ul><p>查询 <code>classicmodels</code> 数据库中的所有视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    table_name view_name</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    information_schema.tables </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    table_type   <span class="operator">=</span> <span class="string">&#x27;VIEW&#x27;</span> <span class="keyword">AND</span> </span><br><span class="line">    table_schema <span class="operator">=</span> <span class="string">&#x27;classicmodels&#x27;</span>;</span><br></pre></td></tr></table></figure></p><p>要根据一个模式找到一个特定的视图，你可以使用 <code>table_name</code> 列。例如，这个查询找到所有名称以 <code>customer</code> 开头的视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    table_name view_name</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    information_schema.tables </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    table_type   <span class="operator">=</span> <span class="string">&#x27;VIEW&#x27;</span> <span class="keyword">AND</span> </span><br><span class="line">    table_schema <span class="operator">=</span> <span class="string">&#x27;classicmodels&#x27;</span> <span class="keyword">AND</span></span><br><span class="line">    table_name   <span class="keyword">LIKE</span> <span class="string">&#x27;customer%&#x27;</span>;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/0e943aea-e547-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="examplr of information"></p><h2 id="RENAME-VIEW"><a href="#RENAME-VIEW" class="headerlink" title="RENAME VIEW"></a>RENAME VIEW</h2><p>因为视图和表共享同一个命名空间，所以可以使用 <code>RENAME TABLE</code> 语句来改变视图的名称。<br><strong>Gammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> original_view_name </span><br><span class="line"><span class="keyword">TO</span> new_view_name;</span><br></pre></td></tr></table></figure><br>在这个语法中：</p><ul><li>首先，在 <code>RENAME TABLE</code> 关键字后面指定要重命名的视图的名称。</li><li>然后，在 <code>TO</code> 关键字后面指定视图的新名称。<br>另一种间接重命名视图的方法是使用 <code>DROP VIEW</code> 和 <code>CREATE VIEW</code> 语句的序列。</li><li>首先，使用 <code>SHOW CREATE VIEW</code> 语句来复制视图的 DDL。</li><li>其次，使用 <code>DROP VIEW</code> 语句放弃该视图。</li><li>最后，用你在步骤 1 中复制的 DDL 创建一个新的视图，并将其重新命名。<br>通过使用一连串的 <code>DROP</code> 和 <code>CREATE VIEW</code> 语句，你可以将一个视图从一个数据库转移到另一个数据库。</li></ul><p><strong>Example</strong></p><ol><li><p>使用 RENAME TABLE 语句重命名一个视图<br>首先，为创建一个名为 <code>productLineSales</code> 的新视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productLineSales <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    productLine, </span><br><span class="line">    <span class="built_in">SUM</span>(quantityOrdered) totalQtyOrdered</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    productLines</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    products <span class="keyword">USING</span> (productLine)</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    orderdetails <span class="keyword">USING</span> (productCode)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> productLine;</span><br></pre></td></tr></table></figure><p>其次，将视图 <code>productLineSales</code> 重命名为 <code>productLineQtySales</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">TABLE</span> productLineSales </span><br><span class="line"><span class="keyword">TO</span> productLineQtySales;</span><br></pre></td></tr></table></figure><p>第三，使用 <code>SHOW FULL TABLES</code> 来检查视图是否已经成功重命名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> TABLES <span class="keyword">WHERE</span> table_type <span class="operator">=</span> <span class="string">&#x27;VIEW&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 DROP VIEW 和 CREATE VIEW 序列重命名一个视图<br>假设你想把视图 <code>productLineQtySales</code> 的名字改为 <code>categorySales</code>。</p></li></ol><p>首先，使用 <code>SHOW CREATE VIEW</code> 来获取视图的 DDL：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productLineQtySales;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/b32e5cf4-e54a-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="show create view"></p><p>第二，删除视图 <code>productLineQtySales</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> productLineQtySales;</span><br></pre></td></tr></table></figure></p><p>第三，在 DDL 中改变视图的名称并执行它：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> categorySales <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    productLine, </span><br><span class="line">    <span class="built_in">SUM</span>(quantityOrdered) totalQtyOrdered</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    productLines</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    products <span class="keyword">USING</span> (productLine)</span><br><span class="line">        <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">    orderDetails <span class="keyword">USING</span> (productCode)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> productLine;</span><br></pre></td></tr></table></figure></p><h2 id="DROP-VIEW"><a href="#DROP-VIEW" class="headerlink" title="DROP VIEW"></a>DROP VIEW</h2><p><strong>Gammar</strong><br><code>DROP VIEW</code> 语句从数据库中删除了一个视图。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name;</span><br></pre></td></tr></table></figure><br>在这个语法中，你在 <code>DROP VIEW</code> 关键字后面指定要删除的视图的名称。<br><code>IF EXISTS</code> 选项只有在视图存在的情况下才会有条件地删除该视图。<br>要一次删除多个视图，可以使用下面的语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] view_name1 [,view_name2]...;</span><br></pre></td></tr></table></figure><br>在这种语法中，如果在 <code>DROP VIEW</code> 子句后指定的任何视图不存在，<code>DROP VIEW</code> 语句就会失败，并且不会删除任何视图。</p><p>如果你使用 <code>IF EXISTS</code> 选项，并且有一些视图不存在，<code>DROP VIEW</code> 语句会为每个不存在的视图生成一个 Note。</p><p><strong>Example</strong></p><ol><li>删除一个视图</li></ol><p>在 <code>customers</code> 和 <code>payments</code> 表的基础上创建了一个名为 <code>customerPayments</code> 的视图：<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/8325b410-e54c-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="customers"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> customerPayments </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        customerName, </span><br><span class="line">        <span class="built_in">SUM</span>(amount) payment</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        customers</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> payments </span><br><span class="line">        <span class="keyword">USING</span> (customerNumber)</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">        customerName;</span><br></pre></td></tr></table></figure><p>这个例子使用 <code>DROP VIEW</code> 语句来删除 <code>customerPayments</code> 视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> customerPayments;</span><br></pre></td></tr></table></figure></p><ol><li>删除多个视图<br>这条语句在 <code>employees</code> 表和 <code>offices</code> 表的基础上创建了一个名为 <code>employeeOffices</code> 的视图：<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/15/cd4f6298-e54c-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="views"></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> employeeOffices <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        firstName, lastName, addressLine1, city</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees</span><br><span class="line">            <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">        offices <span class="keyword">USING</span> (officeCode);</span><br></pre></td></tr></table></figure><p>下面的语句使用 DROP VIEW 语句来删除两个视图 <code>employeeOffices</code> 和 <code>eOffices</code>：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> employeeOffices, eOffices;</span><br></pre></td></tr></table></figure><br>MySQL 发出以下错误：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: <span class="number">1051.</span> <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;classicmodels.eoffices&#x27;</span></span><br></pre></td></tr></table></figure><br>添加 <code>IF EXISTS</code> 选项：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> employeeOffices, eOffices;</span><br></pre></td></tr></table></figure><br>MySQL 发出警告：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> warning(s): <span class="number">1051</span> <span class="literal">Unknown</span> <span class="keyword">table</span> <span class="string">&#x27;classicmodels.eoffices&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="MySQL的视图的本地和级联"><a href="#MySQL的视图的本地和级联" class="headerlink" title="MySQL的视图的本地和级联"></a>MySQL的视图的本地和级联</h2><h3 id="检查本地和级联的范围"><a href="#检查本地和级联的范围" class="headerlink" title="检查本地和级联的范围"></a>检查本地和级联的范围</h3><p>当你用 <code>WITH CHECK OPTION</code> 子句创建一个视图，并对该视图发出 DML 语句，如 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code>，MySQL 会检查以确保被改变的行符合该视图的定义。<br>为了确定检查的范围，MySQL 提供了两个选项：<code>LOCAL</code> 和 <code>CASCADED</code>。<br>如果你没有在 <code>WITH CHECK OPTION</code> 子句中明确指定关键词，MySQL 默认使用 <code>CASCADED</code>。</p><h3 id="MySQL-WITH-CASCADED-CHECK-OPTION"><a href="#MySQL-WITH-CASCADED-CHECK-OPTION" class="headerlink" title="MySQL WITH CASCADED CHECK OPTION"></a>MySQL WITH CASCADED CHECK OPTION</h3><p>首先，创建一个名为 <code>t1</code> 的表，该表有一个数据类型为整数的列 <code>c</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t1 (</span><br><span class="line">    c <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br>接下来，在 <code>t1</code> 表的基础上创建一个视图 <code>v1</code>，<code>c</code> 列的数据大于 10。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v1 </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        c</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        t1</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        c <span class="operator">&gt;</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><br>因为我们没有指定 <code>WITH CHECK OPTION</code>，所以尽管下面的语句不符合 <code>v1</code> 视图的定义，但它还是可以工作。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v1(c) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>);</span><br></pre></td></tr></table></figure><br>然后，在 <code>v1</code> 视图的基础上，用 <code>WITH CASCADED CHECK OPTION</code> 子句创建一个视图 <code>v2</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v2 </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> c <span class="keyword">FROM</span> v1 </span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CASCADED</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><br>现在，通过 <code>v2</code> 视图在 <code>t1</code> 表中插入一条数值为 5 的记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v2(c) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>);</span><br></pre></td></tr></table></figure><br>MySQL 发布了以下错误信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: <span class="number">1369.</span> <span class="keyword">CHECK</span> OPTION failed <span class="string">&#x27;classicmodels.v2&#x27;</span></span><br></pre></td></tr></table></figure><br>它没有发现不符合 <code>v2</code> 视图定义的新行。<br>之后，在 <code>v2</code> 的基础上创建一个名为 <code>v3</code> 的新视图。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> v3 </span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> c</span><br><span class="line">    <span class="keyword">FROM</span> v2</span><br><span class="line">    <span class="keyword">WHERE</span> c <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure><br>通过 <code>v3</code> 视图在 <code>t1</code> 表中插入一条新行，值为 8。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v3(c) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>);</span><br></pre></td></tr></table></figure><br>MySQL 发布了以下错误信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Code: <span class="number">1369.</span> <span class="keyword">CHECK</span> OPTION failed <span class="string">&#x27;classicmodels.v3&#x27;</span></span><br></pre></td></tr></table></figure><br>尽管该行似乎符合 <code>v3</code> 视图的定义，但插入语句还是失败了。<br>因为视图 <code>v3</code> 依赖于 <code>v2</code> 视图，而 <code>v2</code> 视图有选项 <code>WITH CASCADED CHECK OPTION</code>。<br>然而，下面的插入语句可以工作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v3(c) <span class="keyword">VALUES</span> (<span class="number">30</span>);</span><br></pre></td></tr></table></figure></p><h3 id="MySQL-WITH-LOCAL-CHECK-OPTION"><a href="#MySQL-WITH-LOCAL-CHECK-OPTION" class="headerlink" title="MySQL WITH LOCAL CHECK OPTION"></a>MySQL WITH LOCAL CHECK OPTION</h3><p>首先，将 <code>v2</code> 视图改为使用 <code>WITH LOCAL CHECK OPTION</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> v2 <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        c</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        v1 </span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">LOCAL</span> <span class="keyword">CHECK</span> OPTION;</span><br></pre></td></tr></table></figure><br>第二，插入与我们在上面的例子中相同的行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v2(c) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>);</span><br></pre></td></tr></table></figure><br>它成功了。</p><p>因为 <code>v2</code> 视图没有任何规则。视图 <code>v2</code> 是依赖于 <code>v1</code> 视图的。然而，<code>v1</code> 视图没有指定检查选项，因此，MySQL 跳过了对 <code>v1</code> 视图中规则的检查。</p><p>注意，在用 <code>WITH CASCADED CHECK OPTION</code> 创建的 <code>v2</code> 视图中，这个语句失败了。</p><p>第三，通过 <code>v3</code> 视图向 <code>t1</code> 表插入同一行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> v3(c) <span class="keyword">VALUES</span> (<span class="number">8</span>);</span><br></pre></td></tr></table></figure><br>在这种情况下，它成功了，因为 MySQL 没有检查 <code>v1</code> 视图的规则，因为 <code>v2</code> 视图的 <code>WITH LOCAL CHECK OPTION</code>。<br>另外，注意到在 <code>v2</code> 创建的 <code>WITH CASCADED CHECK OPTION</code> 的例子中，这个语句失败了。<br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/18/2cffef90-e7a6-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="local check option"></p><h2 id="管理视图"><a href="#管理视图" class="headerlink" title="管理视图"></a>管理视图</h2><h3 id="显示视图定义"><a href="#显示视图定义" class="headerlink" title="显示视图定义"></a>显示视图定义</h3><p><strong>Gammar</strong><br>MySQL 提供 <code>SHOW CREATE VIEW</code> 语句，显示视图的定义。<br>下面是 <code>SHOW CREATE VIEW</code> 语句的语法。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> [database_name].[view_ name];</span><br></pre></td></tr></table></figure></p><p>要显示一个视图的定义，你需要在 <code>SHOW CREATE VIEW</code> 子句后指定其名称。<br>我们创建一个基于 <code>employees</code> 表的简单视图，显示公司的组织结构。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> organization <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        CONCAT(E.lastname, E.firstname) <span class="keyword">AS</span> Employee,</span><br><span class="line">        CONCAT(M.lastname, M.firstname) <span class="keyword">AS</span> Manager</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees <span class="keyword">AS</span> E</span><br><span class="line">            <span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">        employees <span class="keyword">AS</span> M <span class="keyword">ON</span> M.employeeNumber <span class="operator">=</span> E.ReportsTo</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Manager;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/18/163227be-e7a7-11eb-83d2-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="employees"><br>要显示视图的定义，你可以使用 <code>SHOW CREATE VIEW</code> 语句，如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> organization;</span><br></pre></td></tr></table></figure></p><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>MySQL 提供两个语句，允许你修改现有的视图：<code>ALTER VIEW</code> 和 <code>CREATE OR REPLACE VIEW</code></p><h4 id="使用-ALTER-VIEW-语句修改视图"><a href="#使用-ALTER-VIEW-语句修改视图" class="headerlink" title="使用 ALTER VIEW 语句修改视图"></a>使用 ALTER VIEW 语句修改视图</h4><p>一旦创建了一个视图，就可以使用 <code>ALTER VIEW</code> 语句来修改它。<br><code>ALTER VIEW</code> 语句的语法与 <code>CREATE VIEW</code> 语句相似，只是 <code>CREATE</code> 关键字被 <code>ALTER</code> 关键字所代替。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span></span><br><span class="line"> [ALGORITHM <span class="operator">=</span>  &#123;<span class="keyword">MERGE</span> <span class="operator">|</span> TEMPTABLE <span class="operator">|</span> UNDEFINED&#125;]</span><br><span class="line">  <span class="keyword">VIEW</span> [database_name].  [view_name]</span><br><span class="line">   <span class="keyword">AS</span> </span><br><span class="line"> [<span class="keyword">SELECT</span>  statement]</span><br></pre></td></tr></table></figure><br>下面的语句通过添加 <code>email</code> 列修改了 <code>organization</code> 视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> organization</span><br><span class="line">  <span class="keyword">AS</span> </span><br><span class="line">  <span class="keyword">SELECT</span> CONCAT(E.lastname,E.firstname) <span class="keyword">AS</span> Employee,</span><br><span class="line">         E.email <span class="keyword">AS</span>  employ<span class="operator">*</span><span class="operator">*</span>Example<span class="operator">*</span><span class="operator">*</span>mail,</span><br><span class="line">         CONCAT(M.lastname,M.firstname) <span class="keyword">AS</span> Manager</span><br><span class="line">  <span class="keyword">FROM</span> employees <span class="keyword">AS</span> E</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees <span class="keyword">AS</span> M</span><br><span class="line">    <span class="keyword">ON</span> M.employeeNumber <span class="operator">=</span> E.ReportsTo</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> Manager;</span><br></pre></td></tr></table></figure><br>为了验证这一变化，你可以从 <code>organization</code> 视图中查询数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Organization;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/18/64514948-e7a7-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="result"></p><h4 id="使用-CREATE-OR-REPLACE-VIEW-语句修改视图"><a href="#使用-CREATE-OR-REPLACE-VIEW-语句修改视图" class="headerlink" title="使用 CREATE OR REPLACE VIEW 语句修改视图"></a>使用 CREATE OR REPLACE VIEW 语句修改视图</h4><p>下面的语句使用 <code>CREATE OR REPLACE VIEW</code> 语法来创建基于 <code>employees</code> 表的 <code>contacts</code> 视图：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> contacts <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        firstName, lastName, extension, email</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/18/9881a7a8-e7a7-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="create or replace"></p><p>假设你想在 <code>contacts</code> 视图中添加 <code>jobtitle</code> 列，你只需使用以下语句即可：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> contacts <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        firstName, </span><br><span class="line">        lastName, </span><br><span class="line">        extension, </span><br><span class="line">        email, </span><br><span class="line">        jobtitle</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        employees;</span><br></pre></td></tr></table></figure><br><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/7/18/abb77e42-e7a7-11eb-9724-0242ac1d0002/%E5%9B%BE%E7%89%87.png" alt="create or replace"></p><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>一旦创建了一个视图，你可以使用 <code>DROP VIEW</code> 语句来删除它。下面说明了 <code>DROP VIEW</code> 语句的语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [IF <span class="keyword">EXISTS</span>] [database_name].[view_name]</span><br></pre></td></tr></table></figure><br><code>IF EXISTS</code> 是该语句的可选子句，它允许你检查视图是否存在。它可以帮助你避免删除一个不存在的视图的错误。</p><p>例如，如果你想删除组织视图，你可以使用 <code>DROP VIEW</code> 语句，如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> IF <span class="keyword">EXISTS</span> organization;</span><br></pre></td></tr></table></figure></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>存储过程（Stored Procedure）是一种在<code>数据库中存储复杂程序，以便外部程序调用的一种数据库对象。</code><br>存储过程是<code>为了完成特定功能的SQL语句集</code>，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。<code>存储过程思想上很简单，就是数据库 SQL 语言层面的代码封装与重用</code>。</p><p><strong> 优点</strong></p><ul><li>存储过程可封装，并隐藏复杂的商业逻辑。</li><li>存储过程可以回传值，并可以接受参数。</li><li>存储过程无法使用 SELECT 指令来运行，因为它是子程序，与查看表，数据表或用户定义函数不同。</li><li>存储过程可以用在数据检验，强制实行商业逻辑等。</li></ul><p><strong>缺点</strong></p><ul><li>存储过程，往往定制化于特定的数据库上，因为支持的编程语言不同。当切换到其他厂商的数据库系统时，需要重写原有的存储过程。</li><li>存储过程的性能调校与撰写，受限于各种数据库系统。</li></ul><h2 id="存储过程的创建和调用"><a href="#存储过程的创建和调用" class="headerlink" title="存储过程的创建和调用"></a>存储过程的创建和调用</h2><ul><li>存储过程就是具有名字的一段代码，用来完成一个特定的功能。</li><li>创建的存储过程保存在数据库的数据字典中。<h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><strong>Gammar</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> </span><br><span class="line">[DEFINER <span class="operator">=</span> &#123; <span class="keyword">user</span> <span class="operator">|</span> <span class="built_in">CURRENT_USER</span> &#125;] 　</span><br><span class="line"><span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]]) </span><br><span class="line">[characteristic ...] routine_body</span><br><span class="line"></span><br><span class="line">proc_parameter: </span><br><span class="line">[ <span class="keyword">IN</span> <span class="operator">|</span> <span class="keyword">OUT</span> <span class="operator">|</span> <span class="keyword">INOUT</span> ] param_name type</span><br><span class="line"></span><br><span class="line">characteristic: </span><br><span class="line">COMMENT <span class="string">&#x27;string&#x27;</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span> </span><br><span class="line"><span class="operator">|</span> [<span class="keyword">NOT</span>] <span class="keyword">DETERMINISTIC</span> </span><br><span class="line"><span class="operator">|</span> &#123; <span class="keyword">CONTAINS</span> <span class="keyword">SQL</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">NO</span> <span class="keyword">SQL</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">READS</span> <span class="keyword">SQL</span> DATA </span><br><span class="line"><span class="operator">|</span> <span class="keyword">MODIFIES</span> <span class="keyword">SQL</span> DATA &#125; </span><br><span class="line"><span class="operator">|</span> <span class="keyword">SQL</span> SECURITY &#123; DEFINER <span class="operator">|</span> INVOKER &#125;</span><br><span class="line"></span><br><span class="line">routine_body: 　　</span><br><span class="line">Valid <span class="keyword">SQL</span> routine statement </span><br><span class="line">[begin_label:] <span class="keyword">BEGIN</span> 　</span><br><span class="line">[statement_list] 　　　　</span><br><span class="line">…… </span><br><span class="line"><span class="keyword">END</span> [end_label]</span><br></pre></td></tr></table></figure></li></ul><p><strong>Example</strong><br>创建数据库，备份数据表用于示例操作：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqlcreate database db1; </span><br><span class="line">mysqluse db1; </span><br><span class="line">mysql<span class="keyword">create</span> <span class="keyword">table</span> PLAYERS <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TENNIS.PLAYERS;</span><br><span class="line">mysql<span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">MATCHES</span> <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TENNIS.MATCHES;</span><br></pre></td></tr></table></figure><br>下面是存储过程的例子，删除给定球员参加的所有比赛：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysqldelimiter $$　　#将语句的结束符号从分号;临时改为两个$$(可以是自定义) </span><br><span class="line">mysqlCREATE <span class="keyword">PROCEDURE</span> delete_matches(<span class="keyword">IN</span> p_playerno <span class="type">INTEGER</span>) </span><br><span class="line"><span class="operator">-</span><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="operator">-</span>　　<span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">MATCHES</span> </span><br><span class="line"><span class="operator">-</span>   <span class="keyword">WHERE</span> playerno <span class="operator">=</span> p_playerno; </span><br><span class="line"><span class="operator">-</span><span class="keyword">END</span>$$ </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec) </span><br><span class="line"></span><br><span class="line">mysqldelimiter;　　#将语句的结束符号恢复为分号</span><br></pre></td></tr></table></figure><br><strong>解析</strong>：默认情况下，存储过程和默认数据库相关联，如果想指定存储过程创建在某个特定的数据库下，那么在过程名前面加数据库名做前缀。 在定义过程时，使用 DELIMITER $$ 命令将语句的结束符号从分号 ; 临时改为两个 $$，使得过程体中使用的分号被直接传递到服务器，而不会被客户端（如mysql）解释。</p><p><strong>调用存储过程：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> sp_name[(传参)];</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysqlselect <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">MATCHES</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="operator">|</span> MATCHNO <span class="operator">|</span> TEAMNO <span class="operator">|</span> PLAYERNO <span class="operator">|</span> WON <span class="operator">|</span> LOST <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">7</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">57</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">27</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">112</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec) </span><br><span class="line"></span><br><span class="line">mysqlcall delete_matches(<span class="number">57</span>); </span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec) </span><br><span class="line">mysqlselect <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">MATCHES</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="operator">|</span> MATCHNO <span class="operator">|</span> TEAMNO <span class="operator">|</span> PLAYERNO <span class="operator">|</span> WON <span class="operator">|</span> LOST <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> <span class="number">8</span> <span class="operator">|</span> <span class="number">0</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">9</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">27</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="number">11</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">112</span> <span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> <span class="number">3</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------+----------+-----+------+ </span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>解析</strong>：在存储过程中设置了需要传参的变量p_playerno，调用存储过程的时候，通过传参将57赋值给p_playerno，然后进行存储过程里的SQL操作。</p><p><strong>存储过程体</strong></p><ul><li>存储过程体包含了在过程调用时必须执行的语句，例如：dml、ddl语句，if-then-else和while-do语句、声明变量的declare语句等</li><li>过程体格式：以begin开始，以end结束(可嵌套)<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">　　<span class="keyword">BEGIN</span></span><br><span class="line">　　　　<span class="keyword">BEGIN</span></span><br><span class="line">　　　　　　statements; </span><br><span class="line">　　　　<span class="keyword">END</span></span><br><span class="line">　　<span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--example</span></span><br><span class="line">label1: <span class="keyword">BEGIN</span> 　　</span><br><span class="line">label2: <span class="keyword">BEGIN</span> 　　　　</span><br><span class="line">label3: <span class="keyword">BEGIN</span> 　　　　　　</span><br><span class="line">statements; 　　　　</span><br><span class="line"><span class="keyword">END</span> label3 ; 　　</span><br><span class="line"><span class="keyword">END</span> label2; </span><br><span class="line"><span class="keyword">END</span> label1</span><br></pre></td></tr></table></figure>标签有两个作用：</li><li>1、增强代码的可读性</li><li>2、在某些语句(例如:leave和iterate语句)，需要用到标签</li></ul><h2 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h2><p>MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 存储过程名([[<span class="keyword">IN</span> <span class="operator">|</span><span class="keyword">OUT</span> <span class="operator">|</span><span class="keyword">INOUT</span> ] 参数名 数据类形...])</span><br></pre></td></tr></table></figure></p><ul><li>IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）</li><li>OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）</li><li>INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）<h3 id="in输入参数"><a href="#in输入参数" class="headerlink" title="in输入参数"></a>in输入参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysqldelimiter $$ </span><br><span class="line">mysql <span class="keyword">create</span> <span class="keyword">procedure</span> in_param(<span class="keyword">in</span> p_in <span class="type">int</span>) </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> p_in; </span><br><span class="line"><span class="keyword">set</span> p_in<span class="operator">=</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> P_in; </span><br><span class="line"><span class="keyword">end</span>$$ </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ; </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@p</span>_in<span class="operator">=</span><span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> in_param(<span class="variable">@p</span>_in); </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> p_in <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> P_in <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@p</span>_in; </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@p</span>_in <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+</span></span><br></pre></td></tr></table></figure>以上可以看出，p_in 在存储过程中被修改，但并不影响 <strong>@p_in</strong> 的值，因为前者为局部变量、后者为全局变量。<h3 id="out输出参数"><a href="#out输出参数" class="headerlink" title="out输出参数"></a>out输出参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> delimiter <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">create</span> <span class="keyword">procedure</span> out_param(<span class="keyword">out</span> p_out <span class="type">int</span>) </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> p_out; </span><br><span class="line"><span class="keyword">set</span> p_out<span class="operator">=</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> p_out; </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ; </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@p</span>_out<span class="operator">=</span><span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> out_param(<span class="variable">@p</span>_out); </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> p_out <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ 　　</span></span><br><span class="line">#因为<span class="keyword">out</span>是向调用者输出参数，不接收输入的参数，所以存储过程里的p_out为<span class="keyword">null</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> p_out <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------+ </span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@p</span>_out; </span><br><span class="line"><span class="operator">+</span><span class="comment">--------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@p</span>_out <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">--------+ 　　</span></span><br><span class="line">#调用了out_param存储过程，输出参数，改变了p_out变量的值</span><br></pre></td></tr></table></figure><h3 id="inout输入参数"><a href="#inout输入参数" class="headerlink" title="inout输入参数"></a>inout输入参数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> delimiter $$ </span><br><span class="line">mysql<span class="operator">&gt;</span>  <span class="keyword">create</span> <span class="keyword">procedure</span> inout_param(<span class="keyword">inout</span> p_inout <span class="type">int</span>) </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">select</span> p_inout; </span><br><span class="line"><span class="keyword">set</span> p_inout<span class="operator">=</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> p_inout; </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">$$ </span><br><span class="line">mysql<span class="operator">&gt;</span> delimiter ; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> <span class="variable">@p</span>_inout<span class="operator">=</span><span class="number">1</span>; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">call</span> inout_param(<span class="variable">@p</span>_inout); </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"><span class="operator">|</span> p_inout <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"><span class="operator">|</span> p_inout <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------+ </span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="variable">@p</span>_inout; </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@p</span>_inout <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------+ </span></span><br><span class="line">#调用了inout_param存储过程，接受了输入的参数，也输出参数，改变了变量</span><br></pre></td></tr></table></figure><strong>注意：</strong><br>1、如果过程没有参数，也必须在过程名后面写上小括号例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]]) ……</span><br></pre></td></tr></table></figure>2、确保参数的名字不等于列的名字，否则在过程体中，参数名被当做列名来处理<br><strong>建议：</strong></li><li>输入值使用in参数。</li><li>返回值使用out参数。</li><li>inout参数就尽量的少用。</li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义"></a>变量定义</h3><p>局部变量声明一定要放在存储过程体的开始：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> variable_name [,variable_name...] datatype [<span class="keyword">DEFAULT</span> <span class="keyword">value</span>];</span><br></pre></td></tr></table></figure><br>其中，datatype 为 MySQL 的数据类型，如: int, float, date,varchar(length)<br>例如:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> l_int <span class="type">int</span> unsigned <span class="keyword">default</span> <span class="number">4000000</span>; </span><br><span class="line"><span class="keyword">DECLARE</span> l_numeric number(<span class="number">8</span>,<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="number">9.95</span>; </span><br><span class="line"><span class="keyword">DECLARE</span> l_date <span class="type">date</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1999-12-31&#x27;</span>; </span><br><span class="line"><span class="keyword">DECLARE</span> l_datetime datetime <span class="keyword">DEFAULT</span> <span class="string">&#x27;1999-12-31 23:59:59&#x27;</span>; <span class="keyword">DECLARE</span> l_varchar <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;This will not be padded&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h3 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 变量名 <span class="operator">=</span> 表达式值 [,variable_name <span class="operator">=</span> expression ...]</span><br></pre></td></tr></table></figure><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Hello World&#x27;</span> <span class="keyword">into</span> <span class="variable">@x</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@x</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@x</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+ </span></span><br><span class="line"><span class="operator">|</span> Hello World <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@y</span><span class="operator">=</span><span class="string">&#x27;Goodbye Cruel World&#x27;</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@y</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@y</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+ </span></span><br><span class="line"><span class="operator">|</span> Goodbye Cruel World <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+ </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@z</span><span class="operator">=</span><span class="number">1</span><span class="operator">+</span><span class="number">2</span><span class="operator">+</span><span class="number">3</span>; </span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@z</span>; </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="variable">@z</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="number">6</span> <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">------+</span></span><br></pre></td></tr></table></figure><p>在存储过程中使用用户变量<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> GreetWorld( ) </span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="variable">@greeting</span>,<span class="string">&#x27; World&#x27;</span>); </span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@greeting</span><span class="operator">=</span><span class="string">&#x27;Hello&#x27;</span>; </span><br><span class="line"><span class="keyword">CALL</span> GreetWorld( ); </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> CONCAT(<span class="variable">@greeting</span>,<span class="string">&#x27; World&#x27;</span>) <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+ </span></span><br><span class="line"><span class="operator">|</span> Hello World <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+</span></span><br></pre></td></tr></table></figure><br>在存储过程间传递全局范围的用户变量<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p1()</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@last</span>_procedure<span class="operator">=</span><span class="string">&#x27;p1&#x27;</span>; </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> p2() </span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Last procedure was &#x27;</span>,<span class="variable">@last</span>_procedure); </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> p1( ); mysql<span class="operator">&gt;</span> <span class="keyword">CALL</span> p2( ); </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> CONCAT(<span class="string">&#x27;Last procedure was &#x27;</span>,<span class="variable">@last</span>_proc <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+ </span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Last</span> <span class="keyword">procedure</span> was p1 <span class="operator">|</span> </span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------------------------------+</span></span><br></pre></td></tr></table></figure><br><strong>注意:</strong></p><ul><li>1、用户变量名一般以@开头</li><li>2、滥用用户变量会导致程序难以理解及管理</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>MySQL 存储过程可使用两种风格的注释</p><ul><li>两个横杆<code>--</code>：该风格一般用于单行注释。</li><li><strong>c 风格</strong>： 一般用于多行注释。<h3 id="MySQL存储过程的调用"><a href="#MySQL存储过程的调用" class="headerlink" title="MySQL存储过程的调用"></a>MySQL存储过程的调用</h3>用call和你过程名以及一个括号，括号里面根据需要，加入参数，参数包括输入参数、输出参数、输入输出参数。具体的调用方法可以参看上面的例子。<h3 id="MySQL存储过程的查询"><a href="#MySQL存储过程的查询" class="headerlink" title="MySQL存储过程的查询"></a>MySQL存储过程的查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> mysql.proc <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;数据库名&#x27;</span>;</span><br><span class="line"><span class="comment">--或者</span></span><br><span class="line"><span class="keyword">select</span> routine_name <span class="keyword">from</span> information_schema.routines <span class="keyword">where</span> routine_schema<span class="operator">=</span><span class="string">&#x27;数据库名&#x27;</span>;</span><br><span class="line"><span class="comment">--或者</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">procedure</span> status <span class="keyword">where</span> db<span class="operator">=</span><span class="string">&#x27;数据库名&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> 数据库.存储过程名;</span><br></pre></td></tr></table></figure><p>就可以查看当前存储过程的详细</p><h3 id="MySQL存储过程的修改"><a href="#MySQL存储过程的修改" class="headerlink" title="MySQL存储过程的修改"></a>MySQL存储过程的修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span></span><br></pre></td></tr></table></figure><h3 id="MySQL存储过程的删除"><a href="#MySQL存储过程的删除" class="headerlink" title="MySQL存储过程的删除"></a>MySQL存储过程的删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span></span><br></pre></td></tr></table></figure><h3 id="MySQL存储过程的控制语句"><a href="#MySQL存储过程的控制语句" class="headerlink" title="MySQL存储过程的控制语句"></a>MySQL存储过程的控制语句</h3><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><p><code>内部的变量</code>在其<code>作用域范围内享有更高的优先权</code>，当执行到 end。变量时，内部变量消失，此时已经在其作用域外，变量不再可见了，应为在存储过程外再也不能找到这个申明的变量，但是你可以通过 out 参数或者将其值指派给会话变量来保存其值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc3() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> x1 <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">default</span> <span class="string">&#x27;outer&#x27;</span>; </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> x1 <span class="type">varchar</span>(<span class="number">5</span>) <span class="keyword">default</span> <span class="string">&#x27;inner&#x27;</span>; </span><br><span class="line"><span class="keyword">select</span> x1; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="keyword">select</span> x1; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><h5 id="if-then-else"><a href="#if-then-else" class="headerlink" title="if-then-else"></a>if-then-else</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc2(<span class="keyword">IN</span> <span class="keyword">parameter</span> <span class="type">int</span>) </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> var <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> var<span class="operator">=</span><span class="keyword">parameter</span><span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">if var<span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">17</span>);</span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line">if <span class="keyword">parameter</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> s1<span class="operator">=</span>s1<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">update</span> t <span class="keyword">set</span> s1<span class="operator">=</span>s1<span class="operator">+</span><span class="number">2</span>; </span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h5 id="case语句"><a href="#case语句" class="headerlink" title="case语句"></a>case语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc3 (<span class="keyword">in</span> <span class="keyword">parameter</span> <span class="type">int</span>) </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">declare</span> var <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> var<span class="operator">=</span><span class="keyword">parameter</span><span class="operator">+</span><span class="number">1</span>; </span><br><span class="line"><span class="keyword">case</span> var </span><br><span class="line"><span class="keyword">when</span> <span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">17</span>); </span><br><span class="line"><span class="keyword">when</span> <span class="number">1</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">18</span>); </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">19</span>); </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span>; <span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> DELIMITER ; </span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> var<span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(<span class="number">30</span>); </span><br><span class="line"><span class="keyword">when</span> var<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">when</span> var<span class="operator">&lt;</span><span class="number">0</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">end</span> <span class="keyword">case</span></span><br></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><h5 id="while-……-end-while"><a href="#while-……-end-while" class="headerlink" title="while …… end while"></a>while …… end while</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc4() </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> var <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> var<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">while var<span class="operator">&lt;</span><span class="number">6</span> do </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(var); </span><br><span class="line"><span class="keyword">set</span> var<span class="operator">=</span>var<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line"><span class="keyword">end</span> while; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">    <span class="comment">--循环体</span></span><br><span class="line">endwhile</span><br></pre></td></tr></table></figure><h5 id="repeat……end-repeat"><a href="#repeat……end-repeat" class="headerlink" title="repeat……end repeat"></a>repeat……end repeat</h5><p>它在执行操作后检查结果，而 while 则是执行前进行检查。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc5 () </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> v <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">repeat </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(v); </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span>v<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">until v<span class="operator">&gt;=</span><span class="number">5</span> </span><br><span class="line"><span class="keyword">end</span> repeat; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat</span><br><span class="line">    <span class="comment">--循环体</span></span><br><span class="line">until 循环条件  </span><br><span class="line"><span class="keyword">end</span> repeat;</span><br></pre></td></tr></table></figure><h5 id="loop-……-end-loop"><a href="#loop-……-end-loop" class="headerlink" title="loop …… end loop"></a>loop …… end loop</h5><p>loop 循环不需要初始条件，这点和 while 循环相似，同时和 repeat 循环一样不需要结束条件, leave 语句的意义是离开循环。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc6 () </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">declare</span> v <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">LOOP_LABLE:loop </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(v); </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span>v<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">if v <span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">then</span> </span><br><span class="line">leave LOOP_LABLE;</span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line"><span class="keyword">end</span> loop; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></p><h5 id="LABLES标号"><a href="#LABLES标号" class="headerlink" title="LABLES标号"></a>LABLES标号</h5><p>标号可以用在 begin repeat while 或者 loop 语句前，语句标号只能在合法的语句前面使用。可以跳出循环，使运行指令达到复合语句的最后一步。</p><h4 id="ITERATE迭代"><a href="#ITERATE迭代" class="headerlink" title="ITERATE迭代"></a>ITERATE迭代</h4><p>ITERATE 通过引用复合语句的标号,来从新开始复合语句:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER <span class="operator">/</span><span class="operator">/</span> </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> proc10 () </span><br><span class="line"><span class="keyword">begin</span> <span class="keyword">declare</span> v <span class="type">int</span>; </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span><span class="number">0</span>; </span><br><span class="line">LOOP_LABLE:loop </span><br><span class="line">if v<span class="operator">=</span><span class="number">3</span> <span class="keyword">then</span> </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span>v<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">ITERATE LOOP_LABLE; </span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">values</span>(v); </span><br><span class="line"><span class="keyword">set</span> v<span class="operator">=</span>v<span class="operator">+</span><span class="number">1</span>; </span><br><span class="line">if v<span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">then</span> </span><br><span class="line">leave LOOP_LABLE; </span><br><span class="line"><span class="keyword">end</span> if; </span><br><span class="line"><span class="keyword">end</span> loop; </span><br><span class="line"><span class="keyword">end</span>; </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> </span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><br><a href="https://www.lintcode.com/">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 视图 </tag>
            
            <tag> 触发器 </tag>
            
            <tag> MySQL锁 </tag>
            
            <tag> Mysq事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2022/04/28/SQL/"/>
      <url>/2022/04/28/SQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h2><blockquote><p>基本语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure><blockquote><p>使用<code>DISTINCT</code>使查询不重复<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `column_name`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br></pre></td></tr></table></figure></p><p><code>SELECT WHERE</code> 语句是筛选查询很重要的操作，<code>WHERE</code> 关键字后面加上条件可以过滤掉我们不需要的信息，对查询效率有着很大的提高。<br>在使用 <code>SELECT WHERE</code> 语句检索表数据时，需要给出检索的表名 (table_name)、检索的列名 (column_name) 和操作符 (operator) 。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name1`,`column_name2`…</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` operator `<span class="keyword">value</span>`;</span><br></pre></td></tr></table></figure><ul><li>column_name 对应指定列的名称，或者是多列，用逗号（ <code>,</code> ）分隔开</li><li>table_name 对应查询表的名称</li><li><p>operator 为操作符![[sql条件运算#比较运算符]]，常用的有等于 <code>=</code> 、小于 <code>&lt;</code> 、大于 <code>&gt;</code> 、不等于<code>&lt;&gt;</code> 或 <code>!=</code>。</p><blockquote><p>select后面要输出的信息如果是全部信息就跟*就可以， from后都是跟上来自哪个表 where就是后面跟的就是条件，记得非数字的加上单引号就可以了。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;Artificial Intelligence&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><blockquote><p><strong>INSERT INTO</strong> 语句用于向表中插入新记录，这边介绍两种编写形式，第一种形式无需指定列名，第二种形式需要指定列名。</p></blockquote><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><blockquote><p>第一种形式，<code>不需要指定列名</code>。只需提供插入的数据即可。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `table_name`</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...);</span><br></pre></td></tr></table></figure><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` <span class="keyword">VALUES</span> (<span class="number">13</span>,<span class="string">&#x27;Python&#x27;</span>,<span class="string">&#x27;400&#x27;</span>,<span class="string">&#x27;2021-05-23&#x27;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><blockquote><p>这种形式需要指定列名，语法如下：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `table_name`</span><br><span class="line">(`column1`, `column2`, `column3`,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1, value2, value3,...);</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `courses` (`name`, `student_count`, `created_at`, `teacher_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;Flash Sale&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;2018-01-01&#x27;</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><blockquote><p>基本语法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `table_name`</span><br><span class="line"><span class="keyword">SET</span> `column1`<span class="operator">=</span>value1,`column2`<span class="operator">=</span>value2,...</span><br><span class="line"><span class="keyword">WHERE</span> `some_column`<span class="operator">=</span>some_value;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `teachers`</span><br><span class="line"><span class="keyword">SET</span> `email` <span class="operator">=</span> <span class="string">&#x27;LinghuChong@lintcode.com&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Linghu Chong&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><blockquote><p>基本语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `some_column` <span class="operator">=</span> `some_value`;</span><br></pre></td></tr></table></figure><h4 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `courses` <span class="keyword">WHERE</span> `name`<span class="operator">=</span><span class="string">&#x27;Dynamic Programming&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> courses;</span><br></pre></td></tr></table></figure><h4 id="delete和truncate的区别"><a href="#delete和truncate的区别" class="headerlink" title="delete和truncate的区别"></a>delete和truncate的区别</h4><p>1、在功能上，truncate是清空一个表的内容，它相当于delete from table_name。<br>2、delete是dml操作，truncate是ddl操作；因此，用delete删除整个表的数据时，会产生大量的roolback，占用很多的rollback segments， 而truncate不会。<br>3、在内存中，用delete删除数据，表空间中其被删除数据的表占用的空间还在，便于以后的使用，另外它是“假相”的删除，相当于windows中用delete删除数据是把数据放到回收站中，还可以恢复，当然如果这个时候重新启动系统（OS或者RDBMS），它也就不能恢复了！<br>而用truncate清除数据，内存中表空间中其被删除数据的表占用的空间会被立即释放，相当于windows中用shift+delete删除数据，不能够恢复！<br>4、truncate 调整high water mark 而delete不；truncate之后，TABLE的HWM退回到 INITIAL和NEXT的位置（默认）delete 则不可以。<br>5、truncate 只能对TABLE，delete 可以是table,view,synonym。<br>6、TRUNCATE TABLE 的对象必须是本模式下的，或者有drop any table的权限 而 DELETE 则是对象必须是本模式下的，或被授予 DELETE ON SCHEMA.TABLE 或DELETE ANY TABLE的权限。<br>7、在外层中，truncate或者delete后，其占用的空间都将释放。<br>8、truncate和delete只删除数据，而drop则删除整个表（结构和数据）。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>1.TRUNCATE TABLE是非常快的<br>2.TRUNCATE之后的自增字段从头开始计数了，而DELETE的仍保留原来的最大数值 </p><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><h3 id="GROUP-BY-子句"><a href="#GROUP-BY-子句" class="headerlink" title="GROUP BY 子句"></a>GROUP BY 子句</h3><p>GROUP BY 函数就是 SQL 中用来实现分组的函数，其用于结合聚合函数，能根据给定数据列的每个成员对查询结果进行分组统计，最终得到一个分组汇总表。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name`, aggregate_function(`column_name`)</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` operator <span class="keyword">value</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `column_name`;</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>GROUP BY 单表实例<br><strong>可以看到我们教师表中的教师来自不同的国家，现需要统计不同国家教师的人数，并将结果按照不同国籍教师人数从小到大排列，请编写相应的 SQL 语句实现。</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `country`, <span class="built_in">COUNT</span>(`country`) <span class="keyword">AS</span> `teacher_count`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `country`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `teacher_count`, `country`;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `country`, <span class="built_in">COUNT</span>(`country`) <span class="keyword">AS</span> `teacher_count`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> `country`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> `teacher_count`, `country`;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> country <span class="operator">|</span> teacher_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> JP      <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> UK      <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> USA     <span class="operator">|</span>             <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> CN      <span class="operator">|</span>             <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+---------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>GROUP BY 多表实例<br>课程表的每节课程都有对应的一个教师负责授课，而每一个教师对应多门课程，现需要统计每个教师教授课程的学生总数，请编写相应的 SQL 语句实现。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.name <span class="keyword">AS</span> `teacher_name`, IFNULL(<span class="built_in">SUM</span>(C.student_count), <span class="number">0</span>) <span class="keyword">AS</span> `student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses` C</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `teachers` T <span class="keyword">ON</span> C.teacher_id <span class="operator">=</span> T.id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T.id;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> T.name <span class="keyword">AS</span> `teacher_name`, IFNULL(<span class="built_in">SUM</span>(C.student_count), <span class="number">0</span>) <span class="keyword">AS</span> `student_count`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses` C</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `teachers` T <span class="keyword">ON</span> C.teacher_id <span class="operator">=</span> T.id</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> T.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> teacher_name     <span class="operator">|</span> student_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> Southern Emperor <span class="operator">|</span>          <span class="number">1520</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Western Venom    <span class="operator">|</span>          <span class="number">4570</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Eastern Heretic  <span class="operator">|</span>          <span class="number">3200</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Northern Beggar  <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Linghu Chong     <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="HAVING-子句"><a href="#HAVING-子句" class="headerlink" title="HAVING 子句"></a>HAVING 子句</h3><p>使用<code>WHERE 条件子句时会发现其不能与聚合函数联合使用</code>，为解决这一点，SQL 中提供了 HAVING 子句。在使用时， HAVING 子句经常与 GROUP BY 联合使用，HAVING 子句就是对分组统计函数进行过滤的子句。<br>HAVING 子句对于 GROUP BY 子句设置条件的方式其实与 WHERE 子句与 SELECT 的方式类似，语法也相近，但 WHERE 子句搜索条件是在分组操作之前，而 HAVING 则是在之后。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   `column_name`, aggregate_function(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span>     `table_name` </span><br><span class="line"><span class="keyword">WHERE</span>    `column_name` operator <span class="keyword">value</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `column_name` </span><br><span class="line"><span class="keyword">HAVING</span>   aggregate_function(`column_name`) operator <span class="keyword">value</span>;</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>👇<strong>现需要结合教师表与课程表，统计不同教师所开课程的学生总数，对于没有任课的老师，学生总数计为 0 ，最后查询学生总数少于 3000 的教师姓名及学生总数 （别名为 <code>student_count</code> ），结果按照学生总数升序排列，如果学生总数相同，则按照教师姓名升序排列。</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `T`.`name` <span class="keyword">AS</span> `name`, IFNULL(<span class="built_in">SUM</span>(`C`.`student_count`),<span class="number">0</span>) <span class="keyword">AS</span> `student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses` `C` <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `teachers` `T`</span><br><span class="line"><span class="keyword">ON</span> `C`.`teacher_id` <span class="operator">=</span> `T`.`id`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `T`.`id`</span><br><span class="line"><span class="keyword">HAVING</span> `student_count` <span class="operator">&lt;</span> <span class="number">3000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_count`, `name`;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `T`.`name`, IFNULL(<span class="built_in">SUM</span>(`C`.`student_count`),<span class="number">0</span>) <span class="keyword">AS</span> `student_count`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses` `C` </span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> `teachers` `T` <span class="keyword">ON</span> `C`.`teacher_id` <span class="operator">=</span> `T`.`id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> `T`.`id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">HAVING</span> `student_count` <span class="operator">&lt;</span> <span class="number">3000</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> `student_count`, `name`;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> name             <span class="operator">|</span> student_count <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="operator">|</span> Linghu Chong     <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Northern Beggar  <span class="operator">|</span>             <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Southern Emperor <span class="operator">|</span>          <span class="number">1520</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+---------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>请编写 SQL 语句，从 <code>teachers</code> 表中，筛选出同一国家的教师平均年龄大于所有教师平均年龄的国家，并获取这些国家的所有教师信息<a href="https://www.lintcode.com/learn/61/97">lintcode</a>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> teachers</span><br><span class="line"><span class="keyword">WHERE</span> country </span><br><span class="line"><span class="keyword">in</span></span><br><span class="line">(<span class="keyword">SELECT</span> country <span class="keyword">FROM</span> teachers <span class="keyword">group</span> <span class="keyword">by</span> country <span class="keyword">having</span> <span class="built_in">avg</span>(age) <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> teachers));</span><br></pre></td></tr></table></figure></p><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="SELECT-语句中的子查询"><a href="#SELECT-语句中的子查询" class="headerlink" title="SELECT 语句中的子查询"></a>SELECT 语句中的子查询</h3><p><strong>当一个查询是另一个查询的条件时</strong>，称之为子查询。即在查询语句中的 WHERE 条件子句中，又嵌套了另一个查询语句。因此，子查询本质上就是一个完整的 SELECT 语句，它可以使一个 SELECT、INSERT INTO 语句、DELETE 语句或 UPDATE 语句嵌套在另一子查询中。子查询的输出可以包括一个单独的值（单行子查询）、几行值（多行子查询）、或者多列数据（多列子查询）。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name(s)`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` OPERATOR (</span><br><span class="line">    <span class="keyword">SELECT</span> `column_name(s)`</span><br><span class="line">    <span class="keyword">FROM</span> `table_name`</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><blockquote><p>以及，SQL语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。</p></blockquote><p><strong>Example</strong><br><strong>小明想了解 Western Venom 老师所教的所有课程的所有信息，现请你来帮助他查询相关信息。</strong><br>首先需要在 <code>teachers</code> 表中查询姓名为 Western Venom 的老师，再根据其教师 id 在 <code>courses</code> 表中选择对应教师 id 的所有课程信息。因此，这里我们首先需要通过嵌套子查询到的信息为教师 id，父查询则为全部课程信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Western Venom&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Western Venom&#x27;</span></span><br><span class="line"><span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+----------------+-------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                    <span class="operator">|</span> student_count  <span class="operator">|</span> created_at  <span class="operator">|</span> teacher_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+----------------+-------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span>            <span class="number">135</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span>  <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Django                  <span class="operator">|</span>             <span class="number">78</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span>  <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Artificial Intelligence <span class="operator">|</span>            <span class="number">166</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span>  <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span>             <span class="number">78</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span>  <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+----------------+-------------+------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="INSERT-语句中的子查询"><a href="#INSERT-语句中的子查询" class="headerlink" title="INSERT 语句中的子查询"></a>INSERT 语句中的子查询</h3><p>对于 INSERT 语句中的子查询来说，首先是使用子查询的 SELECT 语句找到需要插入的数据，之后将返回的数据插入到另一个表中。在子查询中所选择的数据可以用任何字符、日期或数字函数修改。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `table_name`</span><br><span class="line"><span class="keyword">SELECT</span> `colnum_name(s)`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line">[ <span class="keyword">WHERE</span> <span class="keyword">VALUE</span> OPERATOR ]</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：INSERT 语句中的子查询其实是将一个表中查询到的数据“复制”到另一个表中，由于主键具有唯一性，如果需要仅在单张表中使用 INSERT 子查询，只能在无主键的单张表中进行操作，否则，需要有两张表（如只一张表，则需新建一张表）。<code>不用values</code></p></blockquote><p><strong>Example</strong><br><strong>小明在整理数据时发现教师表未备份，为了及时完善数据的备份，现在需要将教师表 <code>teachers</code> 中的全部信息复制到相同表结构的备份表 <code>teachers_bkp</code> 中，请使用相关 SQL 语句完成教师表的备份。</strong></p><p>首先我们需要查询教师表 <code>teachers</code> 中的所有信息，再将查询到的数据插入到备份表 <code>teachers_bkp</code> 中。即，查询教师表 <code>teachers</code> 中的所有信息为插入备份表 <code>teachers_bkp</code> 中的条件。<br>因此，这里我们首先需要通过嵌套子查询到的信息为教师表 <code>teachers</code> 中的所有信息，而整个语句是为了插入数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `teachers_bkp`</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `teachers`;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `teachers_bkp`;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name             <span class="operator">|</span> email                     <span class="operator">|</span> age <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Northern Beggar  <span class="operator">|</span> northern.beggar<span class="variable">@qq</span>.com    <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Western Venom    <span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Southern Emperor <span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Linghu Chong     <span class="operator">|</span> <span class="keyword">NULL</span>                      <span class="operator">|</span>  <span class="number">18</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------------------+---------------------------+-----+---------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="UPDATE-语句中的子查询"><a href="#UPDATE-语句中的子查询" class="headerlink" title="UPDATE 语句中的子查询"></a>UPDATE 语句中的子查询</h3><p>对于 UPDATE 语句，首先通过 SELECT 语句查询需要更新的信息，再使用 UPDATE 语句对信息进行更新。当通过 UPDATE 语句使用子查询时，能够实现表中单个列或多个列的数据更新。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `table_name` </span><br><span class="line"><span class="keyword">SET</span> `column_name` <span class="operator">=</span> `new_value`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` OPERATOR </span><br><span class="line">   (<span class="keyword">SELECT</span> `column_name`</span><br><span class="line">   <span class="keyword">FROM</span> `table_name`</span><br><span class="line">   [<span class="keyword">WHERE</span>] )</span><br></pre></td></tr></table></figure><br>注意：在 UPDATE 语句的子查询中，子查询 SELECT 语句所用的表和 UPDATE 语句所要更改的表<strong>不能</strong>是同一张表！</p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>UPDATE 语句中的子查询</strong> 的用法。</p><p><strong>学校教务处排课时发现教师 Western Venom 创建的课程有误，现紧急需要将该教师创建的课程名称修改为 Java，请你使用相关的 SQL 语句完成。</strong></p><p>首先我们需要在教师表 <code>teachers</code> 中查询到教师 Western Venom ，再根据其教师 id 在课程表 <code>course</code> 中查询该教师 id 所创建的课程名称 <code>name</code> ，最后将查询到的课程更改为 Java。</p><p>因此，这里我们首先需要通过嵌套子查询到的信息为教师 id，而整个语句是为了更新数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> `courses`</span><br><span class="line"><span class="keyword">SET</span> `name` <span class="operator">=</span> <span class="string">&#x27;Java&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line">    <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Western Venom&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                    <span class="operator">|</span> student_count <span class="operator">|</span> created_at <span class="operator">|</span> teacher_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Advanced Algorithms     <span class="operator">|</span>           <span class="number">880</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Java                    <span class="operator">|</span>          <span class="number">1350</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Java                    <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Web                     <span class="operator">|</span>           <span class="number">340</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Big Data                <span class="operator">|</span>           <span class="number">700</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-11</span> <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Java                    <span class="operator">|</span>          <span class="number">1660</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> Java                    <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">8</span> <span class="operator">|</span> Data Analysis           <span class="operator">|</span>           <span class="number">500</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-07</span><span class="number">-12</span> <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> Object Oriented Design  <span class="operator">|</span>           <span class="number">300</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">12</span> <span class="operator">|</span> <span class="keyword">Dynamic</span> Programming     <span class="operator">|</span>          <span class="number">2000</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-08</span><span class="number">-18</span> <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="DELETE-语句中的子查询"><a href="#DELETE-语句中的子查询" class="headerlink" title="DELETE 语句中的子查询"></a>DELETE 语句中的子查询</h3><p>对于 DELETE 语句，首先通过 SELECT 语句查询需要删除的数据，再使用 DELETE 语句对数据进行删除。当通过 DELETE 语句使用子查询时，可以完成复杂的数据删除控制。</p><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` OPERATOR </span><br><span class="line">   (<span class="keyword">SELECT</span> `column_name`</span><br><span class="line">   <span class="keyword">FROM</span> `table_name`  </span><br><span class="line">   [<span class="keyword">WHERE</span>] )</span><br></pre></td></tr></table></figure><br>注意：在 DELETE 语句的子查询中，子查询 SELECT 语句所用的表和 DELETE 语句所要更改的表<strong>不能</strong>是同一张表！</p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>DELETE 语句中的子查询</strong> 的用法。</p><p><strong>现需要删除课程表中所有教师年龄小于 21 岁（不包括 21 岁）的课程，请你使用相关的 SQL 语句实现。</strong></p><p>首先我们需要在教师表 <code>teachers</code> 中查询到教师年龄小于 21 岁的老师的教师 id ，再根据其教师 id 在课程表 <code>course</code> 中查询该教师 id 所创建的课程并将课程删除。</p><p>因此，这里我们首先需要通过嵌套子查询到的信息为符合条件的教师 id，而整个语句是为了删除数据。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `age` <span class="operator">&lt;</span> <span class="number">21</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> courses;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                    <span class="operator">|</span> student_count <span class="operator">|</span> created_at <span class="operator">|</span> teacher_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Advanced Algorithms     <span class="operator">|</span>           <span class="number">880</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span>          <span class="number">1350</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Django                  <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Web                     <span class="operator">|</span>           <span class="number">340</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Artificial Intelligence <span class="operator">|</span>          <span class="number">1660</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10</span> <span class="operator">|</span> Object Oriented Design  <span class="operator">|</span>           <span class="number">300</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-08</span><span class="number">-08</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="内联视图子查询"><a href="#内联视图子查询" class="headerlink" title="内联视图子查询"></a>内联视图子查询</h3><p>内联视图子查询实际上就是将查询的结果集作为一个查询表，继续进行查询操作。</p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>内联视图子查询</strong> 的用法。<br><strong>现需要查询国籍为美国（USA），且年龄最大的教师，请使用内联视图子查询实现。</strong><br>本题将从教师表中查询到的美国教师作为内联表，再使用 WHERE 子句进行查询操作。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `country` <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">) `T`</span><br><span class="line"><span class="keyword">WHERE</span> `age` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`age`)</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `country` <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> ) `T`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `age` <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`age`)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name          <span class="operator">|</span> email                 <span class="operator">|</span> age <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+-----------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Western Venom <span class="operator">|</span> western.venom<span class="variable">@163</span>.com <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------+----------</span></span><br></pre></td></tr></table></figure></p><h3 id="IN-操作符的多行子查询"><a href="#IN-操作符的多行子查询" class="headerlink" title="IN 操作符的多行子查询"></a>IN 操作符的多行子查询</h3><blockquote><p>使用 IN 操作符进行子查询，其实是将子查询返回的集合和外层查询得到的集合进行<strong>交集</strong>运算，这个结果可以是零个值，也可以是多个值。由此，最后可以查询出与列表中任意一个值匹配的行。</p></blockquote><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` <span class="keyword">IN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> `column_name`</span><br><span class="line">    <span class="keyword">FROM</span> `table_name`</span><br><span class="line">    <span class="keyword">WHERE</span> `column_name` <span class="operator">=</span> <span class="keyword">VALUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>IN 操作符多行子查询</strong> 的用法。<br><strong>现需要查询国籍为美国（USA）的教师所开的所有课程，请使用 IN 操作符进行多行子查询。</strong><br>为了得到满足条件的课程名称，我们首先需要在教师表 <code>teachers</code> 中进行查询，查询数据为国籍 <code>country</code> 为美国（USA）的教师所对应的教师 id，再根据这个 id ，在课程表<code>courses</code> 中进行查询，最终得到所有的课程名称 <code>name</code>。<br>这里，我们首先需要通过嵌套子查询到的信息为国籍为美国的全部教师的教师 id，父查询为查询满足条件的课程名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`</span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `country` <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `name`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `teacher_id` <span class="keyword">IN</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `country` <span class="operator">=</span> <span class="string">&#x27;USA&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> name                    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Django                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Artificial Intelligence <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.12</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>NOT IN 操作符多行子查询</strong> 的用法。<br><strong>现需要查询年龄不大于20岁的教师所教的所有课程的课程名称，请使用 NOT IN 操作符进行多行子查询。</strong><br>对题目分析一下可以得到，子查询为在教师表 <code>teachers</code> 中查询年龄大于 20 岁的教师，父查询则为查询满足条件的课程名称。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`</span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `age` <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `name`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `teacher_id` <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `age` <span class="operator">&gt;</span> <span class="number">20</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> name                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="operator">|</span> Big Data            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Data Analysis       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure><h3 id="ANY-操作符的多行子查询"><a href="#ANY-操作符的多行子查询" class="headerlink" title="ANY 操作符的多行子查询"></a>ANY 操作符的多行子查询</h3><blockquote><p>操作符 ANY 属于逻辑运算符的一种，与 IN 运算符不同，<code>ANY 必须和其它的比较运算符共同使用</code>，其表示查询结果中的任意一个。</p></blockquote><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name(s)`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` OPERATOR</span><br><span class="line">   <span class="keyword">ANY</span>(<span class="keyword">SELECT</span> column_name</span><br><span class="line">   <span class="keyword">FROM</span> table_name)</span><br></pre></td></tr></table></figure></p><p>👇 我们可以通过下面的实例来感受一下 <strong>ANY 操作符多行子查询</strong> 的用法。</p><p><strong>现需要查询学生上课人数超过 “Eastern Heretic” 的任意一门课的学生人数的课程信息，请使用 ANY 操作符实现多行子查询。</strong><br>第一层的父查询为在课程表 <code>courses</code> 中查询满足条件的全部课程信息，这个条件由子查询来完成，即为，查询学生上课人数超过 ”Eastern Heretic“ 的任意一门课的学生人数。这一部分的子查询中需要结合 ANY 操作符实现。之后，再将子查询进行拆分，形成第二层的嵌套子查询。</p><p>第二层的父查询为在课程表 <code>courses</code> 中根据教师 id 查询学生上课人数， 其子查询为在教师表 <code>teachers</code> 中查找教师名 <code>name</code> 为 “Eastern Heretic” 的教师 id。</p><p>由于我们最终得到的课程信息中肯定不包含 “Eastern Heretic” 的课程，所以我们要在 WHERE 条件中再设置一项：不为 “Eastern Heretic” 所开的课程 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `student_count` <span class="operator">&gt;</span> <span class="keyword">ANY</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Eastern Heretic&#x27;</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> `teacher_id` <span class="operator">&lt;&gt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Eastern Heretic&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `student_count` <span class="operator">&gt;</span> <span class="keyword">ANY</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `student_count`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Eastern Heretic&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> )</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">AND</span> `teacher_id` <span class="operator">&lt;&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> `id`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Eastern Heretic&#x27;</span></span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                    <span class="operator">|</span> student_count <span class="operator">|</span> created_at <span class="operator">|</span> teacher_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Advanced Algorithms     <span class="operator">|</span>           <span class="number">880</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span>          <span class="number">1350</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Django                  <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Artificial Intelligence <span class="operator">|</span>          <span class="number">1660</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">7</span> <span class="operator">|</span> Java P6<span class="operator">+</span>                <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-19</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure><h3 id="ALL-操作符的多行子查询"><a href="#ALL-操作符的多行子查询" class="headerlink" title="ALL 操作符的多行子查询"></a>ALL 操作符的多行子查询</h3><blockquote><p>与 ANY 一样，操作符 ALL 也属于逻辑运算符的一种，且都须与其它的比较运算符共同使用，其表示查询结果中的所有。<br>在子查询中使用 ALL ，表示与子查询返回的所有值比较为真，则返回真。</p></blockquote><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `column_name(s)`</span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br><span class="line"><span class="keyword">WHERE</span> `column_name` OPERATOR</span><br><span class="line">   <span class="keyword">ALL</span>(<span class="keyword">SELECT</span> column_name</span><br><span class="line">   <span class="keyword">FROM</span> table_name)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>👇<strong>现需要查询学生人数超过 ”Western Venom“ 所有课程学生人数的课程信息，请使用 ALL 操作符实现多行子查询。</strong></p><p>第一层的父查询为在课程表 <code>courses</code> 中查询满足条件的全部课程信息，这个条件由子查询来完成，即为，查询学生人数超过 ”Western Venom“ 所有课程学生人数。这一部分的子查询中需要结合 ALL 操作符实现。之后，再将子查询进行拆分，形成第二层的嵌套子查询。</p><p>第二层的父查询为在课程表 <code>courses</code> 中根据教师 id 查询学生上课人数， 其子查询为在教师表 <code>teachers</code> 中查找教师名 <code>name</code> 为 ”Western Venom“ 的教师 id。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `student_count` <span class="operator">&gt;</span> <span class="keyword">ALL</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `teacher_id` <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> `id`</span><br><span class="line"><span class="keyword">FROM</span> `teachers`</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="operator">=</span> <span class="string">&#x27;Western Venom&#x27;</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Result</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT *</span><br><span class="line">    -&gt; FROM `courses`</span><br><span class="line">    -&gt; WHERE `student_count` &gt; ALL(</span><br><span class="line">    -&gt; SELECT `student_count`</span><br><span class="line">    -&gt; FROM `courses`</span><br><span class="line">    -&gt; WHERE `teacher_id` = (</span><br><span class="line">    -&gt; SELECT `id`</span><br><span class="line">    -&gt; FROM `teachers`</span><br><span class="line">    -&gt; WHERE `name` = &#x27;Western Venom&#x27;</span><br><span class="line">    -&gt; )</span><br><span class="line">    -&gt; );</span><br><span class="line">+----+---------------------+---------------+------------+------------+</span><br><span class="line">| id | name                | student_count | created_at | teacher_id |</span><br><span class="line">+----+---------------------+---------------+------------+------------+</span><br><span class="line">| 12 | Dynamic Programming |          2000 | 2018-08-18 |          1 |</span><br><span class="line">+----+---------------------+---------------+------------+------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br>请编写 SQL 语句，查询教师表 <code>teachers</code> 和课程表 <code>courses</code>，查询最年长的老师所开课程的学生数，最后返回学生数均超过这些课程的课程信息。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> courses</span><br><span class="line"><span class="keyword">WHERE</span> student_count <span class="operator">&gt;</span> <span class="keyword">all</span> (</span><br><span class="line">     <span class="keyword">SELECT</span> student_count <span class="keyword">FROM</span> courses</span><br><span class="line">     <span class="keyword">WHERE</span> teacher_id <span class="keyword">in</span></span><br><span class="line">     (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> teachers <span class="keyword">WHERE</span> age<span class="operator">=</span></span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="built_in">max</span>(age) <span class="keyword">FROM</span> teachers)</span><br><span class="line">     )</span><br><span class="line">);</span><br><span class="line">#可能不止一个，所以用<span class="keyword">in</span></span><br></pre></td></tr></table></figure></p><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><p>当是<strong>单行多列</strong>的子查询时，主查询语句的条件语句中引用子查询结果时可用单行比较符号（＝，&gt;，&lt;，&gt;=，&lt;=， &lt;&gt; 等）来进行比较；<br>当是<strong>多行多列</strong>子查询时，主查询语句的条件语句中引用子查询结果时必须用多行比较符号（IN，ANY，ALL 等）来进行比较。</p><p><strong>Example</strong><br>👇 我们可以通过下面的实例来感受一下 <strong>多列子查询</strong> 的用法。<br><strong>现需要找到每个国家年龄最大的教师，请编写 SQL 语句实现多列子查询</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, `age`, `country` </span><br><span class="line"><span class="keyword">FROM</span> `teachers` </span><br><span class="line"><span class="keyword">WHERE</span> (`country`, `age`) <span class="keyword">IN</span> ( </span><br><span class="line">        <span class="keyword">SELECT</span> `country`, <span class="built_in">MAX</span>(`age`) </span><br><span class="line">        <span class="keyword">FROM</span> `teachers` </span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> `country` </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `name`, `age`, `country`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">WHERE</span> (`country`, `age`) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">SELECT</span> `country`, <span class="built_in">MAX</span>(`age`)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">FROM</span> `teachers`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>         <span class="keyword">GROUP</span> <span class="keyword">BY</span> `country`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span> name             <span class="operator">|</span> age <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----+---------+</span></span><br><span class="line"><span class="operator">|</span> Eastern Heretic  <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span> UK      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Northern Beggar  <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Western Venom    <span class="operator">|</span>  <span class="number">28</span> <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Southern Emperor <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span> JP      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+-----+---------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong></p><blockquote><p>请编写 SQL 语句，连接 <code>courses</code> 与 <code>teachers</code> 表，统计不同国籍教师所开课程的学生总数，对于没有任课的老师，学生总人数计为 0 。最后查询教师国籍是 ‘U’ 开头且<strong>这个国籍的所有教师</strong>的学生总数在 <strong>2000</strong> 到 <strong>5000</strong> 之间（包括 2000 和 5000）的教师国籍及学生总数 （别名为 <code>student_count</code> ），结果按照学生总数降序排列，如果学生总数相同，则按照教师国籍升序排列。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.country,<span class="built_in">sum</span>(c.student_count) student_count</span><br><span class="line"><span class="keyword">FROM</span> courses c</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> teachers t</span><br><span class="line"><span class="keyword">on</span> c.teacher_id<span class="operator">=</span>t.id</span><br><span class="line"><span class="keyword">where</span> t.country <span class="keyword">like</span> <span class="string">&#x27;U%&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.country</span><br><span class="line"><span class="keyword">having</span> student_count <span class="keyword">between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> student_count <span class="keyword">desc</span>,t.country <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="算数函数"><a href="#算数函数" class="headerlink" title="算数函数"></a>算数函数</h2><h3 id="使用-AVG-函数求数值列的平均值"><a href="#使用-AVG-函数求数值列的平均值" class="headerlink" title="使用 AVG() 函数求数值列的平均值"></a>使用 AVG() 函数求数值列的平均值</h3><blockquote><p>平均函数 AVG() 是平均数 AVERAGE 的缩写，它用于求数值列的平均值。它可以用来返回所有列的平均值，也可以用来返回特定列和行的平均值。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`student_count`) <span class="keyword">AS</span> `average_student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure><br>其中 <code>AS</code> 关键字的作用是赋予 <code>AVG(student_count)</code> 计算结果列显示在列表中的别名。</p><h3 id="使用-MAX-函数返回指定列中的最大值"><a href="#使用-MAX-函数返回指定列中的最大值" class="headerlink" title="使用 MAX() 函数返回指定列中的最大值"></a>使用 MAX() 函数返回指定列中的最大值</h3><blockquote><p>最大值函数 MAX() 用于返回指定列中的最大值。它只有一个参数 <code>column_name</code> ，表示指定的列名。但是当参数 <code>column_name</code> 列中的数据均为空时，结果会返回 NULL。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`student_count`)</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h3 id="使用-MIN-函数返回指定列中的最小值"><a href="#使用-MIN-函数返回指定列中的最小值" class="headerlink" title="使用 MIN() 函数返回指定列中的最小值"></a>使用 MIN() 函数返回指定列中的最小值</h3><blockquote><p>MIN() 函数的功能与 MAX() 正好相反，它用于返回指定列中的最小值。但与 MAX() 相同的是，它也只有一个参数 <code>column_name</code> ，表示指定的列名，且当参数 <code>column_name</code> 列中的数据均为空时，结果会返回 NULL。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`student_count`)</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h3 id="使用SUM-函数统计数值列的总数"><a href="#使用SUM-函数统计数值列的总数" class="headerlink" title="使用SUM()函数统计数值列的总数"></a>使用SUM()函数统计数值列的总数</h3><blockquote><p>SUM() 函数用于统计数值列的总数并返回其值。它只有一个参数 <code>column_name</code> ，表示指定的列名，但是当参数 <code>column_name</code> 列中的数据均为空时，结果会返回 NULL。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`student_count`) <span class="keyword">AS</span> `all_student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h2 id="算数函数-1"><a href="#算数函数-1" class="headerlink" title="算数函数"></a>算数函数</h2><h2 id="使用ROUND-函数将数值四舍五入"><a href="#使用ROUND-函数将数值四舍五入" class="headerlink" title="使用ROUND() 函数将数值四舍五入"></a>使用ROUND() 函数将数值四舍五入</h2><blockquote><p><code>ROUND()</code> 函数用于把数值字段舍入为指定的小数位数。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(`column_name`, `decimals`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br></pre></td></tr></table></figure></p><ul><li>column_name 为要舍入的字段</li><li>decimals 规定要返回的小数位数</li><li>ROUND() 函数始终返回一个值。当 decimals 为正数时，column_name 四舍五入为 decimals 所指定的小数位数。当 decimals 为负数时，column_name 则按 decimals 所指定的在小数点的左边四舍五入。</li><li>特别的，如果 length 是负数且大于小数点前的数字个数，ROUND() 函数将返回 0</li></ul><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="built_in">AVG</span>(`student_count`), <span class="number">2</span>) <span class="keyword">AS</span> `avg_student_count`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h3 id="使用NULL-函数判断空值"><a href="#使用NULL-函数判断空值" class="headerlink" title="使用NULL()函数判断空值"></a>使用NULL()函数判断空值</h3><h4 id="ISNULL"><a href="#ISNULL" class="headerlink" title="ISNULL()"></a>ISNULL()</h4><blockquote><p><code>ISNULL()</code> 函数用于判断字段是否为 NULL，它只有一个参数 <code>column_name</code> 为列名，根据<code>column_name</code> 列中的字段是否为 NULL 值返回 0 或 1。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ISNULL(`column_name`)</span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure><br>其中：</p><ul><li>如果 <code>column_name</code> 列中的某个字段是 NULL 则返回 1，不是则返回 0</li></ul><h4 id="IFNULL"><a href="#IFNULL" class="headerlink" title="IFNULL()"></a>IFNULL()</h4><blockquote><p><code>IFNULL()</code> 函数也用于判断字段是否为NULL，但是与 <code>ISNULL()</code> 不同的是它接收两个参数，第一个参数 <code>column_name</code> 为列名，第二个参数 <code>value</code> 相当于备用值。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(`column_name`, `<span class="keyword">value</span>`)</span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure><br>其中：</p><ul><li>如果 <code>column_name</code> 列中的某个字段是 NULL 则返回 value 值，不是则返回对应内容。</li><li><code>COALESCE(column_name, value)</code> 函数也用于判断字段是否为NULL，其用法和 <code>IFNULL()</code> 相同。</li></ul><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, `email`, ISNULL(`email`), IFNULL(`email`, <span class="number">0</span>), <span class="built_in">COALESCE</span>(`email`, <span class="number">0</span>) </span><br><span class="line"><span class="keyword">FROM</span> `teachers`;</span><br></pre></td></tr></table></figure></p><h3 id="使用-COUNT-函数计数"><a href="#使用-COUNT-函数计数" class="headerlink" title="使用 COUNT() 函数计数"></a>使用 COUNT() 函数计数</h3><blockquote><p>COUNT() 函数<code>用于计数，可利用其确定表中行的数目或者符合特定条件的行的数目</code>。当COUNT() 中的参数不同时，其的用途也是有明显的不同的，主要可分为以下三种情况：<code>COUNT(column_name) 、COUNT( * ) 和 COUNT(DISTINCT column_name)</code>。</p></blockquote><h4 id="COUNT-column-name"><a href="#COUNT-column-name" class="headerlink" title="COUNT( column_name )"></a>COUNT( column_name )</h4><blockquote><p>COUNT(column_name) 函数会对指定列具有的行数进行计数，但是会除去值为 NULL 的行。该函数主要用于查看各列数据的数量情况，便于统计数据的缺失值。<br>假如出现某一列的数据全为 NULL 值的情况,使用COUNT( column_name ) 函数对该列进行计数，会返回 0。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT(*)"></a>COUNT(*)</h4><blockquote><p>COUNT(*) 函数会对表中行的数目进行计数，包括值为 NULL 所在行和重复项所在行。该函数主要用于查看表中的记录数。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`</span><br></pre></td></tr></table></figure></p><ul><li><p>COUNT(column_name) 中，如果 <code>column_name</code> 字段中的值为 NULL，则计数不会增加，而如果字段值为空字符串<code>&quot;&quot;</code>，则字段值会加 1</p></li><li><p>COUNT(<em>) 中，除非整个记录全为 NULL，则计数不会增加，如果存在某一个记录不为 NULL，或者为空字符串<code>&quot;&quot;</code>，计数值都会加 1。正常来说，表都会有主键，而主键不为空，所以 COUNT(</em>) 在有主键的表中等同于 COUNT(PRIMARY_KEY)，即查询有多少条记录。</p></li></ul><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> `number_of_course`</span><br><span class="line"><span class="keyword">FROM</span> `courses`</span><br><span class="line"><span class="keyword">WHERE</span> `created_at` <span class="keyword">BETWEEN</span> <span class="string">&#x27;2020-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2020-05-31&#x27;</span>;</span><br></pre></td></tr></table></figure></p><h4 id="COUNT-DISTINCT-column-name"><a href="#COUNT-DISTINCT-column-name" class="headerlink" title="COUNT(DISTINCT column_name)"></a>COUNT(DISTINCT column_name)</h4><blockquote><p>COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> `column_name`) </span><br><span class="line"><span class="keyword">FROM</span> `table_name`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> `teacher_id`) <span class="keyword">AS</span> `number_of_teacher`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><h3 id="使用-NOW-、-CURDATE-、CURTIME-获取当前时间"><a href="#使用-NOW-、-CURDATE-、CURTIME-获取当前时间" class="headerlink" title="使用 NOW() 、 CURDATE()、CURTIME() 获取当前时间"></a>使用 NOW() 、 CURDATE()、CURTIME() 获取当前时间</h3><blockquote><p>在 SQL 中，我们可以通过使用 <strong>NOW()</strong>、<strong>CURDATE()</strong>、<strong>CURTIME()</strong> 来获取当前的时间</p><ul><li><code>NOW()</code> 可以用来返回当前日期和时间 格式：YYYY-MM-DD hh:mm:ss</li><li><code>CURDATE()</code> 可以用来返回当前日期 格式：YYYY-MM-DD</li><li><code>CURTIME()</code> 可以用来返回当前时间 格式：hh:mm:ss</li></ul></blockquote><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `records`</span><br><span class="line"><span class="keyword">VALUES</span> (NOW(<span class="number">3</span>));</span><br></pre></td></tr></table></figure></p><h3 id="使用-DATE-、TIME-函数提取日期和时间"><a href="#使用-DATE-、TIME-函数提取日期和时间" class="headerlink" title="使用 DATE()、TIME() 函数提取日期和时间"></a>使用 DATE()、TIME() 函数提取日期和时间</h3><blockquote><p>DATE()、TIME()可以对现有时间进行提取。<br>使用 <code>DATE()</code>、<code>TIME()</code> 函数分别将 <code>&#39;2021-03-25 16:16:30&#39;</code> 这组数据中的日期于时间提取出来，并用 <code>date</code> 、<code>time</code> 作为结果集列名。</p></blockquote><p><strong>举例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span>(<span class="string">&#x27;2021-03-25 16:16:30&#x27;</span>) <span class="keyword">AS</span> `<span class="type">date</span>`,<span class="type">TIME</span>(<span class="string">&#x27;2021-03-25 16:16:30&#x27;</span>)  <span class="keyword">AS</span> `<span class="type">time</span>`;</span><br></pre></td></tr></table></figure></p><p><strong>实例</strong></p><blockquote><p>使用 <code>DATE()</code> 函数从课程表 <code>courses</code> 中查询课程的名字 <code>name</code> 和课程创建时间 <code>created_at</code>，从课程创建时间 <code>created_at</code> 中提取出创建课程的日期，并加以格式化，用 <code>created_date</code> 作为结果集列名。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, <span class="type">DATE</span>(`created_at`) <span class="keyword">AS</span> `created_date` <span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><p>使用 <code>DATE()</code> 、 <code>TIME()</code> 函数从课程表 <code>courses</code> 中查询课程的名字 <code>name</code> 和课程创建时间 <code>created_at</code>，从课程创建时间 <code>created_at</code> 中提取出创建课程的日期与时间，用 <code>created_date</code> 和 <code>created_time</code> 作为结果集列名。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, `created_at`, </span><br><span class="line">DATE_FORMAT(<span class="type">DATE</span>(`created_at`),&quot;%Y-%m-%d&quot;) <span class="keyword">AS</span> `created_date`,</span><br><span class="line">DATE_FORMAT(<span class="type">TIME</span>(`created_at`),&quot;%H:%i:%s&quot;) <span class="keyword">AS</span> `created_time` </span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure><h3 id="使用-EXTRACT-函数提取指定的时间信息"><a href="#使用-EXTRACT-函数提取指定的时间信息" class="headerlink" title="使用 EXTRACT() 函数提取指定的时间信息"></a>使用 EXTRACT() 函数提取指定的时间信息</h3><blockquote><p>EXTRACT() 函数用于返回日期/时间的单独部分，如 <code>YEAR</code> (年)、<code>MONTH</code> (月)、<code>DAY</code> (日)、<code>HOUR</code> (小时)、<code>MINUTE</code> (分钟)、 <code>SECOND</code> (秒)。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(unit <span class="keyword">FROM</span> <span class="type">date</span>)</span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">table</span>`</span><br></pre></td></tr></table></figure><br>其中：<br>_table_ 是表格名<br>_date_ 参数是合法的日期表达式。<br>_unit_ 参数是需要返回的时间部分，如 <code>YEAR</code> 、<code>MONTH</code> 、 <code>DAY</code> 、 <code>HOUR</code> 、<code>MINUTE</code> 、<code>SECOND</code> 等。</p><p><strong>实例</strong></p><blockquote><p>使用 EXTRACT() 函数，从课程表 <code>courses</code> 中查询课程的名字和创建时间的小时数，并为 <code>created_at</code> 起别名为 <code>created_hour</code> 。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, <span class="built_in">EXTRACT</span>(<span class="keyword">HOUR</span> <span class="keyword">FROM</span> `created_at`) <span class="keyword">AS</span> `created_hour`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure><h3 id="使用-DATE-FORMAT-格式化输出日期"><a href="#使用-DATE-FORMAT-格式化输出日期" class="headerlink" title="使用 DATE_FORMAT() 格式化输出日期"></a>使用 DATE_FORMAT() 格式化输出日期</h3><blockquote><p>使用 <code>DATE_FORMAT()</code> 方法来格式化输出 date/time。需要注意的是 <code>DATE_FORMAT()</code> 函数返回的是<strong>字符串</strong>格式。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(<span class="type">date</span>,format);</span><br></pre></td></tr></table></figure><br>其中<br><code>date</code> 一个有效日期。<br><code>format</code> 是 date/time 的输出格式。</p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(`created_at`, <span class="string">&#x27;%Y %m&#x27;</span>) <span class="keyword">AS</span> `DATE_FORMAT`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><blockquote><p>DATE_FORMAT(created_at,’%Y-%m-%d %H:%i:%s’)<br>%y - 年份的后两位（18） %Y - 年份（2018）<br>    %M - 月份的名称（April） %m - 月份数（4）<br>    %D - 序数号（13th） %d - 日期数（13）<br>    %H - 24进制 %h - 12进制<br>    %I - 变成12进制小时数？ %i - 分钟数<br>    %S 和 %s 似乎没有什么影响</p></blockquote><p>查询 <code>courses</code> 表，查询课程创建时间，按照 ’年-月-日 时:分:秒’ 的格式返回结果，返回列名显示为 <code>DATE_FORMAT</code>。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> date_format(created_at, &quot;%Y-%m-%d %H:%i:%s&quot;) DATE_FORMAT <span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">select</span> date_format(created_at, &quot;%Y-%m-%d %T&quot;) DATE_FORMAT <span class="keyword">from</span> courses</span><br></pre></td></tr></table></figure></p><h3 id="使用-DATE-ADD-增加时间"><a href="#使用-DATE-ADD-增加时间" class="headerlink" title="使用 DATE_ADD() 增加时间"></a>使用 DATE_ADD() 增加时间</h3><blockquote><p><code>DATE_ADD()</code> 函数是常用的时间函数之一，用于<strong>向日期添加指定的时间间隔</strong>。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(<span class="type">date</span>, <span class="type">INTERVAL</span> expr type)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><br>其中：<code>date</code> 指代希望被操作的有效日期，为起始日期</p><p><code>expr</code> 是希望添加的时间间隔的数值（expr 是一个字符串，对于负值的间隔，可以以 ”-“ 开头）</p><p><code>type</code> 是具体的数据类型，表示加上时间间隔的单位（可以是 MICROSECOND , SECOND , MINUTE , HOUR , DAY , WEEK , MONTH , QUARTER , YEAR 等）</p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`, DATE_ADD(`created_at`, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">YEAR</span>) <span class="keyword">AS</span> `new_created` </span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h3 id="使用-DATE-SUB-减少时间"><a href="#使用-DATE-SUB-减少时间" class="headerlink" title="使用 DATE_SUB() 减少时间"></a>使用 DATE_SUB() 减少时间</h3><blockquote><p>DATE_SUB() 函数是常用的时间函数之一，用于<strong>从日期减去指定的时间间隔</strong>。它与 <code>DATE_ADD()</code> 函数具有相似的用法。</p></blockquote><p><strong>语法</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_SUB(<span class="type">date</span>, <span class="type">INTERVAL</span> expr type)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure><br>其中：<code>date</code> 指代希望被操作的有效日期</p><p><code>expr</code> 是希望添加的时间间隔</p><p><code>type</code> 是具体的数据类型（可以是 MICROSECOND , SECOND , MINUTE , HOUR , DAY , WEEK , MONTH , QUARTER , YEAR 等）</p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `id`,`name`, DATE_SUB(`created_at`, <span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>) <span class="keyword">AS</span> `new_created`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure></p><h3 id="使用时间函数-DATEDIFF-和-TIMESTAMPDIFF-计算日期差"><a href="#使用时间函数-DATEDIFF-和-TIMESTAMPDIFF-计算日期差" class="headerlink" title="使用时间函数 DATEDIFF() 和 TIMESTAMPDIFF() 计算日期差"></a>使用时间函数 DATEDIFF() 和 TIMESTAMPDIFF() 计算日期差</h3><h4 id="DATEDIFF"><a href="#DATEDIFF" class="headerlink" title="DATEDIFF()"></a>DATEDIFF()</h4><blockquote><p>DATEDIFF() 常用的日期差，在 MySQL 中默认只能计算天数差。</p></blockquote><p><strong>语法</strong><br>DATEDIFF() 用法：DATEDIFF（时间1，时间2）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(时间<span class="number">1</span>,时间<span class="number">2</span>) <span class="keyword">AS</span> date_diff <span class="keyword">FROM</span> courses;</span><br></pre></td></tr></table></figure><br>DATEDIFF() 差值计算规则：时间 1 - 时间 2, <code>date_diff</code> 为返回结果列名称</p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATEDIFF(created_at,<span class="string">&#x27;2018-01-13&#x27;</span>) <span class="keyword">AS</span> date_diff <span class="keyword">FROM</span> courses;</span><br></pre></td></tr></table></figure></p><h4 id="TIMESTAMPDIFF"><a href="#TIMESTAMPDIFF" class="headerlink" title="TIMESTAMPDIFF()"></a>TIMESTAMPDIFF()</h4><blockquote><p>查询功能多的 MySQL 自带的日期函数，可以计算两个日期相差的年(YEAR，时间1,时间2)，月(MONTH，时间1,时间2)，周(WEEK，时间1,时间2)，日(DAY，时间1,时间2)，小时(HOUR，时间1,时间2)。</p></blockquote><p><strong>语法</strong><br>TIMESTAMPDIFF() 用法：TIMESTAMPDIFF (类型,时间1,时间2)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TIMESTAMPDIFF (类型,时间<span class="number">1</span>,时间<span class="number">2</span>) <span class="keyword">AS</span> year_diff；</span><br></pre></td></tr></table></figure><br>TIMESTAMPDIFF() 差值计算规则：时间 2 - 时间 1, <code>year_diff</code> 为返回结果列名称</p><p><strong>实例</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">AS</span> `courses_name` ,created_at <span class="keyword">AS</span> `courses_created_at`,TIMESTAMPDIFF(<span class="keyword">YEAR</span>, `created_at`, <span class="string">&#x27;2021-04-01&#x27;</span>) <span class="keyword">AS</span> `year_diff`</span><br><span class="line"><span class="keyword">FROM</span> `courses`;</span><br></pre></td></tr></table></figure><br>注意：DATEDIFF()和TIMESTAMPDIFF()时间相减的顺序。</p><p>cor# 联结<br>SQL 最强大的功能之一就是能在数据检索查询的执行中联结表。</p><h3 id="什么叫联结？"><a href="#什么叫联结？" class="headerlink" title="什么叫联结？"></a>什么叫联结？</h3><p>可以举一个生活中的例子来理解“联结”：<br>👇<br>在大学每一个新学期即将开始的时候，我们都会遇到一个大难题，那就是选课。<br>假如所有课程的信息和所有教师的信息都存放在同一张表中，我们会发现这显得很繁琐且不便于信息的更改。因为同一个教师开设的不同课程对应的教师信息都是相同的，当教师信息改变时，需要修改多条课程。<br>因此，为了同学们在选课时操作更便利，我们根据内容将所有数据分解为了两个表，即教师表和课程表。<br>我们可以将他们称为<strong>关系表</strong>。关系表就是一类数据一个表，各表通过某些关系互相关联。<br>联结中的两大主角——<strong>主键（PRIMARY KEY）</strong>和<strong>外键（FOREIGN KEY）</strong>。</p><p>表1：courses（课程表）<br>|列名|类型|注释|<br>|:—-:|:—-:|:—-:|<br>|id|int unsigned|主键|<br>|name|varchar|课程名称|<br>|student_count|int|学术总数|<br>|created_at|date|创建课程时间|<br>|teacher_id|int|讲师id|<br>表二：teachers（教师表）<br>|列名|类型|注释|<br>|:—-:|:—-:|:—-:|<br>|id|int|主键|<br>|name|varchar|讲师姓名|<br>|email|varchar|讲师邮箱|<br>|age|int|讲师年龄|<br>|country|varchar|讲师国籍|<br>教师表 <code>teachers</code> 中包含所有教师的信息，每个教师具有唯一的标识，这个标识被称为<strong>主键（PRIMARY KEY）</strong>，可以为 id 或其他唯一值。我们这里选择教师编号（<code>id</code>）为教师表的主键。</p><p>而在课程表 <code>courses</code> 中，除了教师编号 <code>teacher_id</code>（即教师表的主键）外不存储任何教师的信息。则教师编号为课程表的<strong>外键（FOREIGN KEY）</strong>。</p><p>教师表的主键又叫作课程表的外键，因此这两个表通过教师编号这一列关联了。</p><h3 id="怎么创建联结？"><a href="#怎么创建联结？" class="headerlink" title="怎么创建联结？"></a>怎么创建联结？</h3><p>规定要联结的所有表以及它们如何关联就可以了。<br>在设置关联条件时，为避免不同表被引用的列名相同，我们需要使用<strong>完全限定列名</strong>（用一个点分隔表名和列名），否则会返回错误。<br>用法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`table1`.`common_field` <span class="operator">=</span> `table2`.`common_field`</span><br></pre></td></tr></table></figure><br>教师表的主键 <code>id</code> 为设置的关联条件为：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`teachers`.`id` = `courses`.`teacher_id` </span><br></pre></td></tr></table></figure></p><h3 id="JOIN-连接子句"><a href="#JOIN-连接子句" class="headerlink" title="JOIN 连接子句"></a>JOIN 连接子句</h3><p>SQL JOIN 连接子句用于将数据库中两个或者两个以上表中的记录组合起来。其类型主要分为 INNER JOIN（内连接）、OUTER JOIN（外连接）、全连接（FULL JOIN）和交叉连接（CROSS JOIN），其中 OUTER JOIN 又可以细分为 LEFT JOIN（左连接）和 RIGHT JOIN（右连接）。<br>因此，我们主要使用的 JOIN 连接类型如下：</p><ul><li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行</li><li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li><li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li><li><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行</li><li><strong>CROSS JOIN</strong>：又称<strong>笛卡尔积</strong>，两个表数据一一对应，返回结果的行数等于两个表行数的乘积</li></ul><h4 id="内连接-INNER-JOIN"><a href="#内连接-INNER-JOIN" class="headerlink" title="内连接 INNER JOIN"></a>内连接 INNER JOIN</h4><blockquote><p>内连接根据联结条件来组合两个表中的字段，以创建一个新的结果表。假如我们想将表 1 和表 2 进行内连接，SQL 查询会逐个比较表 1 和表 2 中的每一条记录，来寻找满足联结条件的所有记录对。当联结条件得以满足时，所有满足条件的记录对的字段将会结合在一起构成结果表。<br>   <code>简单的说，内连接就是取两个表的交集，返回的结果就是连接的两张表中都满足条件的部分。</code></p></blockquote><p><img src="https://media-cn.lintcode.com/new_storage_v2/public/staff/None/3/28/e9f00880-8fa2-11eb-83d2-0242ac1d0002/image.png" alt="INNER_JOIN"></p><p><strong>Grammar</strong><br>基本语法有如下两类<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...</span><br><span class="line"><span class="keyword">FROM</span> `table1`</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `table2`</span><br><span class="line"><span class="keyword">ON</span> `table1`.`common_field` <span class="operator">=</span> `table2`.`common_field`;</span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...</span><br><span class="line"><span class="keyword">FROM</span> `table1`</span><br><span class="line"><span class="keyword">JOIN</span> `table2`</span><br><span class="line"><span class="keyword">ON</span> `table1`.`common_field` <span class="operator">=</span> `table2`.`common_field`;</span><br></pre></td></tr></table></figure></p><blockquote><p>注：INNER JOIN 中 INNER 可以省略不写</p></blockquote><p>其中，语法的核心部分如下<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> table1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2</span><br><span class="line"><span class="keyword">ON</span> table1.common_field <span class="operator">=</span> table2.common_field</span><br></pre></td></tr></table></figure><br><code>table1</code> 和 <code>table2</code> 是内连接的两个表名，<code>table1</code>.<code>common_field</code> 和 <code>table2</code>.<code>common_field</code><br>需要注意的是，联结条件需使用特定的 ON 子句给出。</p><p><strong>Exemple</strong>👇<br>表1：courses（课程表）<br>|列名|类型|注释|<br>|:—-:|:—-:|:—-:|<br>|id|int unsigned|主键|<br>|name|varchar|课程名称|<br>|student_count|int|学术总数|<br>|created_at|date|创建课程时间|<br>|teacher_id|int|讲师id|<br>课程表 <code>courses</code> 的主键为 <code>id</code><br>表中的每一行记录着一门课程信息，包括教师编号 <code>teacher_id</code><br>下面是选自课程表 <code>courses</code> 的数据:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                    <span class="operator">|</span> student_count <span class="operator">|</span> created_at <span class="operator">|</span> teacher_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Senior Algorithm        <span class="operator">|</span>           <span class="number">880</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-06</span><span class="number">-01</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span>          <span class="number">1350</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-18</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Django                  <span class="operator">|</span>           <span class="number">780</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-02</span><span class="number">-29</span> <span class="operator">|</span>          <span class="number">5</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Web                     <span class="operator">|</span>           <span class="number">340</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-04</span><span class="number">-22</span> <span class="operator">|</span>          <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Big Data                <span class="operator">|</span>           <span class="number">700</span> <span class="operator">|</span> <span class="number">2020</span><span class="number">-09</span><span class="number">-11</span> <span class="operator">|</span>          <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Artificial Intelligence <span class="operator">|</span>          <span class="number">1660</span> <span class="operator">|</span> <span class="number">2018</span><span class="number">-05</span><span class="number">-13</span> <span class="operator">|</span>          <span class="number">3</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+---------------+------------+------------+</span></span><br></pre></td></tr></table></figure><br>表二：teachers（教师表）<br>|列名|类型|注释|<br>|:—-:|:—-:|:—-:|<br>|id|int|主键|<br>|name|varchar|讲师姓名|<br>|email|varchar|讲师邮箱|<br>|age|int|讲师年龄|<br>|country|varchar|讲师国籍|<br>教师表 <code>teachers</code> 的主键为 <code>id</code><br>表中的每一行记录着一位教师的信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------+------------------+---------------------------+------+---------+</span></span><br><span class="line"><span class="operator">|</span>  id  <span class="operator">|</span> name             <span class="operator">|</span> email                     <span class="operator">|</span> age  <span class="operator">|</span> country <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------------+---------------------------+------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>    <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span> <span class="number">20</span>   <span class="operator">|</span> UK      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>    <span class="operator">|</span> Northern Beggar  <span class="operator">|</span> northern.beggar<span class="variable">@qq</span>.com    <span class="operator">|</span> <span class="number">21</span>   <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> Western Venom    <span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span> <span class="number">28</span>   <span class="operator">|</span> USA     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>    <span class="operator">|</span> Southern Emperor <span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span> <span class="number">21</span>   <span class="operator">|</span> JP      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5</span>    <span class="operator">|</span> Linghu Chong     <span class="operator">|</span> <span class="keyword">NULL</span>                      <span class="operator">|</span> <span class="number">18</span>   <span class="operator">|</span> CN      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+------------------+---------------------------+------+---------+</span></span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `c`.`id`, `c`.`name` <span class="keyword">AS</span> `course_name`, `t`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line"><span class="keyword">FROM</span> `courses` `c`</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `teachers` `t` <span class="keyword">ON</span> `c`.`teacher_id` <span class="operator">=</span> `t`.`id`;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>courses</code> <code>c</code> 等同于 <code>courses</code> AS <code>c</code> ，给<code>courses</code> 表取别名为 <code>c</code></li><li><code>teachers</code> <code>t</code> 等同于 <code>teachers</code> AS <code>t</code> ，给 <code>teachers</code> 表取别名为 <code>t</code></li><li>INNER JOIN 也可写作 JOIN</li></ul></blockquote><p>执行以上代码输出结果如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> `c`.`id`, `c`.`name` <span class="keyword">AS</span> `course_name`, `t`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> `courses` `c`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> `teachers` `t` <span class="keyword">ON</span> `c`.`teacher_id` <span class="operator">=</span> `t`.`id`;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> course_name             <span class="operator">|</span> teacher_name     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Senior Algorithm        <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="keyword">System</span> Design           <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Django                  <span class="operator">|</span> <span class="keyword">NULL</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> Web                     <span class="operator">|</span> Southern Emperor <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Big Data                <span class="operator">|</span> Eastern Heretic  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> Artificial Intelligence <span class="operator">|</span> Western Venom    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------------------+------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec)</span><br></pre></td></tr></table></figure></p><h4 id="外连接-OUTER-JOIN"><a href="#外连接-OUTER-JOIN" class="headerlink" title="外连接 OUTER JOIN"></a>外连接 OUTER JOIN</h4><p>外连接可以将某个表格中，在另外一张表格中无对应关系，但是也能将数据匹配出来。<br>在MySQL中，外连接查询会返回所操作的表中至少一个表的所有数据记录。在MySQL中，数据查询通过SQL语句 “OUTER JOIN…ON” 来实现，外连接查询可以分为以下三类：</p><ul><li>左外连接</li><li>右外连接</li><li>全外连接</li></ul><p>外连接数据查询<strong>Grammar</strong>如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="number">1</span>,column_name <span class="number">2</span> ... column_name n</span><br><span class="line">    <span class="keyword">FROM</span> table1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="operator">|</span> <span class="keyword">RIGHT</span> <span class="operator">|</span> <span class="keyword">FULL</span>  (<span class="keyword">OUTER</span>) <span class="keyword">JOIN</span> table2</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">CONDITION</span>;</span><br></pre></td></tr></table></figure><br>在上述语句中，参数 column_name 表示所要查询的字段名字，来源于所连接的表 table1 和 table2，关键字 OUTER JOIN 表示表进行外连接，参数 CONDITION 表示进行匹配的条件。</p><ul><li>左外连接 LEFT JOIN<br>外连接查询中的左外连接就是指新关系中执行匹配条件时，以关键字 LEFT JOIN 左边的表为参考表。<code>左外连接的结果包括 LEFT OUTER 子句中指定的左表的所有行，而不仅仅是连接列所匹配的行</code>，这就意味着，<code>左连接会返回左表中的所有记录，加上右表中匹配到的记录</code>。如果左表的某行在右表中没有匹配行，那么在相关联的结果行中，右表的所有选择列表均为空值。</li></ul><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="number">1</span>,column_name <span class="number">2</span> ... column_name n</span><br><span class="line">    <span class="keyword">FROM</span> table1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">CONDITION</span> ;</span><br></pre></td></tr></table></figure></p><p><strong>Exemple</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> course_name, t.name <span class="keyword">AS</span> teacher_name</span><br><span class="line"><span class="keyword">FROM</span> teachers t</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> courses c <span class="keyword">ON</span> c.teacher_id <span class="operator">=</span> t.id;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> course_name, t.name <span class="keyword">AS</span> teacher_name</span><br><span class="line">     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> teachers t</span><br><span class="line">          <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> courses c <span class="keyword">ON</span> c.teacher_id <span class="operator">=</span> t.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span>  course_name           <span class="operator">|</span> teacher_name       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="operator">|</span> Big Data         <span class="operator">|</span>Eastern Heretic     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Data Analysis          <span class="operator">|</span>Eastern Heretic     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming <span class="operator">|</span>Eastern Heretic     <span class="operator">|</span> </span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span>Northern Beggar     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> Design          <span class="operator">|</span>Western Venom       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Django         <span class="operator">|</span>Western Venom       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Artificial Intelligence<span class="operator">|</span>Western Venom       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Java P6<span class="operator">+</span>         <span class="operator">|</span>Western Venom       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Senior Algorithm <span class="operator">|</span>Southern Emperor    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Web                 <span class="operator">|</span>Southern Emperor    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Object Oriented Design <span class="operator">|</span>Southern Emperor    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span>Linghu Chong        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+--------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><ul><li>右外连接<br>外连接查询中的右外连接是指新关系中执行匹配条件时，<code>以关键字 RIGHT JOIN 右边的表为参考表，如果右表的某行在左表中没有匹配行，左表就返回空值</code>。</li></ul><p><strong>Grammar</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="number">1</span>,column_name <span class="number">2</span> ... column_name n</span><br><span class="line">    <span class="keyword">FROM</span> table1</span><br><span class="line">        <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> table2</span><br><span class="line">        <span class="keyword">ON</span> <span class="keyword">CONDITION</span> ;</span><br></pre></td></tr></table></figure></p><p><strong>Exemple</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> course_name, t.name <span class="keyword">AS</span> teacher_name，t.email <span class="keyword">AS</span> teacher_email</span><br><span class="line"><span class="keyword">FROM</span> courses c</span><br><span class="line">    <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> teachers t <span class="keyword">ON</span> c.teacher_id <span class="operator">=</span> t.id;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">SELECT</span> c.name <span class="keyword">AS</span> course_name, t.name <span class="keyword">AS</span> teacher_name, t.email <span class="keyword">AS</span> teacher_email</span><br><span class="line">     <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">FROM</span> courses c</span><br><span class="line">     <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> teachers t <span class="keyword">ON</span> c.teacher_id <span class="operator">=</span> t.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+----------------------+---------------------------+</span></span><br><span class="line"><span class="operator">|</span>  course_name           <span class="operator">|</span> teacher_name         <span class="operator">|</span> teacher_email             <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+----------------------+---------------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming <span class="operator">|</span> Eastern Heretic<span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Data Analysis    <span class="operator">|</span> Eastern Heretic<span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Big Data            <span class="operator">|</span> Eastern Heretic<span class="operator">|</span> eastern.heretic<span class="variable">@gmail</span>.com <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Dynamic</span> Programming    <span class="operator">|</span> Northern Beggar<span class="operator">|</span> northern.beggar<span class="variable">@qq</span>.com    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Java P6<span class="operator">+</span>         <span class="operator">|</span> Western Venom<span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Artificial Intelligence<span class="operator">|</span> Western Venom<span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Django         <span class="operator">|</span> Western Venom<span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">System</span> Design         <span class="operator">|</span> Western Venom<span class="operator">|</span> western.venom<span class="variable">@163</span>.com     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Object Oriented Design <span class="operator">|</span> Southern Emperor<span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Web                 <span class="operator">|</span> Southern Emperor<span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Advanced Algorithms <span class="operator">|</span> Southern Emperor<span class="operator">|</span> southern.emperor<span class="variable">@qq</span>.com   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>                 <span class="operator">|</span> Linghu Chong        <span class="operator">|</span> <span class="keyword">NULL</span>                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------------+----------------------+---------------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><ul><li>全外连接<br>FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行。FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。<blockquote><p>注：MySQL 数据库不支持全连接，想要实现全连接可以使用 UNION ALL 来将左连接和右连接结果组合在一起实现全连接。</p></blockquote></li></ul><p><strong>UNION</strong> ：联合的意思，即把两次或多次查询结果合并起来<br>要求：两次查询的列数必须一致，同时，每条 SELECT 语句中的列的顺序必须相同</p><p><strong>Grammar</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT column_name 1,column_name 2 ... column_name n</span><br><span class="line">    FROM table1</span><br><span class="line">        LEFT JOIN table2 ON CONDITION </span><br><span class="line">UNION</span><br><span class="line">SELECT column_name 1,column_name 2 ... column_name n</span><br><span class="line">    FROM table1</span><br><span class="line">        RIGHT JOIN table2 ON CONDITION ;</span><br></pre></td></tr></table></figure></p><p><strong>Exemple</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT c.name AS course_name, t.age AS teacher_age</span><br><span class="line">FROM courses c</span><br><span class="line">LEFT JOIN teachers t ON c.teacher_id = t.id</span><br><span class="line">UNION</span><br><span class="line">SELECT c.name AS course_name, t.age AS teacher_age</span><br><span class="line">FROM courses c</span><br><span class="line">RIGHT JOIN teachers t ON c.teacher_id = t.id;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql-&gt; SELECT c.name AS course_name, t.age AS teacher_age</span><br><span class="line">     -&gt; FROM courses c</span><br><span class="line">    LEFT JOIN teachers t ON c.teacher_id = t.id</span><br><span class="line">     -&gt; UNION</span><br><span class="line">     -&gt; SELECT c.name AS course_name, t.age AS teacher_age</span><br><span class="line">     -&gt; FROM courses c</span><br><span class="line">    RIGHT JOIN teachers t ON c.teacher_id = t.id;</span><br><span class="line">+------------------------+---------------+</span><br><span class="line">|  course_name           | teacher_age   | </span><br><span class="line">+------------------------+---------------+</span><br><span class="line">| Advanced Algorithms | 21            | </span><br><span class="line">| System Design         | 28            | </span><br><span class="line">| Django                 | 28            | </span><br><span class="line">| Web Southern         | 21            |  </span><br><span class="line">| Big Data             | 20            |  </span><br><span class="line">| Artificial Intelligence| 28            | </span><br><span class="line">| Java P6+             | 28            |  </span><br><span class="line">| Data Analysis Eastern | 20            |  </span><br><span class="line">| Object Oriented Design | 21            |  </span><br><span class="line">| Dynamic Programming | 20            |  </span><br><span class="line">| Linghu Chong          | 18            | </span><br><span class="line">| NULL                 | 21            |  </span><br><span class="line">| NULL                 | 18            |  </span><br><span class="line">+------------------------+----------------------+---------------------------+</span><br><span class="line">13 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><h4 id="交叉连接-CROSS-JOIN"><a href="#交叉连接-CROSS-JOIN" class="headerlink" title="交叉连接 CROSS JOIN"></a>交叉连接 CROSS JOIN</h4><h5 id="什么是交叉连接"><a href="#什么是交叉连接" class="headerlink" title="什么是交叉连接"></a>什么是交叉连接</h5><p>交叉连接：返回左表中的所有行，左表中的每一行与右表中的所有行组合。即将两个表的数据一一对应，其查询结果的行数为左表中的行数乘以右表中的行数。<br>CROSS JOIN（交叉连接）的结果也称作笛卡尔积，笛卡尔乘积是指在数学中，两个集合 X 和 Y 的笛卡尓积（Cartesian product），又称直积，表示为<strong>X × Y</strong>，第一个对象是 X 的成员而第二个对象是 Y 的所有可能有序对的其中一个成员。</p><h5 id="交叉连接的两种定义方式"><a href="#交叉连接的两种定义方式" class="headerlink" title="交叉连接的两种定义方式"></a>交叉连接的两种定义方式</h5><p>交叉连接有两种定义方式，分为<code>隐式连接和显式连接</code>。两种定义方式的查询结果是相同的。</p><ul><li>隐式交叉连接：不需要使用 CROSS JOIN 关键字，只要在 SELECT 语句的 FROM 语句后将要进行交叉连接的表名列出即可，这种方式基本上可以被任意数据库系统支持。<br><strong>Grammar</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...</span><br><span class="line"><span class="keyword">FROM</span> `table1`,`table2`;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  `courses`.`name` <span class="keyword">AS</span> `course_name`, `teachers`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line"><span class="keyword">FROM</span> `courses` ,`teachers`;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  `c`.`name` <span class="keyword">AS</span> `course_name`, `t`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line"><span class="keyword">FROM</span> `courses` `c`,`teachers` `t`;</span><br></pre></td></tr></table></figure><ul><li>显式交叉连接：与隐式交叉连接的区别就是它使用 CROSS JOIN 关键字，用法与 INNER JOIN相似。<br><strong>Grammar</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `table1`.`column1`, `table2`.`column2`...</span><br><span class="line"><span class="keyword">FROM</span> `table1`</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> `table2`;</span><br></pre></td></tr></table></figure></li></ul><p><strong>Example</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT  `courses`.`name` AS `course_name`, `teachers`.`name` AS `teacher_name`</span><br><span class="line">FROM `courses` </span><br><span class="line">CROSS JOIN `teachers`;</span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT  `c`.`name` AS `course_name`, `t`.`name` AS `teacher_name`</span><br><span class="line">FROM `courses` `c`</span><br><span class="line">CROSS JOIN `teachers` `t`;</span><br></pre></td></tr></table></figure></p><p><strong>Example</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `c`.`name` <span class="keyword">AS</span> `course_name`, `t`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line"><span class="keyword">FROM</span> `courses` `c`</span><br><span class="line">     <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> `teachers` `t`;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">### 输入数据</span><br><span class="line">### courses</span><br><span class="line">| id |        name        | student_count |  created_at  | teacher_id |</span><br><span class="line">| :- | :----------------- | :------------ | :----------- | :--------- |</span><br><span class="line">| 1  | &#x27;Senior Algorithm&#x27; | 880           | &#x27;2020-06-01&#x27; | 4          |</span><br><span class="line">| 2  | &#x27;System Design&#x27;    | 1350          | &#x27;2020-07-18&#x27; | 3          |</span><br><span class="line">| 3  | &#x27;Django&#x27;           | 780           | &#x27;2020-02-29&#x27; | 5          |</span><br><span class="line">| 4  | &#x27;Web&#x27;              | 340           | &#x27;2020-04-22&#x27; | 4          |</span><br><span class="line"></span><br><span class="line">### teachers</span><br><span class="line"></span><br><span class="line">| id |        name        |            email            | age | country |</span><br><span class="line">| :- | :----------------- | :-------------------------- | :-- | :------ |</span><br><span class="line">| 1  | &#x27;Eastern Heretic&#x27;  | &#x27;eastern.heretic@gmail.com&#x27; | 20  | &#x27;UK&#x27;    |</span><br><span class="line">| 2  | &#x27;Northern Beggar&#x27;  | &#x27;northern.beggar@qq.com&#x27;    | 21  | &#x27;CN&#x27;    |</span><br><span class="line">| 3  | &#x27;Western Venom&#x27;    | &#x27;western.venom@163.com&#x27;     | 28  | &#x27;USA&#x27;   |</span><br><span class="line">| 4  | &#x27;Southern Emperor&#x27; | &#x27;southern.emperor@qq.com&#x27;   | 21  | &#x27;JP&#x27;    |</span><br><span class="line">| 5  | &#x27;Linghu Chong&#x27;     | None                        | 18  | &#x27;CN&#x27;    |</span><br><span class="line"></span><br><span class="line">###输出结果</span><br><span class="line">|    course_name     |   teacher_name    |</span><br><span class="line">| :----------------- | :---------------- |</span><br><span class="line">| &#x27;Senior Algorithm&#x27; | &#x27;Eastern Heretic&#x27; |</span><br><span class="line">| &#x27;System Design&#x27;    | &#x27;Eastern Heretic&#x27; |</span><br><span class="line">| &#x27;Django&#x27;           | &#x27;Eastern Heretic&#x27; |</span><br><span class="line">| &#x27;Web&#x27;              | &#x27;Eastern Heretic&#x27; |</span><br><span class="line">| &#x27;Senior Algorithm&#x27; | &#x27;Northern Beggar&#x27; |</span><br><span class="line">| &#x27;System Design&#x27;    | &#x27;Northern Beggar&#x27; |</span><br><span class="line">| &#x27;Django&#x27;           | &#x27;Northern Beggar&#x27; |</span><br><span class="line">| &#x27;Web&#x27;              | &#x27;Northern Beggar&#x27; |</span><br><span class="line">| &#x27;Senior Algorithm&#x27; | &#x27;Western Venom&#x27;   |</span><br><span class="line">| &#x27;System Design&#x27;    | &#x27;Western Venom&#x27;   |</span><br><span class="line">| &#x27;...&#x27;              | &#x27;...&#x27;             |</span><br></pre></td></tr></table></figure></p><p>🔔增加联结条件，使用 WHERE 子句帮助筛选过滤无效的数据！<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  `c`.`name` <span class="keyword">AS</span> `course_name`, `t`.`name` <span class="keyword">AS</span> `teacher_name`</span><br><span class="line"><span class="keyword">FROM</span> `courses` `c`</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> `teachers` `t`</span><br><span class="line"><span class="keyword">WHERE</span> `c`.`teacher_id` <span class="operator">=</span> `t`.`id`;</span><br></pre></td></tr></table></figure></p><p><strong>Result</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> course_name                <span class="operator">|</span> teacher_name     <span class="operator">|</span>      </span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+------------------+</span></span><br><span class="line"><span class="operator">|</span>Senior Algorithm            <span class="operator">|</span>Southern Emperor  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span><span class="keyword">System</span> Design             <span class="operator">|</span>Western Venom     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>Django                     <span class="operator">|</span>Linghu Chong      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>Web                     <span class="operator">|</span>Southern Emperor  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------------------------+------------------+</span></span><br></pre></td></tr></table></figure></p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><blockquote><p>在 SQL 中，约束是规定表中的数据规则。若存在违反约束的行为，行为就会被阻止。它能帮助管理员更好地管理数据库，<code>并且确保数据库中数据的正确性和有效性</code>。</p></blockquote><h2 id="非空约束-NOT-NULL"><a href="#非空约束-NOT-NULL" class="headerlink" title="非空约束 NOT NULL"></a>非空约束 NOT NULL</h2><blockquote><p>NOT NULL 约束强制列不接受 NULL 值，强制字段始终包含值，这意味着，如果不向字段添加值，就无法插入新纪录或者更新记录。</p></blockquote><p>下面的 SQL 强制 <code>ID</code> 列、 <code>LastName</code> 列以及 <code>FirstName</code> 列不接受 NULL 值：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Persons` (</span><br><span class="line">    `ID` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `LastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `FirstName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `Age` <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br> <strong>example</strong><br> 在一个已创建的表的 <code>Age</code> 字段中添加 NOT NULL 约束如下所示：<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">MODIFY `Age` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><br>在一个已创建的表的 <code>Age</code> 字段中删除 NOT NULL 约束如下所示：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">MODIFY `Age` <span class="type">int</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong></p><blockquote><p>不要把 NULL 值与空串相混淆。NULL 值是没有值。<br>它不是空串。如果指定’ ‘（两个单引号，其间没有字符），这在 NOT NULL 列中是允许的。空串是一个有效的值，它不是无  值。NULL 值用关键字 NULL 而不是空串指定。</p></blockquote><h2 id="唯一约束UNIQUE"><a href="#唯一约束UNIQUE" class="headerlink" title="唯一约束UNIQUE"></a>唯一约束UNIQUE</h2><ul><li>UNIQUE 约束唯一标识数据库表中的每条记录</li><li>UNIQUE 和 主键约束均为列或列集合提供了唯一性的保证</li><li>主键约束会自动定义一个 UNIQUE 约束，或者说主键约束是一种特殊的 UNIQUE 约束。但是二者有明显的区别：每个表可以有多个 UNIQUE 约束，但只能有一个主键约束。<h3 id="CREATE-TABLE-时的-UNIQUE-约束"><a href="#CREATE-TABLE-时的-UNIQUE-约束" class="headerlink" title="CREATE TABLE 时的 UNIQUE 约束"></a>CREATE TABLE 时的 UNIQUE 约束</h3>下面的 SQL 在 <code>Persons</code> 表创建时在 <code>P_Id</code> 列上创建 UNIQUE 约束：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Persons`</span><br><span class="line">(</span><br><span class="line">`P_Id` int NOT NULL,</span><br><span class="line">`LastName` varchar(255) NOT NULL,</span><br><span class="line">`FirstName` varchar(255),</span><br><span class="line">`Address` varchar(255),</span><br><span class="line">`City` varchar(255),</span><br><span class="line">UNIQUE (`P_Id`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Persons`</span><br><span class="line">(</span><br><span class="line">`P_Id` int NOT NULL UNIQUE,</span><br><span class="line">`LastName` varchar(255) NOT NULL,</span><br><span class="line">`FirstName` varchar(255),</span><br><span class="line">`Address` varchar(255),</span><br><span class="line">`City` varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Persons`</span><br><span class="line">(</span><br><span class="line">`P_Id` int NOT NULL,</span><br><span class="line">`LastName` varchar(255) NOT NULL,</span><br><span class="line">`FirstName` varchar(255),</span><br><span class="line">`Address` varchar(255),</span><br><span class="line">`City` varchar(255),</span><br><span class="line">CONSTRAINT uc_PersonID UNIQUE (`P_Id`,`LastName`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="ALTER-TABLE-时的-UNIQUE-约束"><a href="#ALTER-TABLE-时的-UNIQUE-约束" class="headerlink" title="ALTER TABLE 时的 UNIQUE 约束"></a>ALTER TABLE 时的 UNIQUE 约束</h3><p>当表已被创建时，在 <code>P_Id</code> 列创建 UNIQUE 约束:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">ADD UNIQUE（`P_Id`）</span><br></pre></td></tr></table></figure><br>当表已被创建时，需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">ADD CONSTRAINT uc_PersonID UNIQUE (`P_Id`,`LastName`)</span><br></pre></td></tr></table></figure></p><h3 id="撤销-UNIQUE-约束"><a href="#撤销-UNIQUE-约束" class="headerlink" title="撤销 UNIQUE 约束"></a>撤销 UNIQUE 约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">DROP INDEX uc_PersonID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">DROP CONSTRAINT uc_PersonID</span><br></pre></td></tr></table></figure><h2 id="主键约束-PRIMARY-KEY"><a href="#主键约束-PRIMARY-KEY" class="headerlink" title="主键约束 PRIMARY KEY"></a>主键约束 PRIMARY KEY</h2><blockquote><p>PRIMARY KEY 约束唯一标识数据库表中的每条记录 ，简单的说，<code>PRIMARY KEY = UNIQUE + NOT NULL</code> ,从技术的角度来看，PRIMARY KEY 和 UNIQUE 有很多相似之处。但还是有以下区别：</p><ul><li>NOT NULL UNIQUE 可以<code>将表的一列或多列定义为唯一性属性</code>，而 PRIMARY KEY 设为多列时，<code>仅能保证多列之和是唯一的</code>，具体到某一列可能会重复。</li><li>PRIMARY KEY <code>可以与外键配合</code>，从而形成主从表的关系，而 NOT NULL UNIQUE 则做不到这一点<br>如：<br>表一：用户 <code>id</code> (主键)，用户名<br>表二: 银行卡号 <code>id</code> (主键)，用户 <code>id</code> (外键)<br>则表一为主表，表二为从表。</li></ul></blockquote><ul><li>更大的区别在逻辑设计上。 PRIMARY KEY 一般在逻辑设计中用作记录标识，这也是设置 PRIMARY KEY 的本来用意，而 UNIQUE 只是为了保证域/域组的唯一性。</li></ul><h3 id="CREATE-TABLE-时-添加-PRIMARY-KEY-约束"><a href="#CREATE-TABLE-时-添加-PRIMARY-KEY-约束" class="headerlink" title="CREATE TABLE 时 添加 PRIMARY KEY 约束"></a>CREATE TABLE 时 添加 PRIMARY KEY 约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Persons`</span><br><span class="line">(</span><br><span class="line">    `P_Id` int NOT NULL,</span><br><span class="line">    `LastName` varchar(255) NOT NULL,</span><br><span class="line">    `FirstName` varchar(255),</span><br><span class="line">    `Address` varchar(255),</span><br><span class="line">    `City` varchar(255),</span><br><span class="line">    PRIMARY KEY (`P_Id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>执行结果</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `Persons`</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt;     `P_Id` int NOT NULL,</span><br><span class="line">    -&gt;     `LastName` varchar(255) NOT NULL,</span><br><span class="line">    -&gt;     `FirstName` varchar(255),</span><br><span class="line">    -&gt;     `Address` varchar(255),</span><br><span class="line">    -&gt;     `City` varchar(255),</span><br><span class="line">    -&gt;     PRIMARY KEY (`P_Id`)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; desc Persons;</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type         | Null | Key | Default | Extra |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">| P_Id      | int(11)      | NO   | PRI | NULL    |       |</span><br><span class="line">| LastName  | varchar(255) | NO   |     | NULL    |       |</span><br><span class="line">| FirstName | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| Address   | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">| City      | varchar(255) | YES  |     | NULL    |       |</span><br><span class="line">+-----------+--------------+------+-----+---------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Persons`</span><br><span class="line">(</span><br><span class="line">    `P_Id` int NOT NULL PRIMARY KEY,</span><br><span class="line">    `LastName` varchar(255) NOT NULL,</span><br><span class="line">    `FirstName` varchar(255),</span><br><span class="line">    `Address` varchar(255),</span><br><span class="line">    `City` varchar(255)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>如需命名并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">(</span><br><span class="line">    `P_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `LastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `FirstName` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `Address` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `City` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk_PersonID <span class="keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br>    注释：<br>    在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（<code>P_Id</code> 和 <code>LastName</code>）组成的。</p><h3 id="ALTER-TABLE-时添加主键约束"><a href="#ALTER-TABLE-时添加主键约束" class="headerlink" title="ALTER TABLE 时添加主键约束"></a>ALTER TABLE 时添加主键约束</h3><p>当表已被创建时，如需在 <code>P_Id</code> 列创建 PRIMARY KEY 约束：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (`P_Id`)</span><br></pre></td></tr></table></figure><br><strong>执行结果</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `P_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `LastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `FirstName` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `Address` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `City` <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (P_Id);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> Persons;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> P_Id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LastName  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FirstName <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Address   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> City      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong>如需命名并定义多个列的 PRIMARY KEY 约束，可以使用下面的 SQL 语法：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID <span class="keyword">PRIMARY</span> KEY (`P_Id`,`LastName`)</span><br></pre></td></tr></table></figure></p><blockquote><p>注释：<br>如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p></blockquote><p><strong>执行结果</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> (</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `P_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `LastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `FirstName` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `Address` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span>     `City` <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> );</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> pk_PersonID <span class="keyword">PRIMARY</span> KEY (`P_Id`,`LastName`);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> Persons;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field     <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> P_Id      <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> LastName  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FirstName <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Address   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> City      <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure></p><h3 id="撤销-PRIMARY-KEY"><a href="#撤销-PRIMARY-KEY" class="headerlink" title="撤销 PRIMARY KEY"></a>撤销 PRIMARY KEY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">DROP PRIMARY KEY</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">DROP CONSTRAINT pk_PersonID</span><br></pre></td></tr></table></figure><h2 id="外键约束-FOREIGN-KEY"><a href="#外键约束-FOREIGN-KEY" class="headerlink" title="外键约束 FOREIGN KEY"></a>外键约束 FOREIGN KEY</h2><h3 id="什么是外键"><a href="#什么是外键" class="headerlink" title="什么是外键"></a>什么是外键</h3><blockquote><p>一个表中的 FOREIGN KEY 指向另一个表中的 UNIQUE KEY 。让我们看了例子，如果一个字段 X 在一张表（表 1 ）中是关键字，而在另一张表（表 2 ）中不是关键字，则称字段 X 为表 2 的外键。</p></blockquote><h3 id="外键的作用"><a href="#外键的作用" class="headerlink" title="外键的作用"></a>外键的作用</h3><blockquote><p>外键最根本的作用：保证数据的完整性和一致性。<br>现在有两张表——学生表和院系表，这里的院系就是学生表的外键，外键表是学生表，主键表是院系表。假如院系表中的某个院系被删除了，那么在学生表中要想查询这个被删除的院系号所对应的院信息就会报错，因为已经不存在这个系了，所以，删除院系表（主键表）时必须删除其他与之关联的表，这里就说明了外键的作用，保持数据的一致性、完整性。当然反过来讲，你删除学生表中的记录，并不影响院系表中的数据，你查询院系号也能正确查询。所以删除外键表中的数据并不影响主键表。</p></blockquote><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><blockquote><p>外键约束是指用于在两个表之间建立关系，需要指定引用主表的哪一列。接下来在实际操做中让我们感受一下外键约束的用法。</p></blockquote><h4 id="CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束"><a href="#CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束" class="headerlink" title="CREATE TABLE 时的 SQL FOREIGN KEY 约束"></a>CREATE TABLE 时的 SQL FOREIGN KEY 约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Orders`</span><br><span class="line">(</span><br><span class="line">`O_Id` int NOT NULL,</span><br><span class="line">`OrderNo` int NOT NULL,</span><br><span class="line">`P_Id` int,</span><br><span class="line">PRIMARY KEY (O_Id),</span><br><span class="line">FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `Orders`</span><br><span class="line">(</span><br><span class="line">`O_Id` int NOT NULL PRIMARY KEY,</span><br><span class="line">`OrderNo` int NOT NULL,</span><br><span class="line">P_Id int FOREIGN KEY REFERENCES Persons(P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>其中<br>NOT NULL 表示该字段不为空<br>REFERENCES 表示 引用一个表</p></blockquote><p>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Orders`</span><br><span class="line">(</span><br><span class="line">`O_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`OrderNo` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`P_Id` <span class="type">int</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (O_Id),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> fk_PerOrders <span class="keyword">FOREIGN</span> KEY (P_Id)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(P_Id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><blockquote><p>其中<br>CONSTRAINT 表示约束，后面接约束名称，常用于创建约束和删除约束；</p></blockquote><h4 id="ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束"><a href="#ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束" class="headerlink" title="ALTER TABLE 时的 SQL FOREIGN KEY 约束"></a>ALTER TABLE 时的 SQL FOREIGN KEY 约束</h4><p>当 “Orders” 表已被创建时，如需在 “P_Id” 列创建 FOREIGN KEY 约束:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Orders`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FOREIGN</span> KEY (P_Id)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(P_Id)</span><br></pre></td></tr></table></figure><br>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Orders`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_PerOrders</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY (P_Id)</span><br><span class="line"><span class="keyword">REFERENCES</span> Persons(P_Id)</span><br></pre></td></tr></table></figure></p><h4 id="撤销-FOREIGN-KEY-约束"><a href="#撤销-FOREIGN-KEY-约束" class="headerlink" title="撤销 FOREIGN KEY 约束"></a>撤销 FOREIGN KEY 约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Orders`</span><br><span class="line">DROP FOREIGN KEY fk_PerOrders</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Orders`</span><br><span class="line">DROP CONSTRAINT fk_PerOrders</span><br></pre></td></tr></table></figure><h2 id="检查约束-CHECK"><a href="#检查约束-CHECK" class="headerlink" title="检查约束 CHECK"></a>检查约束 CHECK</h2><p>CHECK 约束用于限制列中的值的范围，评估插入或修改后的值。满足条件的值将会插入表中，否则将放弃插入操作。 可以为同一列指定多个 CHECK 约束。</p><p><code>CHECK</code> 约束既可以用于某一列也可以用于某张表：</p><ul><li>如果对单个列定义 CHECK 约束，那么该列只允许特定的值。</li><li>如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</li></ul><p>定义 CHECK 约束条件在某种程度上类似于编写查询的 WHERE 子句，使用不同的比较运算符（例如 AND、OR、BETWEEN、IN、LIKE 和 IS NULL）编写其布尔表达式，该布尔表达式将返回 TRUE、FALSE 或 UNKNOWN 。 当条件中存在 NULL 值时，CHECK约束将返回 UNKNOWN 值。<br>CHECK 约束主要用于通过将插入的值限制为遵循定义的值、范围或格式规则的值来强制域完整性。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hardy_db <span class="keyword">default</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_0900_ai_ci;</span><br><span class="line">USE hardy_db;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> lesson;</span><br></pre></td></tr></table></figure><br>创建表结构时可以使用 CHECK 约束，也可以给已创建的表增加 CHECK 约束。<br>🔔举一个例子：<br>假如我们想创建一个简单的课程表 <code>courses</code> ，表中每一条数据记录着课程编号 <code>id</code>、课程名称 <code>name</code> 、学生总数 <code>student_count</code> 、创建课程时间 <code>created_at</code> 以及授课教师编号 <code>teacher_id</code>。其中课程编号 <code>id</code> 为主键。<br>根据基本常识，学生总数 <code>student_count</code> 一定是非负值，在这里我们设置它必须为正整数，可以使用 CHECK 约束。</p><h3 id="创建表（CREATE-TABLE）时添加-CHECK约束"><a href="#创建表（CREATE-TABLE）时添加-CHECK约束" class="headerlink" title="创建表（CREATE TABLE）时添加 CHECK约束"></a>创建表（CREATE TABLE）时添加 CHECK约束</h3><p>在创建课程表 <code>courses</code> 时，给学生总数 <code>student_count</code> 字段加上一个大于 0 的约束。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `courses`</span><br><span class="line">(</span><br><span class="line">`id` int,</span><br><span class="line">`name` varchar(255),</span><br><span class="line">`student_count` int,</span><br><span class="line">`created_at` date,</span><br><span class="line">`teacher_id` int,</span><br><span class="line">CHECK (`student_count` &gt; 0)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `courses`</span><br><span class="line">(</span><br><span class="line">`id` int</span><br><span class="line">CHECK (`student_count` &gt; 0),</span><br><span class="line">`name` varchar(255),`student_count` int,</span><br><span class="line">`created_at` date,</span><br><span class="line">`teacher_id` int</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为多个列添加 CHECK 约束<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `courses`</span><br><span class="line">(</span><br><span class="line">`id` <span class="type">int</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">`student_count` <span class="type">int</span>,</span><br><span class="line">`created_at` <span class="type">date</span>,</span><br><span class="line">`teacher_id` <span class="type">int</span>,</span><br><span class="line"><span class="keyword">CHECK</span> (`student_count` <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">AND</span> `teacher_id` <span class="operator">&gt;</span> <span class="number">0</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>如果想为一个表中多个字段添加约束，直接在 CHECK 关键字后的括号内添加，两个约束间使用 AND 关键字连接。</p><p>为 CHECK 约束命名<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `courses`</span><br><span class="line">(</span><br><span class="line">`id` <span class="type">int</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">`student_count` <span class="type">int</span>,</span><br><span class="line">`created_at` <span class="type">date</span>,</span><br><span class="line">`teacher_id` <span class="type">int</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> chk_courses <span class="keyword">CHECK</span> (`student_count` <span class="operator">&gt;</span> <span class="number">0</span>) ;</span><br></pre></td></tr></table></figure><br>核心部分的基本语法为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span><span class="keyword">constraint</span> name<span class="operator">&gt;</span>] <span class="keyword">CHECK</span> (<span class="operator">&lt;</span><span class="keyword">condition</span><span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>其中：</p><ul><li>约束关键字 CONSTRAINT：表示其后面接的内容为约束</li><li>constraint name：为约束名称</li><li>关键字 CHECK：表示检查约束</li><li>condition：被约束内容</li></ul></blockquote><h3 id="表已存在时添加-CHECK-约束"><a href="#表已存在时添加-CHECK-约束" class="headerlink" title="表已存在时添加 CHECK 约束"></a>表已存在时添加 CHECK 约束</h3><p>课程表 <code>courses</code> 已存在的情况下为学生总数 <code>student_count</code> 字段添加一个大于 0 的 CHECK 约束。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `courses` </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CHECK</span> ( `student_count` <span class="operator">&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure><br>或<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `courses`  </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> chk_courses <span class="keyword">CHECK</span> ( `student_count` <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">AND</span> `teacher_id` <span class="operator">&gt;</span> <span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><blockquote><ul><li>ALTER TABLE 关键字：表示修改表的定义</li><li>ADD 关键字：表示增加</li></ul></blockquote><h3 id="撤销-CHECK-约束"><a href="#撤销-CHECK-约束" class="headerlink" title="撤销 CHECK 约束"></a>撤销 CHECK 约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `courses` </span><br><span class="line">DROP CHECK chk_courses</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `courses` </span><br><span class="line">DROP CONSTRAINT chk_courses</span><br></pre></td></tr></table></figure><h2 id="DEFAULT-约束"><a href="#DEFAULT-约束" class="headerlink" title="DEFAULT 约束"></a>DEFAULT 约束</h2><p>默认值（Default）”的完整称呼是“默认值约束（Default Constraint）”。MySQL 默认值约束用来指定某列的默认值。</p><h3 id="DEFAULT-约束用法"><a href="#DEFAULT-约束用法" class="headerlink" title="DEFAULT 约束用法"></a>DEFAULT 约束用法</h3><ul><li>DEFAULT 约束用于向列中插入默认值。</li><li>如果没有规定其他的值，那么会将默认值添加到所有的新记录。</li><li>例如女同学较多，性别就可以默认为“女”，如果插入一条新的记录时没有为这个字段赋值，那么系统会自动为这个字段赋值为“女”。</li></ul><h3 id="CREATE-TABLE-时的-DEFAULT-约束"><a href="#CREATE-TABLE-时的-DEFAULT-约束" class="headerlink" title="CREATE TABLE 时的 DEFAULT 约束"></a>CREATE TABLE 时的 DEFAULT 约束</h3><ul><li>使用 DEFAULT 关键字设置默认值约束，具体的语法规则如下所示：<br><code>&lt;字段名&gt; &lt;数据类型&gt; DEFAULT &lt;默认值&gt;</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line">(</span><br><span class="line">    `P_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `LastName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `FirstName` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `Address` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `City` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;Sandnes&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>通过使用类似 GETDATE() 这样的函数, DEFAULT 约束也可以用于插入系统值：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `Orders`</span><br><span class="line">(</span><br><span class="line">    `O_Id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `OrderNo` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `P_Id` <span class="type">int</span>,</span><br><span class="line">    `OrderDate` <span class="type">date</span> <span class="keyword">DEFAULT</span> GETDATE()</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="ALTER-TABLE-时的-DEFAULT-约束"><a href="#ALTER-TABLE-时的-DEFAULT-约束" class="headerlink" title="ALTER TABLE 时的 DEFAULT 约束"></a>ALTER TABLE 时的 DEFAULT 约束</h3><p>如果表已被创建时，想要在 <code>City</code> 列创建 DEFAULT 约束<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">ALTER `City` SET DEFAULT &#x27;SANDNES&#x27;</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `Persons`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> ab_c <span class="keyword">DEFAULT</span> <span class="string">&#x27;SANDNES&#x27;</span> <span class="keyword">for</span> `City`</span><br></pre></td></tr></table></figure><h3 id="撤销-DEFAULT-约束"><a href="#撤销-DEFAULT-约束" class="headerlink" title="撤销 DEFAULT 约束"></a>撤销 DEFAULT 约束</h3><p>如需撤销 <code>Persons</code>表的 DEFAULT 约束 :<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">ALTER `City` DROP DEFAULT</span><br></pre></td></tr></table></figure></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `Persons`</span><br><span class="line">ALTER COLUMN `City` DROP DEFAULT</span><br></pre></td></tr></table></figure><p><a href="https://www.lintcode.com/problem/?typeId=3">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sql基础 </tag>
            
            <tag> mysql </tag>
            
            <tag> 查询 </tag>
            
            <tag> 联结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/28/hello-world/"/>
      <url>/2022/04/28/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
